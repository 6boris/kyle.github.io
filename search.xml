<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go Modules 终极入门</title>
      <link href="/golang/go-modules-ultimate-getting-started/"/>
      <url>/golang/go-modules-ultimate-getting-started/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-Modules-终极入门"><a href="#Go-Modules-终极入门" class="headerlink" title="Go Modules 终极入门"></a>Go Modules 终极入门</h1><p><a href="https://mp.weixin.qq.com/s/fNMXfpBhBC3UWTbYCnwIMg" target="_blank" rel="noopener">原文链接</a></p><p>&emsp;&emsp;Go modules 是 Go 语言中正式官宣的项目依赖解决方案，Go modules（前身为vgo）于 Go1.11 正式发布，在 Go1.14 已经准备好，并且可以用在生产上（ready for production）了，Go 官方也鼓励所有用户从其他依赖项管理工具迁移到 Go modules。</p><p>而 Go1.14，在今天终于正式发布，Go 官方亲自 <strong><code>喊</code></strong> 你来用：</p><p><img src="https://s.gin.sh/blog/golang/go_mod_1.14.png" alt="Go 1.14 Introduction"></p><p>&emsp;&emsp;因此在今天这篇文章中，我将给大家带来 Go modules 的 “终极入门”，欢迎大家一起共同探讨。</p><h2 id="什么是-Go-Modules"><a href="#什么是-Go-Modules" class="headerlink" title="什么是 Go Modules"></a>什么是 Go Modules</h2><p>&emsp;&emsp;Go modules 是 Go 语言的依赖解决方案，发布于 Go1.11，成长于 Go1.12，丰富于 Go1.13，正式于 Go1.14 推荐在生产上使用。</p><p>&emsp;&emsp;Go moudles 目前集成在 Go 的工具链中，只要安装了 Go，自然而然也就可以使用 Go moudles 了，而 Go modules 的出现也解决了在 Go1.11 前的几个常见争议问题：</p><ul><li>Go 语言长久以来的依赖管理问题。</li><li><code>淘汰</code>现有的 GOPATH 的使用模式。</li><li>统一社区中的其它的依赖管理工具（提供迁移功能）。</li></ul><h2 id="GOPATH-的那些点点滴滴"><a href="#GOPATH-的那些点点滴滴" class="headerlink" title="GOPATH 的那些点点滴滴"></a>GOPATH 的那些点点滴滴</h2><p>&emsp;&emsp;我们有提到 Go modules 的解决的问题之一就是“淘汰”掉 GOPATH，但是 GOPATH 又是什么呢，为什么在 Go1.11 前就使用 GOPATH，而 Go1.11 后就开始逐步建议使用 Go modules，不再推荐 GOPATH 的模式了呢？</p><h3 id="GOPATH-是什么"><a href="#GOPATH-是什么" class="headerlink" title="GOPATH 是什么"></a>GOPATH 是什么</h3><p>&emsp;&emsp;我们先看看第一个问题，GOPATH 是什么，我们可以输入如下命令查看：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go envGOPATH="/Users/eddycjy/go"...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;我们输入go env命令行后可以查看到 GOPATH 变量的结果，我们进入到该目录下进行查看，如下：</p><pre><code>go├── bin├── pkg└── src    ├── github.com    ├── golang.org    ├── google.golang.org    ├── gopkg.in    ....</code></pre><p>&emsp;&emsp;GOPATH目录下一共包含了三个子目录，分别是：</p><ul><li>bin：存储所编译生成的二进制文件。</li><li>pkg：存储预编译的目标文件，以加快程序的后续编译速度。</li><li>src：存储所有 <code>.go</code> 文件或源代码。在编写 Go 应用程序，程序包和库时，一般会以 <code>$GOPATH/src/github.com/foo/bar</code> 的路径进行存放。</li></ul><p>&emsp;&emsp;因此在使用 GOPATH 模式下，我们需要将应用代码存放在固定的 <code>$GOPATH/src</code> 目录下，并且如果执行<code>go get</code> 来拉取外部依赖会自动下载并安装到 <code>$GOPATH</code> 目录下。</p><h3 id="为什么弃用-GOPATH-模式"><a href="#为什么弃用-GOPATH-模式" class="headerlink" title="为什么弃用 GOPATH 模式"></a>为什么弃用 GOPATH 模式</h3><p>&emsp;&emsp;在 <code>GOPATH</code> 的 <code>$GOPATH/src</code> 下进行 <code>.go</code> 文件或源代码的存储，我们可以称其为 <code>GOPATH</code> 的模式，这个模式，看起来好像没有什么问题，那么为什么我们要弃用呢，参见如下原因：</p><p><code>GOPATH</code> 模式下没有版本控制的概念，具有致命的缺陷，至少会造成以下问题：</p><ul><li>在执行 <code>go get</code> 的时候，你无法传达任何的版本信息的期望，也就是说你也无法知道自己当前更新的是哪一个版本，也无法通过指定来拉取自己所期望的具体版本。</li><li>在运行 Go 应用程序的时候，你无法保证其它人与你所期望依赖的第三方库是相同的版本，也就是说在项目依赖库的管理上，你无法保证所有人的依赖版本都一致。</li><li>你没办法处理 v1、v2、v3 等等不同版本的引用问题，因为 GOPATH 模式下的导入路径都是一样的，都是 <code>github.com/foo/bar</code> 。</li><li>Go 语言官方从 Go1.11 起开始推进 Go modules（前身vgo），Go1.13 起不再推荐使用 GOPATH 的使用模式，Go modules 也渐趋稳定，因此新项目也没有必要继续使用 GOPATH 模式。</li></ul><h3 id="在-GOPATH-模式下的产物"><a href="#在-GOPATH-模式下的产物" class="headerlink" title="在 GOPATH 模式下的产物"></a>在 GOPATH 模式下的产物</h3><p>&emsp;&emsp;Go1 在 2012 年 03 月 28 日发布，而 Go1.11 是在 2018 年 08 月 25 日才正式发布（数据来源：GitHub Tag），在这个空档的时间内，并没有 Go modules 这一个东西，最早期可能还好说，因为刚发布，用的人不多，所以没有明显暴露，但是后期 Go 语言使用的人越来越多了，那怎么办？</p><p>&emsp;&emsp;这时候社区中逐渐的涌现出了大量的依赖解决方案，百花齐放，让人难以挑选，其中包括我们所熟知的 vendor 目录的模式，以及曾经一度被认为是“官宣”的 dep 的这类依赖管理工具。</p><p>&emsp;&emsp;但为什么 dep 没有正在成为官宣呢，其实是因为随着 Russ Cox 与 Go 团队中的其他成员不断深入地讨论，发现 dep 的一些细节似乎越来越不适合 Go，因此官方采取了另起 proposal 的方式来推进，其方案的结果一开始先是释出 vgo（Go modules 的前身，知道即可，不需要深入了解），最终演变为我们现在所见到的 Go modules，也在 Go1.11 正式进入了 Go 的工具链。</p><p>&emsp;&emsp;因此与其说是 “在 GOPATH 模式下的产物”，不如说是历史为当前提供了重要的教训，因此出现了 Go modules。</p><h2 id="Go-Modules基本使用"><a href="#Go-Modules基本使用" class="headerlink" title="Go Modules基本使用"></a>Go Modules基本使用</h2><p>&emsp;&emsp;在初步了解了 Go modules 的前世今生后，我们正式进入到 Go modules 的使用，首先我们将从头开始创建一个 Go modules 的项目（原则上所创建的目录应该不要放在 GOPATH 之中）。</p><h3 id="所提供的命令"><a href="#所提供的命令" class="headerlink" title="所提供的命令"></a>所提供的命令</h3><p>&emsp;&emsp;在 Go modules 中，我们能够使用如下命令进行操作：</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">go mod init</td><td style="text-align:left">生成 go.mod 文件</td></tr><tr><td style="text-align:left">go mod download</td><td style="text-align:left">下载 go.mod 文件中指明的所有依赖</td></tr><tr><td style="text-align:left">go mod tidy</td><td style="text-align:left">整理现有的依赖</td></tr><tr><td style="text-align:left">go mod graph</td><td style="text-align:left">查看现有的依赖结构</td></tr><tr><td style="text-align:left">go mod edit</td><td style="text-align:left">编辑 go.mod 文件</td></tr><tr><td style="text-align:left">go mod vendor</td><td style="text-align:left">导出项目所有的依赖到vendor目录</td></tr><tr><td style="text-align:left">go mod verify</td><td style="text-align:left">校验一个模块是否被篡改过</td></tr><tr><td style="text-align:left">go mod why</td><td style="text-align:left">查看为什么需要依赖某模块</td></tr></tbody></table><h3 id="所提供的环境变量"><a href="#所提供的环境变量" class="headerlink" title="所提供的环境变量"></a>所提供的环境变量</h3><p>&emsp;&emsp;在 Go modules 中有如下常用环境变量，我们可以通过 go env 命令来进行查看，如下：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go envGO111MODULE="auto"GOPROXY="https://proxy.golang.org,direct"GONOPROXY=""GOSUMDB="sum.golang.org"GONOSUMDB=""GOPRIVATE=""...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h4><p>&emsp;&emsp;Go语言提供了 GO111MODULE 这个环境变量来作为 Go modules 的开关，其允许设置以下参数：</p><ul><li>auto：只要项目包含了 go.mod 文件的话启用 Go modules，目前在 Go1.11 至 Go1.14 中仍然是默认值。</li><li>on：启用 Go modules，推荐设置，将会是未来版本中的默认值。</li><li>off：禁用 Go modules，不推荐设置。</li></ul><h5 id="GO111MODULE-的小历史"><a href="#GO111MODULE-的小历史" class="headerlink" title="GO111MODULE 的小历史"></a>GO111MODULE 的小历史</h5><p>&emsp;&emsp;你可能会留意到 GO111MODULE 这个名字比较“奇特”，实际上在 Go 语言中经常会有这类阶段性的变量， GO111MODULE 这个命名代表着Go语言在 1.11 版本添加的，针对 Module 的变量。</p><p>&emsp;&emsp;像是在 Go1.5 版本的时候，也发布了一个系统环境变量 GO15VENDOREXPERIMENT，作用是用于开启 vendor 目录的支持，当时其默认值也不是开启，仅仅作为 experimental。其随后在 Go1.6 版本时也将默认值改为了开启，并且最后作为了official，GO15VENDOREXPERIMENT 系统变量就退出了历史舞台。</p><p>&emsp;&emsp;而未来 GO111MODULE 这一个系统环境变量也会面临这个问题，也会先调整为默认值为 on（曾经在Go1.13想想改为 on，并且已经合并了 PR，但最后因为种种原因改回了 auto），然后再把 GO111MODULE 的支持给去掉，我们猜测应该会在 Go2 将 GO111MODULE 给去掉，因为如果直接去掉 GO111MODULE 的支持，会存在兼容性问题。</p><h4 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h4><p>&emsp;&emsp;这个环境变量主要是用于设置 Go 模块代理（Go module proxy），其作用是用于使 Go 在后续拉取模块版本时能够脱离传统的 VCS 方式，直接通过镜像站点来快速拉取。</p><p>&emsp;&emsp;GOPROXY 的默认值是：<code>https://proxy.golang.org,direct</code>，这有一个很严重的问题，就是 <code>proxy.golang.org</code> 在国内是无法访问的，因此这会直接卡住你的第一步，所以你必须在开启 Go modules 的时，同时设置国内的 Go 模块代理，执行如下命令：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go env -w GOPROXY=https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;GOPROXY 的值是一个以英文逗号 “,” 分割的 Go 模块代理列表，允许设置多个模块代理，假设你不想使用，也可以将其设置为 “off” ，这将会禁止 Go 在后续操作中使用任何 Go 模块代理。</p><h5 id="direct是什么"><a href="#direct是什么" class="headerlink" title="direct是什么"></a>direct是什么</h5><p>&emsp;&emsp;而在刚刚设置的值中，我们可以发现值列表中有 “direct” 标识，它又有什么作用呢？</p><p>&emsp;&emsp;实际上 “direct” 是一个特殊指示符，用于指示 Go 回源到模块版本的源地址去抓取（比如 GitHub 等），场景如下：当值列表中上一个 Go 模块代理返回 404 或 410 错误时，Go 自动尝试列表中的下一个，遇见 “direct” 时回源，也就是回到源地址去抓取，而遇见 EOF 时终止并抛出类似 “invalid version: unknown revision…” 的错误。</p><h4 id="GOSUMDB"><a href="#GOSUMDB" class="headerlink" title="GOSUMDB"></a>GOSUMDB</h4><p>&emsp;&emsp;它的值是一个 Go checksum database，用于在拉取模块版本时（无论是从源站拉取还是通过 Go module proxy 拉取）保证拉取到的模块版本数据未经过篡改，若发现不一致，也就是可能存在篡改，将会立即中止。</p><p>&emsp;&emsp;GOSUMDB 的默认值为：<code>sum.golang.org</code>，在国内也是无法访问的，但是 GOSUMDB 可以被 Go 模块代理所代理（详见：Proxying a Checksum Database）。</p><p>&emsp;&emsp;因此我们可以通过设置 GOPROXY 来解决，而先前我们所设置的模块代理 <code>goproxy.cn</code> 就能支持代理 <code>sum.golang.org</code>，所以这一个问题在设置 GOPROXY 后，你可以不需要过度关心。</p><p>&emsp;&emsp;另外若对 GOSUMDB 的值有自定义需求，其支持如下格式：</p><ul><li>格式 1：&lt;SUMDB_NAME&gt;+&lt;PUBLIC_KEY&gt;。</li><li>格式 2：&lt;SUMDB_NAME&gt;+&lt;PUBLIC_KEY&gt; &lt;SUMDB_URL&gt;。</li></ul><p>&emsp;&emsp;也可以将其设置为“off”，也就是禁止 Go 在后续操作中校验模块版本。</p><h4 id="GONOPROXY-GONOSUMDB-GOPRIVATE"><a href="#GONOPROXY-GONOSUMDB-GOPRIVATE" class="headerlink" title="GONOPROXY/GONOSUMDB/GOPRIVATE"></a>GONOPROXY/GONOSUMDB/GOPRIVATE</h4><p>&emsp;&emsp;这三个环境变量都是用在当前项目依赖了私有模块，例如像是你公司的私有 git 仓库，又或是 github 中的私有库，都是属于私有模块，都是要进行设置的，否则会拉取失败。</p><p>&emsp;&emsp;更细致来讲，就是依赖了由 GOPROXY 指定的 Go 模块代理或由 GOSUMDB 指定 Go checksum database 都无法访问到的模块时的场景。</p><p>&emsp;&emsp;而一般建议直接设置 GOPRIVATE，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值，所以建议的最佳姿势是直接使用 GOPRIVATE。</p><p>&emsp;&emsp;并且它们的值都是一个以英文逗号 “,” 分割的模块路径前缀，也就是可以设置多个，例如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go env -w GOPRIVATE="git.example.com,github.com/eddycjy/mquote"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;设置后，前缀为 git.xxx.com 和 github.com/eddycjy/mquote 的模块都会被认为是私有模块。</p><p>如果不想每次都重新设置，我们也可以利用通配符，例如：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go env -w GOPRIVATE="*.example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;这样子设置的话，所有模块路径为 example.com 的子域名（例如：git.example.com）都将不经过 Go module proxy 和 Go checksum database，需要注意的是不包括 example.com 本身。</p><h2 id="开启-Go-Modules"><a href="#开启-Go-Modules" class="headerlink" title="开启 Go Modules"></a>开启 Go Modules</h2><p>&emsp;&emsp;目前 Go modules 并不是默认开启，因此Go语言提供了 GO111MODULE 这个环境变量来作为 Go modules 的开关，其允许设置以下参数：</p><ul><li>auto：只要项目包含了 go.mod 文件的话启用 Go modules，目前在Go1.11至 Go1.14 中仍然是默认值。</li><li>on：启用 Go modules，推荐设置，将会是未来版本中的默认值。</li><li>off：禁用 Go modules，不推荐设置。</li></ul><p>&emsp;&emsp;如果你不确定你当前的值是什么，可以执行 <code>go env</code> 命令，查看结果</p><pre class="line-numbers language-sh"><code class="language-sh">$ go envGO111MODULE="off"...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;如果需要对 GO111MODULE 的值进行变更，推荐通过 <code>go env</code> 命令进行设置：</p><pre class="line-numbers language-sh"><code class="language-sh"> $ go env -w GO111MODULE=on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;但是需要注意的是如果对应的系统环境变量有值了（进行过设置），<code>go env</code> 是不支持覆盖写入的，否则会出现如下报错信息：<code>warning: go env -w GO111MODULE=... does not override conflicting OS environment variable</code>。</p><p>又或是可以通过直接设置系统环境变量（写入对应的 .bash_profile 文件亦可）来实现这个目的：</p><pre class="line-numbers language-sh"><code class="language-sh">$ export GO111MODULE=on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>&emsp;&emsp;在完成 Go modules 的开启后，我们需要创建一个示例项目来进行演示，执行如下命令：</p><pre class="line-numbers language-sh"><code class="language-sh">$ mkdir -p $HOME/eddycjy/module-repo $ cd $HOME/eddycjy/module-repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;然后进行 Go modules 的初始化，如下：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go mod init github.com/eddycjy/module-repogo: creating new go.mod: module github.com/eddycjy/module-repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;在执行 <code>go mod init</code> 命令时，我们指定了模块导入路径为 <code>github.com/eddycjy/module-repo</code>。接下来我们在该项目根目录下创建 main.go 文件，如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/eddycjy/mquote"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mquote<span class="token punctuation">.</span><span class="token function">GetHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;然后在项目根目录执行 <code>go get github.com/eddycjy/mquote</code> 命令，如下：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go get github.com/eddycjy/mquote go: finding github.com/eddycjy/mquote latestgo: downloading github.com/eddycjy/mquote v0.0.0-20200220041913-e066a990ce6fgo: extracting github.com/eddycjy/mquote v0.0.0-20200220041913-e066a990ce6f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看-go-mod-文件"><a href="#查看-go-mod-文件" class="headerlink" title="查看 go.mod 文件"></a>查看 go.mod 文件</h3><p>&emsp;&emsp;在初始化项目时，会生成一个 go.mod 文件，是启用了 Go modules 项目所必须的最重要的标识，同时也是 GO111MODULE 值为 auto 时的识别标识，它描述了当前项目（也就是当前模块）的元信息，每一行都以一个动词开头。</p><p>&emsp;&emsp;在我们刚刚进行了初始化和简单拉取后，我们再次查看 go.mod 文件，基本内容如下：</p><pre class="line-numbers language-go"><code class="language-go">module github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>module<span class="token operator">-</span>repo<span class="token keyword">go</span> <span class="token number">1.13</span><span class="token function">require</span> <span class="token punctuation">(</span>    github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">20200220041913</span><span class="token operator">-</span>e066a990ce6f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;为了更进一步的讲解，我们模拟引用如下：</p><pre class="line-numbers language-go"><code class="language-go">module github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>module<span class="token operator">-</span>repo<span class="token keyword">go</span> <span class="token number">1.13</span><span class="token function">require</span> <span class="token punctuation">(</span>    example<span class="token punctuation">.</span>com<span class="token operator">/</span>apple v0<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">2</span>    example<span class="token punctuation">.</span>com<span class="token operator">/</span>banana v1<span class="token number">.2</span><span class="token punctuation">.</span><span class="token number">3</span>    example<span class="token punctuation">.</span>com<span class="token operator">/</span>banana<span class="token operator">/</span>v2 v2<span class="token number">.3</span><span class="token punctuation">.</span><span class="token number">4</span>    example<span class="token punctuation">.</span>com<span class="token operator">/</span>pear <span class="token comment" spellcheck="true">// indirect</span>    example<span class="token punctuation">.</span>com<span class="token operator">/</span>strawberry <span class="token comment" spellcheck="true">// incompatible</span><span class="token punctuation">)</span>exclude example<span class="token punctuation">.</span>com<span class="token operator">/</span>banana v1<span class="token number">.2</span><span class="token punctuation">.</span><span class="token number">4</span>replace example<span class="token punctuation">.</span>com<span class="token operator">/</span>apple v0<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">2</span> <span class="token operator">=</span><span class="token operator">></span> example<span class="token punctuation">.</span>com<span class="token operator">/</span>fried v0<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">0</span> replace example<span class="token punctuation">.</span>com<span class="token operator">/</span>banana <span class="token operator">=</span><span class="token operator">></span> example<span class="token punctuation">.</span>com<span class="token operator">/</span>fish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>module：用于定义当前项目的模块路径。</li><li>go：用于标识当前模块的 Go 语言版本，值为初始化模块时的版本，目前来看还只是个标识作用。</li><li>require：用于设置一个特定的模块版本。</li><li>exclude：用于从使用中排除一个特定的模块版本。</li><li>replace：用于将一个模块版本替换为另外一个模块版本。</li></ul><p>&emsp;&emsp;另外你会发现 <code>example.com/pear</code> 的后面会有一个 indirect 标识，indirect 标识表示该模块为间接依赖，也就是在当前应用程序中的 import 语句中，并没有发现这个模块的明确引用，有可能是你先手动 <code>go get</code> 拉取下来的，也有可能是你所依赖的模块所依赖的，情况有好几种。</p><h3 id="查看-go-sum-文件"><a href="#查看-go-sum-文件" class="headerlink" title="查看 go.sum 文件"></a>查看 go.sum 文件</h3><p>&emsp;&emsp;在第一次拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。</p><pre class="line-numbers language-go"><code class="language-go">github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span> h1<span class="token punctuation">:</span>4QHXKo7J8a6J<span class="token operator">/</span>k8UA6CiHhswJQs0sm2foAQQUq8GFHM<span class="token operator">=</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>ZtlkDs7Mriynl7wsDQ4cU23okEtVYqHwl7F1eDh4qPg<span class="token operator">=</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote<span class="token operator">/</span>module<span class="token operator">/</span>tour v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span> h1<span class="token punctuation">:</span>cc<span class="token operator">+</span>pgV0LnR8Fhou0zNHughT7IbSnLvfUZ<span class="token operator">+</span>X3fvshrv8<span class="token operator">=</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote<span class="token operator">/</span>module<span class="token operator">/</span>tour v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>8uL1FOiQJZ4<span class="token operator">/</span>1hzqQ5mv4Sm7nJcwYu41F3nZmkiWx5I<span class="token operator">=</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;我们可以看到一个模块路径可能有如下两种：</p><pre class="line-numbers language-go"><code class="language-go">github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span> h1<span class="token punctuation">:</span>4QHXKo7J8a6J<span class="token operator">/</span>k8UA6CiHhswJQs0sm2foAQQUq8GFHM<span class="token operator">=</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>eddycjy<span class="token operator">/</span>mquote v0<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod h1<span class="token punctuation">:</span>ZtlkDs7Mriynl7wsDQ4cU23okEtVYqHwl7F1eDh4qPg<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;h1 hash 是 Go modules 将目标模块版本的 zip 文件开包后，针对所有包内文件依次进行 hash，然后再把它们的 hash 结果按照固定格式和算法组成总的 hash 值。</p><p>&emsp;&emsp;而 h1 hash 和 go.mod hash 两者，要不就是同时存在，要不就是只存在 go.mod hash。那什么情况下会不存在 h1 hash 呢，就是当 Go 认为肯定用不到某个模块版本的时候就会省略它的 h1 hash，就会出现不存在 h1 hash，只存在 go.mod hash 的情况。</p><h3 id="查看全局缓存"><a href="#查看全局缓存" class="headerlink" title="查看全局缓存"></a>查看全局缓存</h3><p>&emsp;&emsp;我们刚刚成功的将 <code>github.com/eddycjy/mquote</code> 模块拉取了下来，其拉取的结果缓存在  <code>$GOPATH/pkg/mod和 $GOPATH/pkg/sumdb</code> 目录下，而在mod目录下会以 <code>github.com/foo/bar</code> 的格式进行存放，如下：</p><pre><code>mod├── cache├── github.com├── golang.org├── google.golang.org├── gopkg.in...</code></pre><p>&emsp;&emsp;需要注意的是同一个模块版本的数据只缓存一份，所有其它模块共享使用。如果你希望清理所有已缓存的模块版本数据，可以执行 <code>go clean -modcache</code> 命令。</p><h2 id="Go-Modules-下的-go-get-行为"><a href="#Go-Modules-下的-go-get-行为" class="headerlink" title="Go Modules 下的 go get 行为"></a>Go Modules 下的 go get 行为</h2><p>&emsp;&emsp;在拉取项目依赖时，你会发现拉取的过程总共分为了三大步，分别是 finding（发现）、downloading（下载）以及 extracting（提取）， 并且在拉取信息上一共分为了三段内容：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_info.png" alt="Go Modules 版本信息"></p><p>&emsp;&emsp;需要注意的是，所拉取版本的 commit 时间是以UTC时区为准，而并非本地时区，同时我们会发现我们 go get 命令所拉取到的版本是 v0.0.0，这是因为我们是直接执行 go get -u 获取的，并没有指定任何的版本信息，由 Go modules 自行按照内部规则进行选择。</p><h3 id="go-get-的拉取行为"><a href="#go-get-的拉取行为" class="headerlink" title="go get 的拉取行为"></a>go get 的拉取行为</h3><p>&emsp;&emsp;刚刚我们用 go get 命令拉取了新的依赖，那么 go get 又提供了哪些功能呢，常用的拉取命令如下：</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">go get</td><td style="text-align:left">拉取依赖，会进行指定性拉取（更新），并不会更新所依赖的其它模块。</td></tr><tr><td style="text-align:left">go get -u</td><td style="text-align:left">更新现有的依赖，会强制更新它所依赖的其它全部模块，不包括自身。</td></tr><tr><td style="text-align:left">go get -u -t ./…</td><td style="text-align:left">更新所有直接依赖和间接依赖的模块版本，包括单元测试中用到的。</td></tr></tbody></table><p>&emsp;&emsp;那么我想选择具体版本应当如何执行呢，如下：</p><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">go get golang.org/x/text@latest</td><td style="text-align:left">拉取最新的版本，若存在tag，则优先使用。</td></tr><tr><td style="text-align:left">go get golang.org/x/text@master</td><td style="text-align:left">拉取 master 分支的最新 commit。</td></tr><tr><td style="text-align:left">go get <a href="mailto:golang.org/x/text@v0.3.2">golang.org/x/text@v0.3.2</a></td><td style="text-align:left">拉取 tag 为 v0.3.2 的 commit。</td></tr><tr><td style="text-align:left">go get golang.org/x/text@342b2e</td><td style="text-align:left">拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2。</td></tr></tbody></table><h3 id="go-get-的版本选择"><a href="#go-get-的版本选择" class="headerlink" title="go get 的版本选择"></a>go get 的版本选择</h3><p>&emsp;&emsp;我们回顾一下我们拉取的 <code>go get github.com/eddycjy/mquote</code>，其结果是 <code>v0.0.0-20200220041913-e066a990ce6f</code>，对照着上面所提到的 <code>go get</code> 行为来看，你可能还会有一些疑惑，那就是在 <code>go get</code> 没有指定任何版本的情况下，它的版本选择规则是怎么样的，也就是为什么 <code>go get</code> 拉取的是 <code>v0.0.0</code>，它什么时候会拉取正常带版本号的 <code>tags</code> 呢。实际上这需要区分两种情况，如下：</p><ul><li>所拉取的模块有发布 tags：<ul><li>如果只有单个模块，那么就取主版本号最大的那个tag。</li><li>如果有多个模块，则推算相应的模块路径，取主版本号最大的那个tag（子模块的tag的模块路径会有前缀要求）</li></ul></li><li>所拉取的模块没有发布过 tags：<ul><li>默认取主分支最新一次 commit 的 commithash。</li><li>没有发布过 tags</li></ul></li></ul><h3 id="没有发布过-tags"><a href="#没有发布过-tags" class="headerlink" title="没有发布过 tags"></a>没有发布过 tags</h3><p>&emsp;&emsp;那么为什么会拉取的是 <code>v0.0.0 呢</code>，是因为 <code>github.com/eddycjy/mquote</code> 没有发布任何的tag，如下：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_no_tag.png" alt="没有发布过 tags"></p><p>&emsp;&emsp;因此它默认取的是主分支最新一次 commit 的 commit 时间和 commithash，也就是 <code>20200220041913-e066a990ce6f</code>，属于第二种情况。</p><h3 id="有发布-tags"><a href="#有发布-tags" class="headerlink" title="有发布 tags"></a>有发布 tags</h3><p>&emsp;&emsp;在项目有发布 tags 的情况下，还存在着多种模式，也就是只有单个模块和多个模块，我们统一以多个模块来进行展示，因为多个模块的情况下就已经包含了单个模块的使用了，如下图：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_has_tag.png" alt="有发布 tags"></p><p>&emsp;&emsp;在这个项目中，我们一共打了两个tag，分别是：v0.0.1 和 module/tour/v0.0.1。这时候你可能会奇怪，为什么要打 module/tour/v0.0.1 这么“奇怪”的tag，这有什么用意吗？</p><p>&emsp;&emsp;其实是 Go modules 在同一个项目下多个模块的tag表现方式，其主要目录结构为：</p><pre class="line-numbers language-sh"><code class="language-sh">mquote├── go.mod├── module│   └── tour│       ├── go.mod│       └── tour.go└── quote.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;可以看到在 mquote 这个项目的根目录有一个 go.mod 文件，而在 module/tour 目录下也有一个 go.mod 文件，其模块导入和版本信息的对应关系如下：</p><table><thead><tr><th style="text-align:left">tag</th><th style="text-align:left">模块导入路径</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">v0.0.1</td><td style="text-align:left">github.com/eddycjy/mquote</td><td>mquote 项目的v 0.0.1 版本</td></tr><tr><td style="text-align:left">module/tour/v0.01</td><td style="text-align:left">github.com/eddycjy/mquote/module/tour</td><td>mquote 项目下的子模块 module/tour 的 v0.0.1 版本</td></tr></tbody></table><h3 id="导入主模块和子模块"><a href="#导入主模块和子模块" class="headerlink" title="导入主模块和子模块"></a>导入主模块和子模块</h3><p>&emsp;&emsp;结合上述内容，拉取主模块的话，还是照旧执行如下命令：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go get github.com/eddycjy/mquote@v0.0.1go: finding github.com/eddycjy/mquote v0.0.1go: downloading github.com/eddycjy/mquote v0.0.1go: extracting github.com/eddycjy/mquote v0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;如果是想拉取子模块，执行如下命令：</p><pre class="line-numbers language-sh"><code class="language-sh">$ go get github.com/eddycjy/mquote/module/tour@v0.0.1go: finding github.com/eddycjy/mquote/module v0.0.1go: finding github.com/eddycjy/mquote/module/tour v0.0.1go: downloading github.com/eddycjy/mquote/module/tour v0.0.1go: extracting github.com/eddycjy/mquote/module/tour v0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;我们将主模块和子模块的拉取进行对比，你会发现子模块的拉取会多出一步，它会先发现 <code>github.com/eddycjy/mquote/module</code>，再继续推算，最终拉取到 <code>module/tour</code>。</p><h2 id="Go-Modules-的导入路径说明"><a href="#Go-Modules-的导入路径说明" class="headerlink" title="Go Modules 的导入路径说明"></a>Go Modules 的导入路径说明</h2><h3 id="不同版本的导入路径"><a href="#不同版本的导入路径" class="headerlink" title="不同版本的导入路径"></a>不同版本的导入路径</h3><p>&emsp;&emsp;在前面的模块拉取和引用中，你会发现我们的模块导入路径就是 <code>github.com/eddycjy/mquote</code> 和  <code>github.com/eddycjy/mquote/module/tour</code>，似乎并没有什么特殊的。</p><p>&emsp;&emsp;其实不然，实际上 Go modules 在主版本号为 v0 和 v1 的情况下省略了版本号，而在主版本号为v2及以上则需要明确指定出主版本号，否则会出现冲突，其tag与模块导入路径的大致对应关系如下：</p><table><thead><tr><th style="text-align:left">tag</th><th style="text-align:left">模块导入路径</th></tr></thead><tbody><tr><td style="text-align:left">v0.0.0</td><td style="text-align:left">github.com/eddycjy/mquote</td></tr><tr><td style="text-align:left">v1.0.0</td><td style="text-align:left">github.com/eddycjy/mquote</td></tr><tr><td style="text-align:left">v2.0.0</td><td style="text-align:left">github.com/eddycjy/mquote/v2</td></tr><tr><td style="text-align:left">v3.0.0</td><td style="text-align:left">github.com/eddycjy/mquote/v3</td></tr></tbody></table><p>&emsp;&emsp;简单来讲，就是主版本号为 v0 和 v1 时，不需要在模块导入路径包含主版本的信息，而在 v1 版本以后，也就是 v2 起，必须要在模块的导入路径末尾加上主版本号，引用时就需要调整为如下格式：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/eddycjy/mquote/v2/example"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;另外忽略主版本号 v0 和 v1 是强制性的（不是可选项），因此每个软件包只有一个明确且规范的导入路径。</p><h3 id="为什么忽略-v0-和-v1-的主版本号"><a href="#为什么忽略-v0-和-v1-的主版本号" class="headerlink" title="为什么忽略 v0 和 v1 的主版本号"></a>为什么忽略 v0 和 v1 的主版本号</h3><ul><li><p>1.导入路径中忽略 v1 版本的原因是：考虑到许多开发人员创建一旦到达 v1 版本便永不改变的软件包，这是官方所鼓励的，不认为所有这些开发人员在无意发布 v2 版时都应被迫拥有明确的 v1 版本尾缀，这将导致 v1 版本变成“噪音”且无意义。</p></li><li><p>2.导入路径中忽略了 v0 版本的原因是：根据语义化版本规范，v0的这些版本完全没有兼容性保证。需要一个显式的 v0 版本的标识对确保兼容性没有多大帮助。</p></li></ul><h2 id="Go-Modules-的语义化版本控制"><a href="#Go-Modules-的语义化版本控制" class="headerlink" title="Go Modules 的语义化版本控制"></a>Go Modules 的语义化版本控制</h2><p>&emsp;&emsp;我们不断地在 Go Modules 的使用中提到版本号，其实质上被称为“语义化版本”，假设我们的版本号是 v1.2.3，如下：</p><p>&emsp;&emsp;其版本格式为 “主版本号.次版本号.修订号”，版本号的递增规则如下：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_version_1.png" alt="Go Modules Version 1"></p><ul><li>主版本号：当你做了不兼容的 API 修改。</li><li>次版本号：当你做了向下兼容的功能性新增。</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><p>&emsp;&emsp;假设你是先行版本号或特殊情况，可以将版本信息追加到“主版本号.次版本号.修订号”的后面，作为延伸，如下：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_version_2.png" alt="Go Modules Version 2"></p><p>&emsp;&emsp;至此我们介绍了 Go modules 所支持的两类版本号方式，在我们发布新版本打 tag 的时候，需要注意遵循，否则不遵循语义化版本规则的版本号都是无法进行拉取的。</p><h2 id="Go-Modules-的最小版本选择"><a href="#Go-Modules-的最小版本选择" class="headerlink" title="Go Modules 的最小版本选择"></a>Go Modules 的最小版本选择</h2><p>&emsp;&emsp;现在我们已经有一个模块，也有发布的 tag，但是一个模块往往依赖着许多其它许许多多的模块，并且不同的模块在依赖时很有可能会出现依赖同一个模块的不同版本，如下图（来自 Russ Cox）：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_version_3.png" alt="Go Modules Version 3"></p><p>&emsp;&emsp;在上述依赖中，模块 A 依赖了模块 B 和模块 C，而模块 B 依赖了模块 D，模块 C 依赖了模块 D 和 F，模块 D 又依赖了模块 E，而且同模块的不同版本还依赖了对应模块的不同版本。那么这个时候 Go modules 怎么选择版本，选择的是哪一个版本呢？</p><p>&emsp;&emsp;我们根据 proposal 可得知，Go modules 会把每个模块的依赖版本清单都整理出来，最终得到一个构建清单，如下图（来自 Russ Cox）：</p><p><img src="https://s.gin.sh/blog/golang/mod/go_mod_version_4.png" alt="Go Modules Version 4"></p><p>&emsp;&emsp;我们看到 rough list 和 final list，两者的区别在于重复引用的模块 D（v1.3、v1.4），其最终清单选用了模块 D 的 v1.4 版本，主要原因：</p><ul><li><p>语义化版本的控制：因为模块 D 的 v1.3 和 v1.4 版本变更，都属于次版本号的变更，而在语义化版本的约束下，v1.4 必须是要向下兼容 v1.3 版本，因此认为不存在破坏性变更，也就是兼容的。</p></li><li><p>模块导入路径的规范：主版本号不同，模块的导入路径不一样，因此若出现不兼容的情况，其主版本号会改变，模块的导入路径自然也就改变了，因此不会与第一点的基础相冲突。</p></li></ul><h2 id="go-sum-文件要不要提交"><a href="#go-sum-文件要不要提交" class="headerlink" title="go.sum 文件要不要提交"></a>go.sum 文件要不要提交</h2><p>&emsp;&emsp;理论上 go.mod 和 go.sum 文件都应该提交到你的 Git 仓库中去。</p><p>&emsp;&emsp;假设我们不上传 go.sum 文件，就会造成每个人执行 Go modules 相关命令，又会生成新的一份 go.sum，也就是会重新到上游拉取，再拉取时有可能就是被篡改过的了，会有很大的安全隐患，失去了与基准版本（第一个所提交的人，所期望的版本）的校验内容，因此 go.sum文件是需要提交。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;至此我们介绍了 Go modules 的前世今生、基本使用和在 Go modules 模式下 <code>go get</code> 命令的行为转换，同时我们对常见的多版本导入路径、语义化版本控制以及多模块的最小版本选择规则进行了大致的介绍。</p><p>&emsp;&emsp;Go modules 的成长和发展经历了一定的过程，如果你是刚接触的读者，直接基于 Go modules 的项目开始即可，如果既有老项目，那么是时候考虑切换过来了，Go1.14起已经准备就绪，并推荐你使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">wiki/Modules</a><br><a href="https://github.com/golang/go/wiki/vgo" target="_blank" rel="noopener">wiki/vgo</a><br><a href="https://segmentfault.com/a/1190000020522261" target="_blank" rel="noopener">干货满满的 Go Modules 和 goproxy.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> go mod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kuebctl 操作手册</title>
      <link href="/kubernetes/kubectl-manual/"/>
      <url>/kubernetes/kubectl-manual/</url>
      
        <content type="html"><![CDATA[<h1 id="kuebctl-操作手册"><a href="#kuebctl-操作手册" class="headerlink" title="kuebctl 操作手册"></a>kuebctl 操作手册</h1><h2 id="1-kubectl-安装"><a href="#1-kubectl-安装" class="headerlink" title="1 kubectl 安装"></a>1 kubectl 安装</h2><blockquote><p>kubenetes 所有二进制文件都可以在 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG" target="_blank" rel="noopener">CHANGELOG</a> 下载</p></blockquote><ul><li><p>1.从 Kubernetes GitHub 下载 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.18.md#client-binaries" target="_blank" rel="noopener">Client Binaries</a></p></li><li><p>从官方文档下载 <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">Install and Set Up kubectl</a></p></li></ul><h2 id="2-kubectl-配置"><a href="#2-kubectl-配置" class="headerlink" title="2 kubectl 配置"></a>2 kubectl 配置</h2><p>Kubernetes 迭代速度非常快，几个月就有一个大版本。kubectl 的参数也在不断变化。偶尔直接 –help 查看操作时才发现当前版本不支持。</p><h2 id="3-kubectl-命令详解"><a href="#3-kubectl-命令详解" class="headerlink" title="3 kubectl 命令详解"></a>3 kubectl 命令详解</h2><pre class="line-numbers language-sh"><code class="language-sh"># 查看所有 pod 列表,  -n 后跟 namespace, 查看指定的命名空间kubectl get podkubectl get pod -n kube  # 查看 RC 和 service 列表， -o wide 查看详细信息kubectl get rc,svckubectl get pod,svc -o wide  kubectl get pod <pod-name> -o yaml# 显示 Node 的详细信息kubectl describe node 192.168.0.212# 显示 Pod 的详细信息, 特别是查看 pod 无法创建的时候的日志kubectl describe pod <pod-name>eg:kubectl describe pod redis-master-tqds9# 根据 yaml 创建资源, apply 可以重复执行，create 不行kubectl create -f pod.yamlkubectl apply -f pod.yaml# 基于 pod.yaml 定义的名称删除 pod kubectl delete -f pod.yaml # 删除所有包含某个 label 的pod 和 servicekubectl delete pod,svc -l name=<label-name># 删除所有 Podkubectl delete pod --all# 查看 endpoint 列表kubectl get endpoints# 执行 pod 的 date 命令kubectl exec <pod-name> -- datekubectl exec <pod-name> -- bashkubectl exec <pod-name> -- ping 10.24.51.9# 通过bash获得 pod 中某个容器的TTY，相当于登录容器kubectl exec -it <pod-name> -c <container-name> -- basheg:kubectl exec -it redis-master-cln81 -- bash# 查看容器的日志kubectl logs <pod-name>kubectl logs -f <pod-name> # 实时查看日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> kubectl </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 上的应用部署策略</title>
      <link href="/kubernetes/kubernetes-deployment-strategies/"/>
      <url>/kubernetes/kubernetes-deployment-strategies/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes-上的应用部署策略"><a href="#Kubernetes-上的应用部署策略" class="headerlink" title="Kubernetes 上的应用部署策略"></a>Kubernetes 上的应用部署策略</h1><!-- Choosing the right deployment procedure depends on the needs, we listed below some of the possible strategies to adopt: --><p>在 Kubernetes中，有几种不同的发布应用程序的方法，有必要选择正确的策略以在应用程序更新期间使基础架构可靠。<br><img src="https://s.gin.sh/blog/kubernetes/architecture/architecture-1.jpg" alt="Architecture"></p><!-- Choosing the right deployment procedure depends on the needs, we listed below some of the possible strategies to adopt: --><p>根据需要选择正确的部署过程，我们在下面列出了一些可能采用的策略：</p><!-- - recreate: terminate the old version and release the new one- ramped: release a new version on a rolling update fashion, one after the other- blue/green: release a new version alongside the old version then switch traffic- canary: release a new version to a subset of users, then proceed to a full rollout- a/b testing: release a new version to a subset of users in a precise way (HTTP headers, cookie, weight, etc.). A/B testing is really a technique for making business decisions based on statistics but we will briefly describe the process. This doesn’t come out of the box with Kubernetes, it implies extra work to setup a more advanced infrastructure (Istio, Linkerd, Traefik, custom nginx/haproxy, etc). --><ul><li>recreate: 终止旧版本并发布新版本</li><li>ramped: 以滚动更新的方式发布新版本，一个又一个</li><li>blue/green: 与旧版本一起发布新版本，然后切换流量</li><li>canary: 向一部分用户发布新版本，然后进行全面部署</li><li>a/b testing: 以精确的方式（HTTP标头，Cookie，权重等）向一部分用户发布新版本。 A / B测试实际上是一种基于统计信息做出业务决策的技术，但是我们将简要描述该过程。 Kubernetes并不是开箱即用的，它意味着需要额外的工作来设置更高级的基础架构（Istio，Linkerd，Traefik，自定义nginx / haproxy等）。</li></ul><!-- You can experiment with each of these strategies using Minikube, the manifests and steps to follow are explained in this repository: https://github.com/ContainerSolutions/k8s-deployment-strategies --><p>您可以使用Minikube尝试每种策略，该存储库中说明了要遵循的清单和步骤： <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="noopener">https://github.com/ContainerSolutions/k8s-deployment-strategies</a></p><!-- Let’s take a look at each strategy and see what type of application would fit best for it. --><p>让我们看一下每种策略，看看哪种类型的应用程序最适合它。</p><!-- ## Recreate - best for development environment --><h2 id="重新建立-最适合开发环境"><a href="#重新建立-最适合开发环境" class="headerlink" title="重新建立 - 最适合开发环境"></a>重新建立 - 最适合开发环境</h2><p>使用 <code>Recreate</code> 类型的策略定义的部署将终止所有正在运行的实例，然后使用较新版本重新创建它们。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> Recreate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以在以下位置找到完整的示例和部署步骤:  <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/recreate" target="_blank" rel="noopener">https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/recreate</a> </p><!-- Pro: --><p>优点:</p><!-- - application state entirely renewed --><ul><li>应用状态完全更新</li></ul><!-- Cons: --><p>缺点:<br><!-- - downtime that depends on both shutdown and boot duration of the application --></p><ul><li>停机时间取决于应用程序的关闭和启动持续时间</li></ul><!-- ## Ramped - slow rollout --><h2 id="Ramped-slow-rollout"><a href="#Ramped-slow-rollout" class="headerlink" title="Ramped - slow rollout"></a>Ramped - slow rollout</h2><!-- A ramped deployment updates pods in a rolling update fashion, a secondary ReplicaSet is created with the new version of the application, then the number of replicas of the old version is decreased and the new version is increased until the correct number of replicas is reached. --><p>渐变部署以滚动更新方式更新 pod，使用应用程序的新版本创建辅助ReplicaSet，然后减少旧版本的副本数，并增加新版本，直到达到正确的副本数。</p><p><img src="https://s.gin.sh/blog/kubernetes/architecture/kubernetes-deployment-strategy-ramped-1.png" alt="Kubernetes Deployment Strategy Ramped"></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> <span class="token number">2        </span><span class="token comment" spellcheck="true"># how many pods we can add at a time</span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">0  </span><span class="token comment" spellcheck="true"># maxUnavailable define how many pods can be unavailable</span>                         <span class="token comment" spellcheck="true"># during the rolling update</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在以下位置找到完整的示例和部署步骤 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/ramped" target="_blank" rel="noopener">https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/ramped</a></p><!-- When setup together with horizontal pod autoscaling it can be handy to use a percentage based value instead of a number for maxSurge and maxUnavailable. --><p>与水平吊舱自动缩放一起设置时，使用基于百分比的值代替 maxSurge 和 maxUnavailable 的数字会很方便。</p><!-- If you trigger a deployment while an existing rollout is in progress, the deployment will pause the rollout and proceed to a new release by overriding the rollout. --><p>如果在进行现有部署时触发部署，则部署将暂停部署，并通过覆盖部署来继续进行新发行。</p><p>优点:</p><!-- - version is slowly released across instances --><!-- - convenient for stateful applications that can handle rebalancing of the data --><ul><li>版本会在实例之间缓慢发布</li><li>对于可以处理数据重新平衡的有状态应用程序很方便</li></ul><p>缺点:</p><!-- - rollout/rollback can take time- supporting multiple APIs is hard- no control over traffic --><ul><li>推出/回滚可能需要一些时间</li><li>很难支持多个 API</li><li>无法控制流量</li></ul><!-- ## Blue/Green - best to avoid API versioning issues --><h2 id="蓝-绿-发布-最好避免-API-版本控制问题"><a href="#蓝-绿-发布-最好避免-API-版本控制问题" class="headerlink" title="蓝/绿 发布 - 最好避免 API 版本控制问题"></a>蓝/绿 发布 - 最好避免 API 版本控制问题</h2><!-- A blue/green deployment differs from a ramped deployment because the "green" version of the application is deployed alongside the "blue" version. After testing that the new version meets the requirements, we update the Kubernetes Service object that plays the role of load balancer to send traffic to the new version by replacing the version label in the selector field. --><p>蓝色/绿色部署与渐变部署不同，因为应用程序的“绿色”版本与“蓝色”版本一起部署。 在测试新版本满足要求之后，我们更新 Kubernetes Service 对象，该对象扮演负载平衡器的角色，通过替换选择器字段中的版本标签将流量发送到新版本。</p><p><img src="https://s.gin.sh/blog/kubernetes/architecture/kubernetes-deployment-strategy-blue-green-1.png" alt="kubernetes Deployment Strategy Blue Green"></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app <span class="token key atrule">labels</span><span class="token punctuation">:</span>   <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>   <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span> <span class="token comment" spellcheck="true"># Note here that we match both the app and the version.</span> <span class="token comment" spellcheck="true"># When switching traffic, we update the label “version” with</span> <span class="token comment" spellcheck="true"># the appropriate value, ie: v2.0.0</span> <span class="token key atrule">selector</span><span class="token punctuation">:</span>   <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app   <span class="token key atrule">version</span><span class="token punctuation">:</span> v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- A full example and steps to deploy can be found at https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/blue-green --><p>可以在以下位置找到完整的示例和部署步骤 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/blue-green" target="_blank" rel="noopener">https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/blue-green</a></p><p>优点:</p><!-- - instant rollout/rollback --><!-- - avoid versioning issue, change the entire cluster state in one go --><ul><li>即时推出/回滚</li><li>避免版本问题，一次性更改整个群集状态</li></ul><p>缺点:</p><!-- - requires double the resources- proper test of the entire platform should be done before releasing to production- handling stateful applications can be hard --><ul><li>需要两倍的资源</li><li>在发布到生产环境之前，应该对整个平台进行适当的测试</li><li>处理有状态的应用程序可能很困难</li></ul><!-- ## Canary - let the consumer do the testing --><h2 id="金丝雀-让用户测试"><a href="#金丝雀-让用户测试" class="headerlink" title="金丝雀 - 让用户测试"></a>金丝雀 - 让用户测试</h2><!-- A canary deployment consists of routing a subset of users to a new functionality. In Kubernetes, a canary deployment can be done using two Deployments with common pod labels. One replica of the new version is released alongside the old version. Then after some time and if no error is detected, scale up the number of replicas of the new version and delete the old deployment. --><p>金丝雀部署包括将用户的子集路由到新功能。 在Kubernetes中，可以使用两个具有通用Pod标签的部署来完成金丝雀部署。 新版本的一个副本与旧版本一起发布。 然后，在一段时间后，如果未检测到错误，请按比例增加新版本的副本数量并删除旧的部署。</p><!-- Using this ReplicaSet technique requires spinning-up as many pods as necessary to get the right percentage of traffic. That said, if you want to send 1% of traffic to version B, you need to have one pod running with version B and 99 pods running with version A. This can be pretty inconvenient to manage so if you are looking for a better managed traffic distribution, look at load balancers such as HAProxy or service meshes like Linkerd, which provide greater controls over traffic. --><p>使用此ReplicaSet技术需要旋转尽可能多的Pod，以获取正确百分比的流量。 就是说，如果您要将1％的流量发送到B版，则需要让一个Pod与B版一起运行，而有99个Pod与A版一起运行。这可能非常不方便管理，因此，如果您正在寻找一种更好的管理方式， 流量分配，请查看诸如HAProxy之类的负载平衡器或诸如Linkerd之类的服务网格，它们可以提供对流量的更好控制。</p><p><img src="https://s.gin.sh/blog/kubernetes/architecture/kubernetes-deployment-strategy-canary-1.png" alt="kubernetes Deployment Strategy Canary"></p><!-- In the following example we use two ReplicaSets side by side, version A with three replicas (75% of the traffic), version B with one replica (25% of the traffic). --><p>在以下示例中，我们并排使用两个副本集，版本A具有三个副本（占流量的75％），版本B具有一个副本（占流量的25％）。</p><p>Truncated deployment manifest version A:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Truncated deployment manifest version B, note that we only start one replica of the application:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><!-- A full example and steps to deploy can be found at https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/canary --><p>可以在以下位置找到完整的示例和部署步骤 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/canary" target="_blank" rel="noopener">https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/canary</a></p><p>优点:</p><!-- - version released for a subset of users --><!-- - convenient for error rate and performance monitoring --><!-- - fast rollback --><ul><li>为部分用户发布的版本</li><li>方便错误率和性能监控</li><li>快速回滚</li></ul><p>缺点:</p><!-- - slow rollout- fine tuned traffic distribution can be expensive (99% A/ 1%B = 99 pod A, 1 pod B) --><ul><li>缓慢推出</li><li>调整好的流量分配可能会很昂贵（99％A / 1％B = 99个Pod A，1个Pod B）</li></ul><!-- The procedure used above is Kubernetes native, we adjust the number of replicas managed by a ReplicaSet to distribute the traffic amongst the versions. --><p>上面使用的过程是Kubernetes的本机程序，我们调整了ReplicaSet管理的副本数量，以在版本之间分配流量。</p><!-- If you are not confident about the impact that the release of a new feature might have on the stability of the platform, a canary release strategy is suggested. --><p>如果您不确定新功能的发布可能对平台的稳定性产生什么影响，建议使用金丝雀发布策略。</p><!-- ## A/B testing - best for feature testing on a subset of users --><h2 id="A-B-测试-最适合部分用户的功能测试"><a href="#A-B-测试-最适合部分用户的功能测试" class="headerlink" title="A/B 测试 - 最适合部分用户的功能测试"></a>A/B 测试 - 最适合部分用户的功能测试</h2><!-- A/B testing is really a technique for making business decisions based on statistics, rather than a deployment strategy. However, it is related and can be implemented using a canary deployment so we will briefly discuss it here. --><p>A/B 测试实际上是一种基于统计信息而不是部署策略制定业务决策的技术。 但是，它是相关的，可以使用canary部署来实现，因此我们将在此处简要讨论。</p><!-- In addition to distributing traffic amongst versions based on weight, you can precisely target a given pool of users based on a few parameters (cookie, user agent, etc.). This technique is widely used to test conversion of a given feature and only rollout the version that converts the most. --><p>除了根据权重在各个版本之间分配流量外，您还可以基于一些参数（cookie，用户代理等）精确定位给定的用户群。 此技术被广泛用于测试给定功能的转换，并且仅推出转换最多的版本。</p><!-- Istio, like other service meshes, provides a finer-grained way to subdivide service instances with dynamic request routing based on weights and/or HTTP headers. --><p>与其他服务网格一样，Istio提供了一种更细粒度的方法，可以基于权重和/或HTTP标头使用动态请求路由细分服务实例。</p><p><img src="https://s.gin.sh/blog/kubernetes/architecture/kubernetes-deployment-strategy-a-b-testing-3.png" alt="Kubernetes Deployment Strategy A/B testing"></p><!-- Below is an example of rules setup using Istio, as Istio is still in heavy development the following example rule may change in the future: --><p>以下是使用 Istio 设置规则的示例，因为 Istio 仍处于开发阶段，因此以下示例规则将来可能会更改：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">route</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> v1.0.0  <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">-</span> <span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> v2.0.0  <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在以下位置找到完整的示例和部署步骤 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/ab-testing" target="_blank" rel="noopener">https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/ab-testing</a></p><!-- Other tools like Linkerd, Traefik, NGINX, HAProxy, also allow you to do this. --><p>其他工具（如Linkerd，Traefik，NGINX，HAProxy）也允许您执行此操作。</p><p>优点:</p><!-- - requires intelligent load balancer --><!-- - several versions run in parallel --><!-- - full control over the traffic distribution --><ul><li>需要智能负载均衡器</li><li>多个版本并行运行</li><li>完全控制流量分配</li></ul><p>缺点:</p><!-- - hard to troubleshoot errors for a given session, distributed tracing becomes mandatory --><!-- - not straightforward, you need to setup additional tools --><ul><li>很难解决给定会话的错误，必须进行分布式跟踪</li><li>不简单，您需要设置其他工具</li></ul><p><img src="https://s.gin.sh/blog/kubernetes/architecture/k8s_deployment_strategies.png" alt="Kubernetes Deployment Strategy"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><!-- There are different ways to deploy an application, when releasing to development/staging environments, a recreate or ramped deployment is usually a good choice. When it comes to production, a ramped or blue/green deployment is usually a good fit, but proper testing of the new platform is necessary. If you are not confident with the stability of the platform and what could be the impact of releasing a new software version, then a canary release should be the way to go. By doing so, you let the consumer test the application and its integration to the platform. Last but not least, if your business requires testing of a new feature amongst a specific pool of users, for example all users accessing the application using a mobile phone are sent to version A, all users accessing via desktop go to version B. Then you may want to use the A/B testing technique which, by using a Kubernetes service mesh or a custom server configuration lets you target where a user should be routed depending on some parameters. --><p>有多种方法可以部署应用程序，当发布到开发/登台环境时，重新创建或扩展的部署通常是一个不错的选择。当涉及生产时，通常最好是采用倾斜的部署或蓝绿色部署，但必须对新平台进行适当的测试。如果您对平台的稳定性以及发布新软件版本可能带来的影响不满意，那么应该选择Canary发布。这样，您就可以让使用者测试应用程序及其与平台的集成。最后但并非最不重要的一点是，如果您的企业需要在特定的用户群中测试新功能，例如，所有使用手机访问该应用程序的用户都发送到版本A，那么所有通过桌面访问的用户都将转到版本B。可能想使用A / B测试技术，该技术通过使用Kubernetes服务网格或自定义服务器配置，使您可以根据某些参数确定应将用户路由到的位置。</p><!-- I hope this was useful, if you have any questions/feedback feel free to comment below. --><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.container-solutions.com/kubernetes-deployment-strategies" target="_blank" rel="noopener">Blog Kubernetes Deployment Strategy</a><br><a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="noopener">GitHub Kubernetes Deployment Strategy</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Deployment </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Deployment YAML glossary</title>
      <link href="/kubernetes/kubernetes-deployment-yaml-glossary/"/>
      <url>/kubernetes/kubernetes-deployment-yaml-glossary/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes-Deployment-YAML-glossary"><a href="#Kubernetes-Deployment-YAML-glossary" class="headerlink" title="Kubernetes Deployment YAML glossary"></a>Kubernetes Deployment YAML glossary</h1><h2 id="Deployment-简述"><a href="#Deployment-简述" class="headerlink" title="Deployment 简述"></a>Deployment 简述</h2><p>:smile:</p><p><code>Deployment</code> 为 <code>Pod</code> 和 <code>ReplicaSet</code> 提供了一个声明式定义 (declarative) 方法，用来替代以前的 <code>ReplicationController</code> 更方便的管理应用。<br>作为最常用的 <code>Kubernetes</code> 对象，<code>Deployment</code> 经常会用来创建 <code>ReplicaSet</code> 和 <code>Pod</code>，我们往往不会直接在集群中使用 <code>ReplicaSet</code> 部署一个新的微服务，一方面是因为 <code>ReplicaSet</code> 的功能其实不够强大，一些常见的更新、扩容和缩容运维操作都不支持，<code>Deployment</code> 的引入就是为了支持这些复杂的操作。</p><h2 id="Deployment-API-版本对照表"><a href="#Deployment-API-版本对照表" class="headerlink" title="Deployment API 版本对照表"></a>Deployment API 版本对照表</h2><table><thead><tr><th style="text-align:center">Kubernetes 版本</th><th style="text-align:center">Deployment 版本</th></tr></thead><tbody><tr><td style="text-align:center">v1.5-v1.15</td><td style="text-align:center">extensions/v1beta1</td></tr><tr><td style="text-align:center">v1.7-v1.15</td><td style="text-align:center">apps/v1beta1</td></tr><tr><td style="text-align:center">v1.8-v1.15</td><td style="text-align:center">apps/v1beta2</td></tr><tr><td style="text-align:center">v1.9+</td><td style="text-align:center">apps/v1</td></tr></tbody></table><h2 id="Deployment-一个典型的用例"><a href="#Deployment-一个典型的用例" class="headerlink" title="Deployment 一个典型的用例"></a>Deployment 一个典型的用例</h2><p>一个典型的用例如下：</p><ul><li>使用 Deployment 来创建 ReplicaSet。ReplicaSet 在后台创建 pod。检查启动状态，看它是成功还是失败。</li><li>然后，通过更新 Deployment 的 PodTemplateSpec 字段来声明 Pod 的新状态。这会创建一个新的 ReplicaSet，Deployment 会按照控制的速率将 pod 从旧的 ReplicaSet 移动到新的 ReplicaSet 中。</li><li>如果当前状态不稳定，回滚到之前的 Deployment revision。每次回滚都会更新 Deployment 的 revision。</li><li>扩容 Deployment 以满足更高的负载。</li><li>暂停 Deployment 来应用 PodTemplateSpec 的多个修复，然后恢复上线。</li><li>根据 Deployment 的状态判断上线是否 hang 住了。</li><li>清除旧的不必要的 ReplicaSet。</li></ul><h2 id="创建-Deployment"><a href="#创建-Deployment" class="headerlink" title="创建 Deployment"></a>创建 Deployment</h2><p>Deployment yaml文件包含四个部分：</p><ul><li>apiVersion: 表示版本</li><li>kind: 表示资源</li><li>metadata: 表示元信息</li><li>spec: 资源规范字段</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1  <span class="token comment" spellcheck="true"># 指定api版本，此值必须在kubectl api-versions中  </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment  <span class="token comment" spellcheck="true"># 指定创建资源的角色/类型   </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 资源的元数据/属性 </span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo  <span class="token comment" spellcheck="true"># 资源的名字，在同一个namespace中必须唯一</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment" spellcheck="true"># 部署在哪个namespace中</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 设定资源的标签</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo    <span class="token key atrule">version</span><span class="token punctuation">:</span> stable<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 资源规范字段</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true"># 声明副本数目</span>  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">3 </span><span class="token comment" spellcheck="true"># 保留历史版本</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 选择器</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 匹配标签</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> demo      <span class="token key atrule">version</span><span class="token punctuation">:</span> stable  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 策略</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 滚动更新</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 30% <span class="token comment" spellcheck="true"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 30% <span class="token comment" spellcheck="true"># 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate <span class="token comment" spellcheck="true"># 滚动更新策略</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 模版</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 资源的元数据/属性 </span>      <span class="token key atrule">annotations</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 自定义注解列表</span>        <span class="token key atrule">sidecar.istio.io/inject</span><span class="token punctuation">:</span> <span class="token string">"false"</span> <span class="token comment" spellcheck="true"># 自定义注解名字</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 设定资源的标签</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> demo        <span class="token key atrule">version</span><span class="token punctuation">:</span> stable    <span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 资源规范字段</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> demo <span class="token comment" spellcheck="true"># 容器的名字   </span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> demo<span class="token punctuation">:</span>v1 <span class="token comment" spellcheck="true"># 容器使用的镜像地址   </span>        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent <span class="token comment" spellcheck="true"># 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent</span>                                      <span class="token comment" spellcheck="true"># Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取 </span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 资源管理</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 最大使用</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 300m <span class="token comment" spellcheck="true"># CPU，1核心 = 1000m</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 500Mi <span class="token comment" spellcheck="true"># 内存，1G = 1024Mi</span>          <span class="token key atrule">requests</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># pod 内部健康检查的设置</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 通过httpget检查健康，返回200-399之间，则认为容器正常</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthCheck <span class="token comment" spellcheck="true"># URI地址</span>            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080 </span><span class="token comment" spellcheck="true"># 端口</span>            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP <span class="token comment" spellcheck="true"># 协议</span>            <span class="token comment" spellcheck="true"># host: 127.0.0.1 # 主机地址</span>          <span class="token key atrule">exec</span><span class="token punctuation">:</span>             <span class="token key atrule">command</span><span class="token punctuation">:</span>               <span class="token punctuation">-</span> cat               <span class="token punctuation">-</span> /tmp/healthy          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30 </span><span class="token comment" spellcheck="true"># 表明第一次检测在容器启动后多长时间后开始</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 检测的超时时间</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">30 </span><span class="token comment" spellcheck="true"># 检查间隔时间</span>          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1 </span><span class="token comment" spellcheck="true"># 成功门槛</span>          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 失败门槛，连接失败5次，pod杀掉，重启一个新的pod</span>        <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># Pod 准备服务健康检查设置</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthCheck            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>          <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token comment" spellcheck="true">#也可以用这种方法   </span>          <span class="token comment" spellcheck="true">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常   </span>          <span class="token comment" spellcheck="true">#  command:   </span>          <span class="token comment" spellcheck="true">#    - cat   </span>          <span class="token comment" spellcheck="true">#    - /tmp/health   </span>          <span class="token comment" spellcheck="true">#也可以用这种方法   </span>          <span class="token comment" spellcheck="true">#tcpSocket: # 通过tcpSocket检查健康  </span>          <span class="token comment" spellcheck="true">#  port: number </span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http <span class="token comment" spellcheck="true"># 名称</span>            <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080 </span><span class="token comment" spellcheck="true"># 容器开发对外的端口 </span>            <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP <span class="token comment" spellcheck="true"># 协议</span>      <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 镜像仓库拉取密钥</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> harbor<span class="token punctuation">-</span>certification      <span class="token key atrule">affinity</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 亲和性调试</span>        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 节点亲和力</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># pod 必须部署到满足条件的节点上</span>            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 节点满足任何一个条件就可以</span>            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 有多个选项，则只有同时满足这些逻辑选项的节点才能运行 pod</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> beta.kubernetes.io/arch                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Service yaml 名词解释：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1 <span class="token comment" spellcheck="true"># 指定api版本，此值必须在kubectl api-versions中 </span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service <span class="token comment" spellcheck="true"># 指定创建资源的角色/类型 </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 资源的元数据/属性</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo <span class="token comment" spellcheck="true"># 资源的名字，在同一个namespace中必须唯一</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment" spellcheck="true"># 部署在哪个namespace中</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 设定资源的标签</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 资源规范字段</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP <span class="token comment" spellcheck="true"># ClusterIP 类型</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080 </span><span class="token comment" spellcheck="true"># service 端口</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> http <span class="token comment" spellcheck="true"># 容器暴露的端口</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP <span class="token comment" spellcheck="true"># 协议</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> http <span class="token comment" spellcheck="true"># 端口名称</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 选择器</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</a><br><a href="https://feisky.gitbooks.io/kubernetes/concepts/deployment.html" target="_blank" rel="noopener">https://feisky.gitbooks.io/kubernetes/concepts/deployment.html</a><br><a href="https://draveness.me/kubernetes-deployment" target="_blank" rel="noopener">https://draveness.me/kubernetes-deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubeadm </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> YAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go GC 20 问</title>
      <link href="/golang/go-gc-20-asks/"/>
      <url>/golang/go-gc-20-asks/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-GC-20-问"><a href="#Golang-GC-20-问" class="headerlink" title="Golang GC 20 问"></a>Golang GC 20 问</h1><blockquote><p>本文写于 Go 1.14 beta1，当文中提及目前、目前版本等字眼时均指 Go 1.14，此外，文中所有 go 命令版本均为 Go 1.14。 <a href="https://github.com/qcrao/Go-Questions/blob/master/GC/GC.md" target="_blank" rel="noopener">原文链接</a></p></blockquote><h2 id="GC-的认识"><a href="#GC-的认识" class="headerlink" title="GC 的认识"></a>GC 的认识</h2><h3 id="1-什么是-GC，有什么作用？"><a href="#1-什么是-GC，有什么作用？" class="headerlink" title="1. 什么是 GC，有什么作用？"></a>1. 什么是 GC，有什么作用？</h3><p><code>GC</code>，全称 <code>Garbage Collection</code>，即垃圾回收，是一种自动内存管理的机制。</p><p>当程序向操作系统申请的内存不再需要时，垃圾回收主动将其回收并供其他代码进行内存申请时候复用，或者将其归还给操作系统，这种针对内存级别资源的自动回收过程，即为垃圾回收。而负责垃圾回收的程序组件，即为垃圾回收器。</p><p>垃圾回收其实一个完美的 “Simplicity is Complicated” 的例子。一方面，程序员受益于 GC，无需操心、也不再需要对内存进行手动的申请和释放操作，GC 在程序运行时自动释放残留的内存。另一方面，GC 对程序员几乎不可见，仅在程序需要进行特殊优化时，通过提供可调控的 API，对 GC 的运行时机、运行开销进行把控的时候才得以现身。</p><p>通常，垃圾回收器的执行过程被划分为两个半独立的组件：</p><ul><li>赋值器（Mutator）：这一名称本质上是在指代用户态的代码。因为对垃圾回收器而言，用户态的代码仅仅只是在修改对象之间的引用关系，也就是在对象图（对象之间引用关系的一个有向图）上进行操作。</li><li>回收器（Collector）：负责执行垃圾回收的代码。</li></ul><h3 id="2-根对象到底是什么？"><a href="#2-根对象到底是什么？" class="headerlink" title="2. 根对象到底是什么？"></a>2. 根对象到底是什么？</h3><p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：</p><ol><li>全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。</li><li>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。</li><li>寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。</li></ol><h3 id="3-常见的-GC-实现方式有哪些？Go-语言的-GC-使用的是什么？"><a href="#3-常见的-GC-实现方式有哪些？Go-语言的-GC-使用的是什么？" class="headerlink" title="3. 常见的 GC 实现方式有哪些？Go 语言的 GC 使用的是什么？"></a>3. 常见的 GC 实现方式有哪些？Go 语言的 GC 使用的是什么？</h3><p>所有的 GC 算法其存在形式可以归结为追踪（Tracing）和引用计数（Reference Counting）这两种形式的混合运用。</p><ul><li><p>追踪式 GC </p><p>从根对象出发，根据对象之间的引用信息，一步步推进直到扫描完毕整个堆并确定需要保留的对象，从而回收所有可回收的对象。Go、 Java、V8 对 JavaScript 的实现等均为追踪式 GC。</p></li><li><p>引用计数式 GC</p><p>每个对象自身包含一个被引用的计数器，当计数器归零时自动得到回收。因为此方法缺陷较多，在追求高性能时通常不被应用。Python、Objective-C 等均为引用计数式 GC。</p></li></ul><p>目前比较常见的 GC 实现方式包括：</p><ul><li>追踪式，分为多种不同类型，例如：<ul><li>标记清扫：从根对象出发，将确定存活的对象进行标记，并清扫可以回收的对象。</li><li>标记整理：为了解决内存碎片问题而提出，在标记过程中，将对象尽可能整理到一块连续的内存上。</li><li>增量式：将标记与清扫的过程分批执行，每次执行很小的部分，从而增量的推进垃圾回收，达到近似实时、几乎无停顿的目的。</li><li>增量整理：在增量式的基础上，增加对对象的整理过程。</li><li>分代式：将对象根据存活时间的长短进行分类，存活时间小于某个值的为年轻代，存活时间大于某个值的为老年代，永远不会参与回收的对象为永久代。并根据分代假设（如果一个对象存活时间不长则倾向于被回收，如果一个对象已经存活很长时间则倾向于存活更长时间）对对象进行回收。</li></ul></li><li>引用计数：根据对象自身的引用计数来回收，当引用计数归零时立即回收。</li></ul><p>关于各类方法的详细介绍及其实现不在本文中详细讨论。对于 Go 而言，Go 的 GC 目前使用的是无分代（对象没有代际之分）、不整理（回收过程中不对对象进行移动与整理）、并发（与用户代码并发执行）的三色标记清扫算法。<a href="https://groups.google.com/d/msg/golang-nuts/KJiyv2mV2pU/wdBUH1mHCAAJ" target="_blank" rel="noopener">原因</a>在于：</p><ol><li>对象整理的优势是解决内存碎片问题以及“允许”使用顺序内存分配器。但 Go 运行时的分配算法基于 tcmalloc，基本上没有碎片问题。 并且顺序内存分配器在多线程的场景下并不适用。Go 使用的是基于 tcmalloc 的现代内存分配算法，对对象进行整理不会带来实质性的性能提升。</li><li>分代 GC 依赖分代假设，即 GC 将主要的回收目标放在新创建的对象上（存活时间短，更倾向于被回收），而非频繁检查所有对象。但 Go 的编译器会通过<strong>逃逸分析</strong>将大部分新生对象存储在栈上（栈直接被回收），只有那些需要长期存在的对象才会被分配到需要进行垃圾回收的堆中。也就是说，分代 GC 回收的那些存活时间短的对象在 Go 中是直接被分配到栈上，当 goroutine 死亡后栈也会被直接回收，不需要 GC 的参与，进而分代假设并没有带来直接优势。并且 Go 的垃圾回收器与用户代码并发执行，使得 STW 的时间与对象的代际、对象的 size 没有关系。Go 团队更关注于如何更好地让 GC 与用户代码并发执行（使用适当的 CPU 来执行垃圾回收），而非减少停顿时间这一单一目标上。</li></ol><h3 id="4-三色标记法是什么？"><a href="#4-三色标记法是什么？" class="headerlink" title="4. 三色标记法是什么？"></a>4. 三色标记法是什么？</h3><p>理解<strong>三色标记法</strong>的关键是理解对象的<strong>三色抽象</strong>以及<strong>波面（wavefront）推进</strong>这两个概念。三色抽象只是一种描述追踪式回收器的方法，在实践中并没有实际含义，它的重要作用在于从逻辑上严密推导标记清理这种垃圾回收方法的正确性。也就是说，当我们谈及三色标记法时，通常指标记清扫的垃圾回收。</p><p>从垃圾回收器的视角来看，三色抽象规定了三种不同类型的对象，并用不同的颜色相称：</p><ul><li>白色对象（可能死亡）：未被回收器访问到的对象。在回收开始阶段，所有对象均为白色，当回收结束后，白色对象均不可达。</li><li>灰色对象（波面）：已被回收器访问到的对象，但回收器需要对其中的一个或多个指针进行扫描，因为他们可能还指向白色对象。</li><li>黑色对象（确定存活）：已被回收器访问到的对象，其中所有字段都已被扫描，黑色对象中任何一个指针都不可能直接指向白色对象。</li></ul><p>这样三种不变性所定义的回收过程其实是一个<strong>波面</strong>不断前进的过程，这个波面同时也是黑色对象和白色对象的边界，灰色对象就是这个波面。</p><p>当垃圾回收开始时，只有白色对象。随着标记过程开始进行时，灰色对象开始出现（着色），这时候波面便开始扩大。当一个对象的所有子节点均完成扫描时，会被着色为黑色。当整个堆遍历完成时，只剩下黑色和白色对象，这时的黑色对象为可达对象，即存活；而白色对象为不可达对象，即死亡。这个过程可以视为以灰色对象为波面，将黑色对象和白色对象分离，使波面不断向前推进，直到所有可达的灰色对象都变为黑色对象为止的过程。如下图所示：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-blueprint.png" alt="三色标记法全貌"></p><p>图中展示了根对象、可达对象、不可达对象，黑、灰、白对象以及波面之间的关系。</p><h3 id="5-STW-是什么意思？"><a href="#5-STW-是什么意思？" class="headerlink" title="5. STW 是什么意思？"></a>5. STW 是什么意思？</h3><p><code>STW</code> 是 <code>Stop the World</code> 的缩写，即万物静止，是指在垃圾回收过程中为了保证实现的正确性、防止无止境的内存增长等问题而不可避免的需要停止赋值器进一步操作对象图的一段过程。</p><p>在这个过程中整个用户代码被停止或者放缓执行， <code>STW</code> 越长，对用户代码造成的影响（例如延迟）就越大，早期 Go 对垃圾回收器的实现中 <code>STW</code> 长达几百毫秒，对时间敏感的实时通信等应用程序会造成巨大的影响。我们来看一个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"runtime"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的这个程序在 Go 1.14 以前永远都不会输出 <code>OK</code>，其罪魁祸首是 STW 无限制的被延长。</p><p>尽管 STW 如今已经优化到了半毫秒级别以下，但这个程序被卡死原因在于仍然是 STW 导致的。原因在于，GC 在进入 STW 时，需要等待让所有的用户态代码停止，但是 <code>for {}</code> 所在的 goroutine 永远都不会被中断，从而停留在 STW 阶段。实际实践中也是如此，当程序的某个 goroutine 长时间得不到停止，强行拖慢 STW，这种情况下造成的影响（卡死）是非常可怕的。好在自 Go 1.14 之后，这类 goroutine 能够被异步地抢占，从而使得 STW 的时间如同普通程序那样，不会超过半个毫秒，程序也不会因为仅仅等待一个 goroutine 的停止而停顿在 STW 阶段。</p><h3 id="6-如何观察-Go-GC？"><a href="#6-如何观察-Go-GC？" class="headerlink" title="6. 如何观察 Go GC？"></a>6. 如何观察 Go GC？</h3><p>我们以下面的程序为例，先使用四种不同的方式来介绍如何观察 GC，并在后面的问题中通过几个详细的例子再来讨论如何优化 GC。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方式1：GODEBUG-gctrace-1"><a href="#方式1：GODEBUG-gctrace-1" class="headerlink" title="方式1：GODEBUG=gctrace=1"></a>方式1：<code>GODEBUG=gctrace=1</code></h5><p>我们首先可以通过</p><pre><code>$ go build -o main$ GODEBUG=gctrace=1 ./maingc 1 @0.000s 2%: 0.009+0.23+0.004 ms clock, 0.11+0.083/0.019/0.14+0.049 ms cpu, 4-&gt;6-&gt;2 MB, 5 MB goal, 12 Pscvg: 8 KB releasedscvg: inuse: 3, idle: 60, sys: 63, released: 57, consumed: 6 (MB)gc 2 @0.001s 2%: 0.018+1.1+0.029 ms clock, 0.22+0.047/0.074/0.048+0.34 ms cpu, 4-&gt;7-&gt;3 MB, 5 MB goal, 12 Pscvg: inuse: 3, idle: 60, sys: 63, released: 56, consumed: 7 (MB)gc 3 @0.003s 2%: 0.018+0.59+0.011 ms clock, 0.22+0.073/0.008/0.042+0.13 ms cpu, 5-&gt;6-&gt;1 MB, 6 MB goal, 12 Pscvg: 8 KB releasedscvg: inuse: 2, idle: 61, sys: 63, released: 56, consumed: 7 (MB)gc 4 @0.003s 4%: 0.019+0.70+0.054 ms clock, 0.23+0.051/0.047/0.085+0.65 ms cpu, 4-&gt;6-&gt;2 MB, 5 MB goal, 12 Pscvg: 8 KB releasedscvg: inuse: 3, idle: 60, sys: 63, released: 56, consumed: 7 (MB)scvg: 8 KB releasedscvg: inuse: 4, idle: 59, sys: 63, released: 56, consumed: 7 (MB)gc 5 @0.004s 12%: 0.021+0.26+0.49 ms clock, 0.26+0.046/0.037/0.11+5.8 ms cpu, 4-&gt;7-&gt;3 MB, 5 MB goal, 12 Pscvg: inuse: 5, idle: 58, sys: 63, released: 56, consumed: 7 (MB)gc 6 @0.005s 12%: 0.020+0.17+0.004 ms clock, 0.25+0.080/0.070/0.053+0.051 ms cpu, 5-&gt;6-&gt;1 MB, 6 MB goal, 12 Pscvg: 8 KB releasedscvg: inuse: 1, idle: 62, sys: 63, released: 56, consumed: 7 (MB)</code></pre><p>在这个日志中可以观察到两类不同的信息：</p><pre><code>gc 1 @0.000s 2%: 0.009+0.23+0.004 ms clock, 0.11+0.083/0.019/0.14+0.049 ms cpu, 4-&gt;6-&gt;2 MB, 5 MB goal, 12 Pgc 2 @0.001s 2%: 0.018+1.1+0.029 ms clock, 0.22+0.047/0.074/0.048+0.34 ms cpu, 4-&gt;7-&gt;3 MB, 5 MB goal, 12 P...</code></pre><p>以及：</p><pre><code>scvg: 8 KB releasedscvg: inuse: 3, idle: 60, sys: 63, released: 57, consumed: 6 (MB)scvg: inuse: 3, idle: 60, sys: 63, released: 56, consumed: 7 (MB)...</code></pre><p>对于用户代码向运行时申请内存产生的垃圾回收：</p><pre><code>gc 2 @0.001s 2%: 0.018+1.1+0.029 ms clock, 0.22+0.047/0.074/0.048+0.34 ms cpu, 4-&gt;7-&gt;3 MB, 5 MB goal, 12 P</code></pre><p>含义由下表所示：</p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">gc 2</td><td style="text-align:left">第二个 GC 周期</td></tr><tr><td style="text-align:left">0.001</td><td style="text-align:left">程序开始后的 0.001 秒</td></tr><tr><td style="text-align:left">2%</td><td style="text-align:left">该 GC 周期中 CPU 的使用率</td></tr><tr><td style="text-align:left">0.018</td><td style="text-align:left">标记开始时， STW 所花费的时间（wall clock）</td></tr><tr><td style="text-align:left">1.1</td><td style="text-align:left">标记过程中，并发标记所花费的时间（wall clock）</td></tr><tr><td style="text-align:left">0.029</td><td style="text-align:left">标记终止时， STW 所花费的时间（wall clock）</td></tr><tr><td style="text-align:left">0.22</td><td style="text-align:left">标记开始时， STW 所花费的时间（cpu time）</td></tr><tr><td style="text-align:left">0.047</td><td style="text-align:left">标记过程中，标记辅助所花费的时间（cpu time）</td></tr><tr><td style="text-align:left">0.074</td><td style="text-align:left">标记过程中，并发标记所花费的时间（cpu time）</td></tr><tr><td style="text-align:left">0.048</td><td style="text-align:left">标记过程中，GC 空闲的时间（cpu time）</td></tr><tr><td style="text-align:left">0.34</td><td style="text-align:left">标记终止时， STW 所花费的时间（cpu time）</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">标记开始时，堆的大小的实际值</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">标记结束时，堆的大小的实际值</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">标记结束时，标记为存活的对象大小</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">标记结束时，堆的大小的预测值</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">P 的数量</td></tr></tbody></table><blockquote><p>wall clock 是指开始执行到完成所经历的实际时间，包括其他程序和本程序所消耗的时间；<br>cpu time 是指特定程序使用 CPU 的时间；<br>他们存在以下关系：</p><ul><li>wall clock &lt; cpu time: 充分利用多核</li><li>wall clock ≈ cpu time: 未并行执行</li><li>wall clock &gt; cpu time: 多核优势不明显</li></ul></blockquote><p>对于运行时向操作系统申请内存产生的垃圾回收（向操作系统归还多余的内存）：</p><pre><code>scvg: 8 KB releasedscvg: inuse: 3, idle: 60, sys: 63, released: 57, consumed: 6 (MB)</code></pre><p>含义由下表所示：</p><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">8 KB released</td><td style="text-align:left">向操作系统归还了 8 KB 内存</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">已经分配给用户代码、正在使用的总内存大小 (MB)。MB used or partially used spans</td></tr><tr><td style="text-align:left">60</td><td style="text-align:left">空闲以及等待归还给操作系统的总内存大小（MB）。MB spans pending scavenging</td></tr><tr><td style="text-align:left">63</td><td style="text-align:left">通知操作系统中保留的内存大小（MB）MB mapped from the system</td></tr><tr><td style="text-align:left">57</td><td style="text-align:left">已经归还给操作系统的（或者说还未正式申请）的内存大小（MB）。MB released to the system</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">已经从操作系统中申请的内存大小（MB）。MB allocated from the system</td></tr></tbody></table><h5 id="方式2：go-tool-trace"><a href="#方式2：go-tool-trace" class="headerlink" title="方式2：go tool trace"></a>方式2：<code>go tool trace</code></h5><p><code>go tool trace</code> 的主要功能是将统计而来的信息以一种可视化的方式展示给用户。要使用此工具，可以通过调用 trace API：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并通过 </p><pre><code>$ go tool trace trace.out2019/12/30 15:50:33 Parsing trace...2019/12/30 15:50:38 Splitting trace...2019/12/30 15:50:45 Opening browser. Trace viewer is listening on http://127.0.0.1:51839</code></pre><p>命令来启动可视化界面：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-trace.png" alt=""></p><p>选择第一个链接可以获得如下图示：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-trace2.png" alt=""></p><p>右上角的问号可以打开帮助菜单，主要使用方式包括：</p><ul><li>w/s 键可以用于放大或者缩小视图</li><li>a/d 键可以用于左右移动</li></ul><h5 id="方式3：debug-ReadGCStats"><a href="#方式3：debug-ReadGCStats" class="headerlink" title="方式3：debug.ReadGCStats"></a>方式3：<code>debug.ReadGCStats</code></h5><p>此方式可以通过代码的方式来直接实现对感兴趣指标的监控，例如我们希望每隔一秒钟监控一次 GC 的状态：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">printGCStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    s <span class="token operator">:=</span> debug<span class="token punctuation">.</span>GCStats<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">:</span>            debug<span class="token punctuation">.</span><span class="token function">ReadGCStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"gc %d last@%v, PauseTotal %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>NumGC<span class="token punctuation">,</span> s<span class="token punctuation">.</span>LastGC<span class="token punctuation">,</span> s<span class="token punctuation">.</span>PauseTotal<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token function">printGCStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们能够看到如下输出：</p><pre class="line-numbers language-go"><code class="language-go">$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>gc <span class="token number">4954</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">37.505575</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> PauseTotal <span class="token number">29.</span>901171msgc <span class="token number">9195</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">38.50565</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> PauseTotal <span class="token number">77.</span>579622msgc <span class="token number">13502</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">39.505714</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> PauseTotal <span class="token number">128.</span>022307msgc <span class="token number">17555</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">40.505579</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> PauseTotal <span class="token number">182.</span>816528msgc <span class="token number">21838</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">41.505595</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> PauseTotal <span class="token number">246.</span>618502ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方式4：runtime-ReadMemStats"><a href="#方式4：runtime-ReadMemStats" class="headerlink" title="方式4：runtime.ReadMemStats"></a>方式4：<code>runtime.ReadMemStats</code></h5><p>除了使用 debug 包提供的方法外，还可以直接通过运行时的内存相关的 API 进行监控：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">printMemStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    s <span class="token operator">:=</span> runtime<span class="token punctuation">.</span>MemStats<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">:</span>            runtime<span class="token punctuation">.</span><span class="token function">ReadMemStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"gc %d last@%v, next_heap_size@%vMB\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>NumGC<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>LastGC<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>NextGC<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token function">printMemStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go">$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span>gc <span class="token number">4887</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">56</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> next_heap_size@4MBgc <span class="token number">10049</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">57</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> next_heap_size@4MBgc <span class="token number">15231</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">58</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> next_heap_size@4MBgc <span class="token number">20378</span> last@<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">59</span> <span class="token operator">+</span><span class="token number">0100</span> CET<span class="token punctuation">,</span> next_heap_size@6MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，后两种方式能够监控的指标很多，读者可以自行查看 <a href="https://golang.org/pkg/runtime/debug/##GCStats" target="_blank" rel="noopener"><code>debug.GCStats</code></a> 和<br><a href="https://golang.org/pkg/runtime/##MemStats" target="_blank" rel="noopener"><code>runtime.MemStats</code></a> 的字段，这里不再赘述。</p><h3 id="7-有了-GC，为什么还会发生内存泄露？"><a href="#7-有了-GC，为什么还会发生内存泄露？" class="headerlink" title="7. 有了 GC，为什么还会发生内存泄露？"></a>7. 有了 GC，为什么还会发生内存泄露？</h3><p>在一个具有 GC 的语言中，我们常说的内存泄漏，用严谨的话来说应该是：预期的能很快被释放的内存由于附着在了长期存活的内存上、或生命期意外地被延长，导致预计能够立即回收的内存而长时间得不到回收。</p><p>在 Go 中，由于 goroutine 的存在，所谓的内存泄漏除了附着在长期对象上之外，还存在多种不同的形式。</p><h5 id="形式1：预期能被快速释放的内存因被根对象引用而没有得到迅速释放"><a href="#形式1：预期能被快速释放的内存因被根对象引用而没有得到迅速释放" class="headerlink" title="形式1：预期能被快速释放的内存因被根对象引用而没有得到迅速释放"></a>形式1：预期能被快速释放的内存因被根对象引用而没有得到迅速释放</h5><p>当有一个全局对象时，可能不经意间将某个变量附着在其上，且忽略的将其进行释放，则该内存永远不会得到释放。例如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">keepalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="形式2：goroutine-泄漏"><a href="#形式2：goroutine-泄漏" class="headerlink" title="形式2：goroutine 泄漏"></a>形式2：goroutine 泄漏</h5><p>Goroutine 作为一种逻辑上理解的轻量级线程，需要维护执行用户代码的上下文信息。在运行过程中也需要消耗一定的内存来保存这类信息，而这些内存在目前版本的 Go 中是不会被释放的。因此，如果一个程序持续不断地产生新的 goroutine、且不结束已经创建的 goroutine 并复用这部分内存，就会造成内存泄漏的现象，例如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">keepalloc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>我们可以通过如下形式来调用上述两个函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span>    <span class="token string">"runtime/trace"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">keepalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">keepalloc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序：</p><pre class="line-numbers language-shell"><code class="language-shell">go run main.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会看到程序中生成了 <code>trace.out</code> 文件，我们可以使用 <code>go tool trace trace.out</code> 命令得到下图：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-leak1.png" alt=""></p><p>可以看到，途中的 Heap 在持续增长，没有内存被回收，产生了内存泄漏的现象。</p><p>值得一提的是，这种形式的 goroutine 泄漏还可能由 channel 泄漏导致。而 channel 的泄漏本质上与 goroutine 泄漏存在直接联系。Channel 作为一种同步原语，会连接两个不同的 goroutine，如果一个 goroutine 尝试向一个没有接收方的无缓冲 channel 发送消息，则该 goroutine 会被永久的休眠，整个 goroutine 及其执行栈都得不到释放，例如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">keepalloc3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有接收方，goroutine 会一直阻塞</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-并发标记清除法的难点是什么？"><a href="#8-并发标记清除法的难点是什么？" class="headerlink" title="8. 并发标记清除法的难点是什么？"></a>8. 并发标记清除法的难点是什么？</h3><p>在没有用户态代码并发修改<code>三色抽象</code>的情况下，回收可以正常结束。但是并发回收的根本问题在于，用户态代码在回收过程中会并发地更新对象图，从而造成赋值器和回收器可能对对象图的结构产生不同的认知。这时以一个固定的三色波面作为回收过程前进的边界则不再合理。</p><p>我们不妨考虑赋值器写操作的例子：</p><table><thead><tr><th>时序</th><th>回收器</th><th>赋值器</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>shade(A, gray)</td><td></td><td>回收器：根对象的子节点着色为灰色对象</td></tr><tr><td>2</td><td>shade(C, black)</td><td></td><td>回收器：当所有子节点着色为灰色后，将节点着为黑色</td></tr><tr><td>3</td><td></td><td>C.ref3 = C.ref2.ref1</td><td>赋值器：并发的修改了 C 的子节点</td></tr><tr><td>4</td><td></td><td>A.ref1 = nil</td><td>赋值器：并发的修改了 A 的子节点</td></tr><tr><td>5</td><td>shade(A.ref1, gray)</td><td></td><td>回收器：进一步灰色对象的子节点并着色为灰色对象，这时由于 <code>A.ref1</code> 为 <code>nil</code>，什么事情也没有发生</td></tr><tr><td>6</td><td>shade(A, black)</td><td></td><td>回收器：由于所有子节点均已标记，回收器也不会重新扫描已经被标记为黑色的对象，此时 A 被着色为黑色，<code>scan(A)</code> 什么也不会发生，进而 B 在此次回收过程中永远不会被标记为黑色，进而错误地被回收。</td></tr></tbody></table><ul><li>初始状态：假设某个黑色对象 C 指向某个灰色对象 A ，而 A 指向白色对象 B；</li><li><code>C.ref3 = C.ref2.ref1</code>：赋值器并发地将黑色对象 C 指向（ref3）了白色对象 B；</li><li><code>A.ref1 = nil</code>：移除灰色对象 A 对白色对象 B 的引用（ref2）；</li><li>最终状态：在继续扫描的过程中，白色对象 B 永远不会被标记为黑色对象了（回收器不会重新扫描黑色对象），进而对象 B 被错误地回收。</li></ul><p><img src="https://s.gin.sh/blog/golang/gc/gc-mutator.png" alt="gc-mutator"></p><p>总而言之，并发标记清除中面临的一个根本问题就是如何保证标记与清除过程的正确性。</p><h3 id="9-什么是写屏障、混合写屏障，如何实现？"><a href="#9-什么是写屏障、混合写屏障，如何实现？" class="headerlink" title="9. 什么是写屏障、混合写屏障，如何实现？"></a>9. 什么是写屏障、混合写屏障，如何实现？</h3><p>要讲清楚写屏障，就需要理解三色标记清除算法中的<strong>强弱不变性</strong>以及<strong>赋值器的颜色</strong>，理解他们需要一定的抽象思维。写屏障是一个在并发垃圾回收器中才会出现的概念，垃圾回收器的正确性体现在：<strong>不应出现对象的丢失，也不应错误的回收还不需要回收的对象。</strong></p><p>可以证明，当以下两个条件同时满足时会破坏垃圾回收器的正确性：</p><ul><li><strong>条件 1</strong>: 赋值器修改对象图，导致某一黑色对象引用白色对象；</li><li><strong>条件 2</strong>: 从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏。</li></ul><p>只要能够避免其中任何一个条件，则不会出现对象丢失的情况，因为：</p><ul><li>如果条件 1 被避免，则所有白色对象均被灰色对象引用，没有白色对象会被遗漏；</li><li>如果条件 2 被避免，即便白色对象的指针被写入到黑色对象中，但从灰色对象出发，总存在一条没有访问过的路径，从而找到到达白色对象的路径，白色对象最终不会被遗漏。</li></ul><p>我们不妨将三色不变性所定义的波面根据这两个条件进行削弱：</p><ul><li>当满足原有的三色不变性定义（或上面的两个条件都不满足时）的情况称为<strong>强三色不变性（strong tricolor invariant）</strong><!-- 即不存在黑色对象指向白色对象的指针； --></li><li>当赋值器令黑色对象引用白色对象时（满足条件 1 时）的情况称为<strong>弱三色不变性（weak tricolor invariant）</strong><!-- 即所有黑色对象引用的白色对象都处于灰色保护状态（直接或间接从灰色对象可达）。 --></li></ul><p>当赋值器进一步破坏灰色对象到达白色对象的路径时（进一步满足条件 2 时），即打破弱三色不变性，也就破坏了回收器的正确性；或者说，在破坏强弱三色不变性时必须引入额外的辅助操作。弱三色不变形的好处在于：<strong>只要存在未访问的能够到达白色对象的路径，就可以将黑色对象指向白色对象。</strong></p><p>如果我们考虑并发的用户态代码，回收器不允许同时停止所有赋值器，就是涉及了存在的多个不同状态的赋值器。为了对概念加以明确，还需要换一个角度，把回收器视为对象，把赋值器视为影响回收器这一对象的实际行为（即影响 GC 周期的长短），从而引入赋值器的颜色：</p><ul><li>黑色赋值器：已经由回收器扫描过，不会再次对其进行扫描。</li><li>灰色赋值器：尚未被回收器扫描过，或尽管已经扫描过但仍需要重新扫描。</li></ul><p>赋值器的颜色对回收周期的结束产生影响：</p><ul><li>如果某种并发回收器允许灰色赋值器的存在，则必须在回收结束之前重新扫描对象图。</li><li>如果重新扫描过程中发现了新的灰色或白色对象，回收器还需要对新发现的对象进行追踪，但是在新追踪的过程中，赋值器仍然可能在其根中插入新的非黑色的引用，如此往复，直到重新扫描过程中没有发现新的白色或灰色对象。</li></ul><p>于是，在允许灰色赋值器存在的算法，最坏的情况下，回收器只能将所有赋值器线程停止才能完成其跟对象的完整扫描，也就是我们所说的 STW。</p><p>为了确保强弱三色不变性的并发指针更新操作，需要通过赋值器屏障技术来保证指针的读写操作一致。因此我们所说的 Go 中的写屏障、混合写屏障，其实是指赋值器的写屏障，赋值器的写屏障用来保证赋值器在进行指针写操作时，不会破坏弱三色不变性。</p><p>有两种非常经典的写屏障：Dijkstra 插入屏障和 Yuasa 删除屏障。</p><p>灰色赋值器的 Dijkstra 插入屏障的基本思想是避免满足条件 1：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 灰色赋值器 Dijkstra 插入屏障</span><span class="token keyword">func</span> <span class="token function">DijkstraWritePointer</span><span class="token punctuation">(</span>slot <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> ptr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">shade</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>    <span class="token operator">*</span>slot <span class="token operator">=</span> ptr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了防止黑色对象指向白色对象，应该假设 <code>*slot</code> 可能会变为黑色，为了确保 <code>ptr</code> 不会在被赋值到 <code>*slot</code> 前变为白色，<code>shade(ptr)</code> 会先将指针 <code>ptr</code> 标记为灰色，进而避免了条件 1。但是，由于并不清楚赋值器以后会不会将这个引用删除，因此还需要重新扫描来重新确定关系图，这时需要 STW，如图所示：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-wb-dijkstra.png" alt=""></p><p>Dijkstra 插入屏障的好处在于可以立刻开始并发标记，但由于产生了灰色赋值器，缺陷是需要标记终止阶段 STW 时进行重新扫描。</p><p>黑色赋值器的 Yuasa 删除屏障的基本思想是避免满足条件 2：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 黑色赋值器 Yuasa 屏障</span><span class="token keyword">func</span> <span class="token function">YuasaWritePointer</span><span class="token punctuation">(</span>slot <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> ptr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">shade</span><span class="token punctuation">(</span><span class="token operator">*</span>slot<span class="token punctuation">)</span>    <span class="token operator">*</span>slot <span class="token operator">=</span> ptr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了防止丢失从灰色对象到白色对象的路径，应该假设 <code>*slot</code> 可能会变为黑色，为了确保 <code>ptr</code> 不会在被赋值到 <code>*slot</code> 前变为白色，<code>shade(*slot)</code> 会先将 <code>*slot</code> 标记为灰色，进而该写操作总是创造了一条灰色到灰色或者灰色到白色对象的路径，进而避免了条件 2。</p><p>Yuasa 删除屏障的优势则在于不需要标记结束阶段的重新扫描，缺陷是依然会产生丢失的对象，需要在标记开始前对整个对象图进行快照。</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-wb-yuasa.png" alt=""></p><p>Go 在 1.8 的时候为了简化 GC 的流程，同时减少标记终止阶段的重扫成本，将 Dijkstra 插入屏障和 Yuasa 删除屏障进行混合，形成混合写屏障。该屏障提出时的基本思想是：<strong>对正在被覆盖的对象进行着色，且如果当前栈未扫描完成，则同样对指针进行着色。</strong></p><p>但在最终实现时<a href="https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md" target="_blank" rel="noopener">原提案</a>中对 <code>ptr</code> 的着色还额外包含对执行栈的着色检查，但由于时间有限，并未完整实现过，所以混合写屏障在目前的实现伪代码是：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 混合写屏障</span><span class="token keyword">func</span> <span class="token function">HybridWritePointerSimple</span><span class="token punctuation">(</span>slot <span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> ptr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">shade</span><span class="token punctuation">(</span><span class="token operator">*</span>slot<span class="token punctuation">)</span>      <span class="token function">shade</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>    <span class="token operator">*</span>slot <span class="token operator">=</span> ptr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个实现中，如果无条件对引用双方进行着色，自然结合了 Dijkstra 和 Yuasa 写屏障的优势，但缺点也非常明显，因为着色成本是双倍的，而且编译器需要插入的代码也成倍增加，随之带来的结果就是编译后的二进制文件大小也进一步增加。为了针对写屏障的性能进行优化，Go 1.10 前后，Go 团队随后实现了批量写屏障机制。其基本想法是将需要着色的指针同一写入一个缓存，每当缓存满时统一对缓存中的所有 <code>ptr</code> 指针进行着色。</p><h2 id="GC-的实现细节"><a href="#GC-的实现细节" class="headerlink" title="GC 的实现细节"></a>GC 的实现细节</h2><h3 id="10-Go-语言中-GC-的流程是什么？"><a href="#10-Go-语言中-GC-的流程是什么？" class="headerlink" title="10. Go 语言中 GC 的流程是什么？"></a>10. Go 语言中 GC 的流程是什么？</h3><p>当前版本的 Go 以 STW 为界限，可以将 GC 划分为五个阶段：</p><table><thead><tr><th style="text-align:center">阶段</th><th style="text-align:center">说明</th><th style="text-align:center">赋值器状态</th></tr></thead><tbody><tr><td style="text-align:center">GCMark</td><td style="text-align:center">标记准备阶段，为并发标记做准备工作，启动写屏障</td><td style="text-align:center">STW</td></tr><tr><td style="text-align:center">GCMark</td><td style="text-align:center">扫描标记阶段，与赋值器并发执行，写屏障开启</td><td style="text-align:center">并发</td></tr><tr><td style="text-align:center">GCMarkTermination</td><td style="text-align:center">标记终止阶段，保证一个周期内标记任务完成，停止写屏障</td><td style="text-align:center">STW</td></tr><tr><td style="text-align:center">GCoff</td><td style="text-align:center">内存清扫阶段，将需要回收的内存归还到堆中，写屏障关闭</td><td style="text-align:center">并发</td></tr><tr><td style="text-align:center">GCoff</td><td style="text-align:center">内存归还阶段，将过多的内存归还给操作系统，写屏障关闭</td><td style="text-align:center">并发</td></tr></tbody></table><p>具体而言，各个阶段的触发函数分别为：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-process.png" alt="gc-process"></p><h3 id="11-触发-GC-的时机是什么？"><a href="#11-触发-GC-的时机是什么？" class="headerlink" title="11. 触发 GC 的时机是什么？"></a>11. 触发 GC 的时机是什么？</h3><p>Go 语言中对 GC 的触发时机存在两种形式：  </p><ol><li><p><strong>主动触发</strong>，通过调用 runtime.GC 来触发 GC，此调用阻塞式地等待当前 GC 运行完毕。</p></li><li><p><strong>被动触发</strong>，分为两种方式：</p><ul><li><p>使用系统监控，当超过两分钟没有产生任何 GC 时，强制触发 GC。</p></li><li><p>使用步调（Pacing）算法，其核心思想是控制内存增长的比例。</p></li></ul></li></ol><p>通过 <code>GOGC</code> 或者 <code>debug.SetGCPercent</code> 进行控制（他们控制的是同一个变量，即堆的增长率 $\rho$）。整个算法的设计考虑的是优化问题：如果设上一次 GC 完成时，内存的数量为 $H_m$（heap marked），估计需要触发 GC 时的堆大小 $H_T$（heap trigger），使得完成 GC 时候的目标堆大小 $H_g$（heap goal） 与实际完成时候的堆大小 $H_a$（heap actual）最为接近，即： $\min |H_g - H_a| = \min|(1+\rho)H_m - H_a|$。</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-pacing.png" alt="gc-pacing"></p><p>除此之外，步调算法还需要考虑 CPU 利用率的问题，显然我们不应该让垃圾回收器占用过多的 CPU，即不应该让每个负责执行用户 goroutine 的线程都在执行标记过程。理想情况下，在用户代码满载的时候，GC 的 CPU 使用率不应该超过 25%，即另一个优化问题：如果设 $u_g$为目标 CPU 使用率（goal utilization），而 $u_a$为实际 CPU 使用率（actual utilization），则 $\min|u_g - u_a|$。</p><blockquote><p>求解这两个优化问题的具体数学建模过程我们不在此做深入讨论，有兴趣的读者可以参考两个设计文档：<a href="https://docs.google.com/document/d/1wmjrocXIWTr1JxU-3EQBI6BK6KgtiFArkG47XK73xIQ/edit##" target="_blank" rel="noopener">Go 1.5 concurrent garbage collector pacing</a> 和 <a href="https://github.com/golang/proposal/blob/master/design/14951-soft-heap-limit.md" target="_blank" rel="noopener">Separate soft and hard heap size goal</a>。</p></blockquote><p>计算 $H_T$ 的最终结论（从 Go 1.10 时开始 $h_t$ 增加了上界 $0.95 \rho$，从 Go 1.14 开始时 $h_t$ 增加了下界 0.6）是：</p><ul><li>设第 n 次触发 GC 时 (n &gt; 1)，估计得到的堆增长率为 $h_t^{(n)}$、运行过程中的实际堆增长率为 $h_a^{(n)}$，用户设置的增长率为 $\rho = \text{GOGC}/100$（ $\rho &gt; 0$）则第 $n+1$ 次出触发 GC 时候，估计的堆增长率为：</li></ul><p>$$<br>h_t^{(n+1)} = h_t^{(n)} + 0.5 \left[ \frac{H_g^{(n)} - H_a^{(n)}}{H_a^{(n)}} - h_t^{(n)} - \frac{u_a^{(n)}}{u_g^{(n)}} \left( h_a^{(n)} - h_t^{(n)} \right) \right]<br>$$</p><ul><li><p>特别的，$h_t^{(1)} = 7 / 8$，$u_a^{(1)} = 0.25$，$u_g^{(1)} = 0.3$。第一次触发 GC 时，如果当前的堆小于 $4\rho$ MB，则强制调整到 $4\rho$ MB 时触发 GC</p></li><li><p>特别的，当 $h_t^{(n)}&lt;0.6$时，将其调整为 $0.6$，当 $h_t^{(n)} &gt; 0.95 \rho$ 时，将其设置为 $0.95 \rho$</p></li><li><p>默认情况下，$\rho = 1$（即 GOGC = 100），第一次触发 GC 时强制设置触发第一次 GC 为 4MB，可以写如下程序进行验证：</p></li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span>    <span class="token string">"runtime"</span>    <span class="token string">"runtime/trace"</span>    <span class="token string">"sync/atomic"</span><span class="token punctuation">)</span><span class="token keyword">var</span> stop <span class="token builtin">uint64</span><span class="token comment" spellcheck="true">// 通过对象 P 的释放状态，来确定 GC 是否已经完成</span><span class="token keyword">func</span> <span class="token function">gcfinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    p <span class="token operator">:=</span> <span class="token number">1</span>    runtime<span class="token punctuation">.</span><span class="token function">SetFinalizer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gc finished"</span><span class="token punctuation">)</span>        atomic<span class="token punctuation">.</span><span class="token function">StoreUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通知停止分配</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>p<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每次调用分配 0.25MB</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">gcfinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 当完成 GC 时停止分配</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stop<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##allocate: "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"terminate"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们先来验证最简单的一种情况，即第一次触发 GC 时的堆大小：</p><pre><code>$ go build -o main$ GODEBUG=gctrace=1 ./main##allocate:  1(...)##allocate:  20gc finishedgc 1 @0.001s 3%: 0.016+0.23+0.019 ms clock, 0.20+0.11/0.060/0.13+0.22 ms cpu, 4-&gt;5-&gt;1 MB, 5 MB goal, 12 Pscvg: 8 KB releasedscvg: inuse: 1, idle: 62, sys: 63, released: 58, consumed: 5 (MB)terminate</code></pre><p>通过这一行数据我们可以看到：</p><pre><code>gc 1 @0.001s 3%: 0.016+0.23+0.019 ms clock, 0.20+0.11/0.060/0.13+0.22 ms cpu, 4-&gt;5-&gt;1 MB, 5 MB goal, 12 P</code></pre><ol><li>程序在完成第一次 GC 后便终止了程序，符合我们的设想</li><li>第一次 GC 开始时的堆大小为 4MB，符合我们的设想</li><li>当标记终止时，堆大小为 5MB，此后开始执行清扫，这时分配执行到第 20 次，即 20*0.25 = 5MB，符合我们的设想</li></ol><p>我们将分配次数调整到 50 次</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##allocate: "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>来验证第二次 GC 触发时是否满足公式所计算得到的值（为 GODEBUG 进一步设置 <code>gcpacertrace=1</code>）：</p><pre><code>$ go build -o main$ GODEBUG=gctrace=1,gcpacertrace=1 ./main##allocate:  1(...)pacer: H_m_prev=2236962 h_t=+8.750000e-001 H_T=4194304 h_a=+2.387451e+000 H_a=7577600 h_g=+1.442627e+000 H_g=5464064 u_a=+2.652227e-001 u_g=+3.000000e-001 W_a=152832 goalΔ=+5.676271e-001 actualΔ=+1.512451e+000 u_a/u_g=+8.840755e-001##allocate:  28gc 1 @0.001s 5%: 0.032+0.32+0.055 ms clock, 0.38+0.068/0.053/0.11+0.67 ms cpu, 4-&gt;7-&gt;3 MB, 5 MB goal, 12 P(...)##allocate:  37pacer: H_m_prev=3307736 h_t=+6.000000e-001 H_T=5292377 h_a=+7.949171e-001 H_a=5937112 h_g=+1.000000e+000 H_g=6615472 u_a=+2.658428e-001 u_g=+3.000000e-001 W_a=154240 goalΔ=+4.000000e-001 actualΔ=+1.949171e-001 u_a/u_g=+8.861428e-001##allocate:  38gc 2 @0.002s 9%: 0.017+0.26+0.16 ms clock, 0.20+0.079/0.058/0.12+1.9 ms cpu, 5-&gt;5-&gt;0 MB, 6 MB goal, 12 P</code></pre><p>我们可以得到数据：</p><ul><li>第一次估计得到的堆增长率为 $h_t^{(1)} = 0.875$</li><li>第一次的运行过程中的实际堆增长率为 $h_a^{(1)} = 0.2387451$</li><li>第一次实际的堆大小为 $H_a^{(1)}=7577600$</li><li>第一次目标的堆大小为 $H_g^{(1)}=5464064$</li><li>第一次的 CPU 实际使用率为 $u_a^{(1)} = 0.2652227$</li><li>第一次的 CPU 目标使用率为 $u_g^{(1)} = 0.3$</li></ul><p>我们据此计算第二次估计的堆增长率：</p><p>$$<br>\begin{align}<br>h_t^{(2)} &amp;= h_t^{(1)} + 0.5 \left[ \frac{H_g^{(1)} - H_a^{(1)}}{H_a^{(1)}} - h_t^{(1)} - \frac{u_a^{(1)}}{u_g^{(1)}} \left( h_a^{(1)} - h_t^{(1)} \right) \right] \<br>&amp;= 0.875 + 0.5 \left[ \frac{5464064 - 7577600}{5464064} - 0.875 - \frac{0.2652227}{0.3} \left( 0.2387451 - 0.875 \right) \right] \<br>&amp; \approx 0.52534543909 \<br>\end{align}<br>$$</p><p>因为 $0.52534543909 &lt; 0.6\rho = 0.6$，因此下一次的触发率为 $h_t^{2} = 0.6$，与我们实际观察到的第二次 GC 的触发率 0.6 吻合。</p><h3 id="12-如果内存分配速度超过了标记清除的速度怎么办？"><a href="#12-如果内存分配速度超过了标记清除的速度怎么办？" class="headerlink" title="12. 如果内存分配速度超过了标记清除的速度怎么办？"></a>12. 如果内存分配速度超过了标记清除的速度怎么办？</h3><p>目前的 Go 实现中，当 GC 触发后，会首先进入并发标记的阶段。并发标记会设置一个标志，并在 mallocgc 调用时进行检查。当存在新的内存分配时，会暂停分配内存过快的那些 goroutine，并将其转去执行一些辅助标记（Mark Assist）的工作，从而达到放缓继续分配、辅助 GC 的标记工作的目的。</p><p>编译器会分析用户代码，并在需要分配内存的位置，将申请内存的操作翻译为 <code>mallocgc</code> 调用，而 <code>mallocgc</code> 的实现决定了标记辅助的实现，其伪代码思路如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">mallocgc</span><span class="token punctuation">(</span>t typ<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> size <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> enableMarkAssist <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 进行标记辅助，此时用户代码没有得到执行</span>        <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行内存分配</span>    <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GC-的优化问题"><a href="#GC-的优化问题" class="headerlink" title="GC 的优化问题"></a>GC 的优化问题</h2><h3 id="13-GC-关注的指标有哪些？"><a href="#13-GC-关注的指标有哪些？" class="headerlink" title="13. GC 关注的指标有哪些？"></a>13. GC 关注的指标有哪些？</h3><p>Go 的 GC 被设计为成比例触发、大部分工作与赋值器并发、不分代、无内存移动且会主动向操作系统归还申请的内存。因此最主要关注的、能够影响赋值器的性能指标有：</p><ul><li>CPU 利用率：回收算法会在多大程度上拖慢程序？有时候，这个是通过回收占用的 CPU 时间与其它 CPU 时间的百分比来描述的。</li><li>GC 停顿时间：回收器会造成多长时间的停顿？目前的 GC 中需要考虑 STW 和 Mark Assist 两个部分可能造成的停顿。</li><li>GC 停顿频率：回收器造成的停顿频率是怎样的？目前的 GC 中需要考虑 STW 和 Mark Assist 两个部分可能造成的停顿。</li><li>GC 可扩展性：当堆内存变大时，垃圾回收器的性能如何？但大部分的程序可能并不一定关心这个问题。</li></ul><h3 id="14-Go-的-GC-如何调优？"><a href="#14-Go-的-GC-如何调优？" class="headerlink" title="14. Go 的 GC 如何调优？"></a>14. Go 的 GC 如何调优？</h3><p>Go 的 GC 被设计为极致简洁，与较为成熟的 Java GC 的数十个可控参数相比，严格意义上来讲，Go 可供用户调整的参数只有 GOGC 环境变量。当我们谈论 GC 调优时，通常是指减少用户代码对 GC 产生的压力，这一方面包含了减少用户代码分配内存的数量（即对程序的代码行为进行调优），另一方面包含了最小化 Go 的 GC 对 CPU 的使用率（即调整 GOGC）。</p><p>GC 的调优是在特定场景下产生的，并非所有程序都需要针对 GC 进行调优。只有那些对执行延迟非常敏感、<br>当 GC 的开销成为程序性能瓶颈的程序，才需要针对 GC 进行性能调优，几乎不存在于实际开发中 99% 的情况。<br>除此之外，Go 的 GC 也仍然有一定的可改进的空间，也有部分 GC 造成的问题，目前仍属于 Open Problem。</p><p>总的来说，我们可以在现在的开发中处理的有以下几种情况：</p><ol><li>对停顿敏感：GC 过程中产生的长时间停顿、或由于需要执行 GC 而没有执行用户代码，导致需要立即执行的用户代码执行滞后。</li><li>对资源消耗敏感：对于频繁分配内存的应用而言，频繁分配内存增加 GC 的工作量，原本可以充分利用 CPU 的应用不得不频繁地执行垃圾回收，影响用户代码对 CPU 的利用率，进而影响用户代码的执行效率。</li></ol><p>从这两点来看，所谓 GC 调优的核心思想也就是充分的围绕上面的两点来展开：优化内存的申请速度，尽可能的少申请内存，复用已申请的内存。或者简单来说，不外乎这三个关键字：<strong>控制、减少、复用</strong>。</p><p>我们将通过三个实际例子介绍如何定位 GC 的存在的问题，并一步一步进行性能调优。当然，在实际情况中问题远比这些例子要复杂，这里也只是讨论调优的核心思想，更多的时候也只能具体问题具体分析。</p><h4 id="例1：合理化内存分配的速度、提高赋值器的-CPU-利用率"><a href="#例1：合理化内存分配的速度、提高赋值器的-CPU-利用率" class="headerlink" title="例1：合理化内存分配的速度、提高赋值器的 CPU 利用率"></a>例1：合理化内存分配的速度、提高赋值器的 CPU 利用率</h4><p>我们来看这样一个例子。在这个例子中，<code>concat</code> 函数负责拼接一些长度不确定的字符串。并且为了快速完成任务，出于某种原因，在两个嵌套的 for 循环中一口气创建了 800 个 goroutine。在 main 函数中，启动了一个 goroutine 并在程序结束前不断的触发 GC，并尝试输出 GC 的平均执行时间：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"runtime"</span>    <span class="token string">"runtime/trace"</span>    <span class="token string">"sync/atomic"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    stop  <span class="token builtin">int32</span>    count <span class="token builtin">int64</span>    sum   time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s <span class="token operator">:=</span> <span class="token string">"Go GC"</span>                s <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"Hello"</span>                s <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"World"</span>                <span class="token boolean">_</span> <span class="token operator">=</span> s            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> t time<span class="token punctuation">.</span>Time        <span class="token keyword">for</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stop<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            sum <span class="token operator">+=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>            count<span class="token operator">++</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"GC spend avg: %v\n"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">/</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    atomic<span class="token punctuation">.</span><span class="token function">StoreInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个程序的执行结果是：</p><pre class="line-numbers language-bash"><code class="language-bash">$ go build -o main$ ./mainGC spend avg: 2.583421ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>GC 平均执行一次需要长达 2ms 的时间，我们再进一步观察 trace 的结果：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex1-1.png" alt=""></p><p>程序的整个执行过程中仅执行了一次 GC，而且仅 Sweep STW 就耗费了超过 1 ms，非常反常。甚至查看赋值器 mutator 的 CPU 利用率，在整个 trace 尺度下连 40% 都不到：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex1-2.png" alt=""></p><p>主要原因是什么呢？我们不妨查看 goroutine 的分析：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex1-3.png" alt=""></p><p>在这个榜单中我们不难发现，goroutine 的执行时间占其生命周期总时间非常短的一部分，但大部分时间都花费在调度器的等待上了（蓝色的部分），说明同时创建大量 goroutine 对调度器产生的压力确实不小，我们不妨将这一产生速率减慢，一批一批地创建 goroutine：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s <span class="token operator">:=</span> <span class="token string">"Go GC"</span>                s <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"Hello"</span>                s <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"World"</span>                <span class="token boolean">_</span> <span class="token operator">=</span> s                wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候我们再来看：</p><pre class="line-numbers language-bash"><code class="language-bash">$ go build -o main$ ./mainGC spend avg: 328.54µs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>GC 的平均时间就降到 300 微秒了。这时的赋值器 CPU 使用率也提高到了 60%，相对来说就很可观了：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex1-4.png" alt=""></p><p>当然，这个程序仍然有优化空间，例如我们其实没有必要等待很多 goroutine 同时执行完毕才去执行下一组 goroutine。而可以当一个 goroutine 执行完毕时，直接启动一个新的 goroutine，也就是 goroutine 池的使用。<br>有兴趣的读者可以沿着这个思路进一步优化这个程序中赋值器对 CPU 的使用率。</p><h4 id="例2：降低并复用已经申请的内存"><a href="#例2：降低并复用已经申请的内存" class="headerlink" title="例2：降低并复用已经申请的内存"></a>例2：降低并复用已经申请的内存</h4><p>我们通过一个非常简单的 Web 程序来说明复用内存的重要性。在这个程序中，每当产生一个 <code>/example2</code><br>的请求时，都会创建一段内存，并用于进行一些后续的工作。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net/http"</span>    <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">newBuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:6060"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/example2"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">:=</span> <span class="token function">newBuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 模拟执行一些工作</span>        <span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"done, %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了进行性能分析，我们还额外创建了一个监听 6060 端口的 goroutine，用于使用 pprof 进行分析。<br>我们先让服务器跑起来：</p><pre class="line-numbers language-bash"><code class="language-bash">$ go build -o main$ ./main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们这次使用 pprof 的 trace 来查看 GC 在此服务器中面对大量请求时候的状态，要使用 trace 可以通过访问 <code>/debug/pprof/trace</code> 路由来进行，其中 <code>seconds</code> 参数设置为 20s，并将 trace 的结果保存为 <code>trace.out</code>:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">wget</span> http://127.0.0.1:6060/debug/pprof/trace\?seconds\<span class="token operator">=</span>20 -O trace.out--2020-01-01 22:13:34--  http://127.0.0.1:6060/debug/pprof/trace?seconds<span class="token operator">=</span>20Connecting to 127.0.0.1:6060<span class="token punctuation">..</span>. connected.HTTP request sent, awaiting response<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时候我们使用一个压测工具 <code>ab</code>，来同时产生 500 个请求<br>（<code>-n</code> 一共 500 个请求，<code>-c</code> 一个时刻执行请求的数量，每次 100 个并发请求）：</p><pre class="line-numbers language-bash"><code class="language-bash">$ ab -n 500 -c 100 http://127.0.0.1:8080/example2This is ApacheBench, Version 2.3 <span class="token operator">&lt;</span><span class="token variable">$Revision</span><span class="token keyword">:</span> 1843412 $<span class="token operator">></span>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 127.0.0.1 <span class="token punctuation">(</span>be patient<span class="token punctuation">)</span>Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsFinished 500 requestsServer Software:        Server Hostname:        127.0.0.1Server Port:            8080Document Path:          /example2Document Length:        14 bytesConcurrency Level:      100Time taken <span class="token keyword">for</span> tests:   0.987 secondsComplete requests:      500Failed requests:        0Total transferred:      65500 bytesHTML transferred:       7000 bytesRequests per second:    506.63 <span class="token punctuation">[</span><span class="token comment" spellcheck="true">##/sec] (mean)</span>Time per request:       197.382 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>Time per request:       1.974 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>Transfer rate:          64.81 <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> receivedConnection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   maxConnect:        0    1   1.1      0       7Processing:    13  179  77.5    170     456Waiting:       10  168  78.8    162     455Total:         14  180  77.3    171     458Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>  50%    171  66%    203  75%    222  80%    239  90%    281  95%    335  98%    365  99%    400 100%    458 <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex2-1.png" alt=""></p><p>GC 反复被触发，一个显而易见的原因就是内存分配过多。我们可以通过 <code>go tool pprof</code> 来查看究竟是谁分配了大量内存（使用 web 指令来使用浏览器打开统计信息的可视化图形）：</p><pre class="line-numbers language-bash"><code class="language-bash">$ go tool pprof http://127.0.0.1:6060/debug/pprof/heapFetching profile over HTTP from http://localhost:6060/debug/pprof/heapSaved profile <span class="token keyword">in</span> /Users/changkun/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.003.pb.gzType: inuse_spaceTime: Jan 1, 2020 at 11:15pm <span class="token punctuation">(</span>CET<span class="token punctuation">)</span>Entering interactive mode <span class="token punctuation">(</span>type <span class="token string">"help"</span> <span class="token keyword">for</span> commands, <span class="token string">"o"</span> <span class="token keyword">for</span> options<span class="token punctuation">)</span><span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> web<span class="token punctuation">(</span>pprof<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex2-2.png" alt=""></p><p>可见 <code>newBuf</code> 产生的申请的内存过多，现在我们使用 sync.Pool 来复用 <code>newBuf</code> 所产生的对象：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net/http"</span>    <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用 sync.Pool 复用需要的 buf</span><span class="token keyword">var</span> bufPool <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>    New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:6060"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/example2"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">:=</span> bufPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"done, %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        bufPool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 ab 输出的统计结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">$ ab -n 500 -c 100 http://127.0.0.1:8080/example2This is ApacheBench, Version 2.3 <span class="token operator">&lt;</span><span class="token variable">$Revision</span><span class="token keyword">:</span> 1843412 $<span class="token operator">></span>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 127.0.0.1 <span class="token punctuation">(</span>be patient<span class="token punctuation">)</span>Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsFinished 500 requestsServer Software:        Server Hostname:        127.0.0.1Server Port:            8080Document Path:          /example2Document Length:        14 bytesConcurrency Level:      100Time taken <span class="token keyword">for</span> tests:   0.427 secondsComplete requests:      500Failed requests:        0Total transferred:      65500 bytesHTML transferred:       7000 bytesRequests per second:    1171.32 <span class="token punctuation">[</span><span class="token comment" spellcheck="true">##/sec] (mean)</span>Time per request:       85.374 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>Time per request:       0.854 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>Transfer rate:          149.85 <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> receivedConnection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   maxConnect:        0    1   1.4      1       9Processing:     5   75  48.2     66     211Waiting:        5   72  46.8     63     207Total:          5   77  48.2     67     211Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>  50%     67  66%     89  75%    107  80%    122  90%    148  95%    167  98%    196  99%    204 100%    211 <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但从 <code>Requests per second</code> 每秒请求数来看，从原来的 506.63 变为 1171.32 得到了近乎一倍的提升。从 trace 的结果来看，GC 也没有频繁的被触发从而长期消耗 CPU 使用率：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex2-3.png" alt=""></p><p>sync.Pool 是内存复用的一个最为显著的例子，从语言层面上还有很多类似的例子，例如在例 1 中，<code>concat</code> 函数可以预先分配一定长度的缓存，而后再通过 append 的方式将字符串存储到缓存中：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"Go GC"</span><span class="token operator">...</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token operator">...</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token operator">...</span><span class="token punctuation">)</span>                <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因在于 <code>+</code> 运算符会随着字符串长度的增加而申请更多的内存，并将内容从原来的内存位置拷贝到新的内存位置，造成大量不必要的内存分配，先提前分配好足够的内存，再慢慢地填充，也是一种减少内存分配、复用内存形式的一种表现。</p><h4 id="例3：调整-GOGC"><a href="#例3：调整-GOGC" class="headerlink" title="例3：调整 GOGC"></a>例3：调整 GOGC</h4><p>我们已经知道了 GC 的触发原则是由步调算法来控制的，其关键在于估计下一次需要触发 GC 时，堆的大小。可想而知，如果我们在遇到海量请求的时，为了避免 GC 频繁触发，是否可以通过将 GOGC 的值设置得更大，让 GC 触发的时间变得更晚，从而减少其触发频率，进而增加用户代码对机器的使用率呢？答案是肯定的。</p><p>我们可以非常简单粗暴的将 GOGC 调整为 1000，来执行上一个例子中未复用对象之前的程序：</p><pre class="line-numbers language-bash"><code class="language-bash">$ GOGC<span class="token operator">=</span>1000 ./main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时我们再重新执行压测：</p><pre class="line-numbers language-bash"><code class="language-bash">$ ab -n 500 -c 100 http://127.0.0.1:8080/example2This is ApacheBench, Version 2.3 <span class="token operator">&lt;</span><span class="token variable">$Revision</span><span class="token keyword">:</span> 1843412 $<span class="token operator">></span>Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/Licensed to The Apache Software Foundation, http://www.apache.org/Benchmarking 127.0.0.1 <span class="token punctuation">(</span>be patient<span class="token punctuation">)</span>Completed 100 requestsCompleted 200 requestsCompleted 300 requestsCompleted 400 requestsCompleted 500 requestsFinished 500 requestsServer Software:        Server Hostname:        127.0.0.1Server Port:            8080Document Path:          /example2Document Length:        14 bytesConcurrency Level:      100Time taken <span class="token keyword">for</span> tests:   0.923 secondsComplete requests:      500Failed requests:        0Total transferred:      65500 bytesHTML transferred:       7000 bytesRequests per second:    541.61 <span class="token punctuation">[</span><span class="token comment" spellcheck="true">##/sec] (mean)</span>Time per request:       184.636 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>Time per request:       1.846 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>Transfer rate:          69.29 <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> receivedConnection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   maxConnect:        0    1   1.8      0      20Processing:     9  171 210.4     66     859Waiting:        5  158 199.6     62     813Total:          9  173 210.6     68     860Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>  50%     68  66%    133  75%    198  80%    292  90%    566  95%    696  98%    723  99%    743 100%    860 <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，压测的结果得到了一定幅度的改善（<code>Requests per second</code> 从原来的 506.63 提高为了 541.61），<br>并且 GC 的执行频率明显降低：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-tuning-ex3.png" alt=""></p><p>在实际实践中可表现为需要紧急处理一些由 GC 带来的瓶颈时，人为将 GOGC 调大，加钱加内存，扛过这一段峰值流量时期。</p><p>当然，这种做法其实是治标不治本，并没有从根本上解决内存分配过于频繁的问题，极端情况下，反而会由于 GOGC 太大而导致回收不及时而耗费更多的时间来清理产生的垃圾，这对时间不算敏感的应用还好，但对实时性要求较高的程序来说就是致命的打击了。</p><p>因此这时更妥当的做法仍然是，定位问题的所在，并从代码层面上进行优化。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过上面的三个例子我们可以看到在 GC 调优过程中 <code>go tool pprof</code> 和 <code>go tool trace</code> 的强大作用是帮助我们快速定位 GC 导致瓶颈的具体位置，但这些例子中仅仅覆盖了其功能的很小一部分，我们也没有必要完整覆盖所有的功能，因为总是可以通过<a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener">http pprof 官方文档</a>、<a href="https://golang.org/pkg/runtime/pprof/" target="_blank" rel="noopener">runtime pprof官方文档</a>以及<a href="https://golang.org/pkg/runtime/trace/" target="_blank" rel="noopener">trace 官方文档</a>来举一反三。</p><p>现在我们来总结一下前面三个例子中的优化情况：</p><ol><li>控制内存分配的速度，限制 goroutine 的数量，从而提高赋值器对 CPU 的利用率。</li><li>减少并复用内存，例如使用 sync.Pool 来复用需要频繁创建临时对象，例如提前分配足够的内存来降低多余的拷贝。</li><li>需要时，增大 GOGC 的值，降低 GC 的运行频率。</li></ol><p>这三种情况几乎涵盖了 GC 调优中的核心思路，虽然从语言上还有很多小技巧可说，但我们并不会在这里事无巨细的进行总结。实际情况也是千变万化，我们更应该着重于培养具体问题具体分析的能力。</p><p>当然，我们还应该谨记 <strong>过早优化是万恶之源</strong>这一警语，在没有遇到应用的真正瓶颈时，将宝贵的时间分配在开发中其他优先级更高的任务上。</p><h3 id="15-Go-的垃圾回收器有哪些相关的-API？其作用分别是什么？"><a href="#15-Go-的垃圾回收器有哪些相关的-API？其作用分别是什么？" class="headerlink" title="15. Go 的垃圾回收器有哪些相关的 API？其作用分别是什么？"></a>15. Go 的垃圾回收器有哪些相关的 API？其作用分别是什么？</h3><p>在 Go 中存在数量极少的与 GC 相关的 API，它们是</p><ul><li>runtime.GC：手动触发 GC</li><li>runtime.ReadMemStats：读取内存相关的统计信息，其中包含部分 GC 相关的统计信息</li><li>debug.FreeOSMemory：手动将内存归还给操作系统</li><li>debug.ReadGCStats：读取关于 GC 的相关统计信息</li><li>debug.SetGCPercent：设置 GOGC 调步变量</li><li>debug.SetMaxHeap（尚未发布）：设置 Go 程序堆的上限值<!-- - https://github.com/golang/go/issues/23044 --></li></ul><h2 id="GC-的历史及演进"><a href="#GC-的历史及演进" class="headerlink" title="GC 的历史及演进"></a>GC 的历史及演进</h2><h3 id="16-Go-历史各个版本在-GC-方面的改进？"><a href="#16-Go-历史各个版本在-GC-方面的改进？" class="headerlink" title="16. Go 历史各个版本在 GC 方面的改进？"></a>16. Go 历史各个版本在 GC 方面的改进？</h3><ul><li><p>Go 1：串行三色标记清扫</p></li><li><p>Go 1.3：并行清扫，标记过程需要 STW，停顿时间在约几百毫秒</p></li><li><p>Go 1.5：并发标记清扫，停顿时间在一百毫秒以内</p></li><li><p>Go 1.6：使用 bitmap 来记录回收内存的位置，大幅优化垃圾回收器自身消耗的内存，停顿时间在十毫秒以内</p></li><li><p>Go 1.7：停顿时间控制在两毫秒以内</p></li><li><p>Go 1.8：混合写屏障，停顿时间在半个毫秒左右</p></li><li><p>Go 1.9：彻底移除了栈的重扫描过程 </p></li><li><p>Go 1.12：整合了两个阶段的 Mark Termination，但引入了一个严重的 GC Bug 至今未修（见问题 20），尚无该 Bug 对 GC 性能影响的报告</p></li><li><p>Go 1.13：着手解决向操作系统归还内存的，提出了新的 Scavenger</p></li><li><p>Go 1.14：替代了仅存活了一个版本的 scavenger，全新的页分配器，优化分配内存过程的速率与现有的扩展性问题，并引入了异步抢占，解决了由于密集循环导致的 STW 时间过长的问题</p></li></ul><p>可以用下图直观地说明 GC 的演进历史：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc1.png" alt=""></p><p>在 Go 1 刚发布时的版本中，甚至没有将 Mark-Sweep 的过程并行化，当需要进行垃圾回收时，所有的代码都必须进入 STW 的状态。而到了 Go 1.1 时，官方迅速地将清扫过程进行了并行化的处理，即仅在标记阶段进入 STW。</p><p>这一想法很自然，因为并行化导致算法结果不一致的情况仅仅发生在标记阶段，而当时的垃圾回收器没有针对并行结果的一致性进行任何优化，因此才需要在标记阶段进入 STW。对于 Scavenger 而言，早期的版本中会有一个单独的线程来定期将多余的内存归还给操作系统。</p><p><img src="https://s.gin.sh/blog/golang/gc/gc2.png" alt=""></p><p>而到了 Go 1.5 后，Go 团队花费了相当大的力气，通过引入写屏障的机制来保证算法的一致性，才得以将整个 GC 控制在很小的 STW 内，而到了 1.8 时，由于新的混合屏障的出现，消除了对栈本身的重新扫描，STW 的时间进一步缩减。</p><p>从这个时候开始，Scavenger 已经从独立线程中移除，并合并至系统监控这个独立的线程中，并周期性地向操作系统归还内存，但仍然会有内存溢出这种比较极端的情况出现，因为程序可能在短时间内应对突发性的内存申请需求时，内存还没来得及归还操作系统，导致堆不断向操作系统申请内存，从而出现内存溢出。</p><p><img src="https://s.gin.sh/blog/golang/gc/gc3.png" alt=""></p><p>到了 Go 1.13，定期归还操作系统的问题得以解决，Go 团队开始将周期性的 Scavenger 转化为可被调度的 goroutine，并将其与用户代码并发执行。而到了 Go 1.14，这一向操作系统归还内存的操作时间进一步得到缩减。</p><h3 id="17-Go-GC-在演化过程中还存在哪些其他设计？为什么没有被采用？"><a href="#17-Go-GC-在演化过程中还存在哪些其他设计？为什么没有被采用？" class="headerlink" title="17. Go GC 在演化过程中还存在哪些其他设计？为什么没有被采用？"></a>17. Go GC 在演化过程中还存在哪些其他设计？为什么没有被采用？</h3><h4 id="并发栈重扫"><a href="#并发栈重扫" class="headerlink" title="并发栈重扫"></a>并发栈重扫</h4><p>正如我们前面所说，允许灰色赋值器存在的垃圾回收器需要引入重扫过程来保证算法的正确性，除了引入混合屏障来消除重扫这一过程外，有另一种做法可以提高重扫过程的性能，那就是将重扫的过程并发执行。然而这一<a href="https://github.com/golang/proposal/blob/master/design/17505-concurrent-rescan.md" target="_blank" rel="noopener">方案</a>并没有得以实现，原因很简单：实现过程相比引入混合屏障而言十分复杂，而且引入混合屏障能够消除重扫这一过程，将简化垃圾回收的步骤。</p><h4 id="ROC"><a href="#ROC" class="headerlink" title="ROC"></a>ROC</h4><p>ROC 的全称是<a href="https://docs.google.com/document/d/1gCsFxXamW8RRvOe5hECz98Ftk-tcRRJcDFANj2VwCB0/edit" target="_blank" rel="noopener">面向请求的回收器</a>（Request Oriented Collector），它其实也是分代 GC 的一种重新叙述。它提出了一个请求假设（Request Hypothesis）：与一个完整请求、休眠 goroutine 所关联的对象比其他对象更容易死亡。这个假设听起来非常符合直觉，但在实现上，由于垃圾回收器必须确保是否有 goroutine 私有指针被写入公共对象，因此写屏障必须一直打开，这也就产生了该方法的致命缺点：昂贵的写屏障及其带来的缓存未命中，这也是这一设计最终没有被采用的主要原因。</p><h4 id="传统分代-GC"><a href="#传统分代-GC" class="headerlink" title="传统分代 GC"></a>传统分代 GC</h4><p>在发现 ROC 性能不行之后，作为备选方案，Go 团队还尝试了实现<a href="https://go-review.googlesource.com/c/go/+/137476/12" target="_blank" rel="noopener">传统的分代式 GC</a>。但最终同样发现分代假设并不适用于 Go 的运行栈机制，年轻代对象在栈上就已经死亡，扫描本就该回收的执行栈并没有为由于分代假设带来明显的性能提升。这也是这一设计最终没有被采用的主要原因。</p><h3 id="18-目前提供-GC-的语言以及不提供-GC-的语言有哪些？GC-和-No-GC-各自的优缺点是什么？"><a href="#18-目前提供-GC-的语言以及不提供-GC-的语言有哪些？GC-和-No-GC-各自的优缺点是什么？" class="headerlink" title="18. 目前提供 GC 的语言以及不提供 GC 的语言有哪些？GC 和 No GC 各自的优缺点是什么？"></a>18. 目前提供 GC 的语言以及不提供 GC 的语言有哪些？GC 和 No GC 各自的优缺点是什么？</h3><p>从原理上而言，所有的语言都能够自行实现 GC。从语言诞生之初就提供 GC 的语言，例如：</p><ul><li>Python</li><li>JavaScript</li><li>Java</li><li>Objective-C</li><li>Swift</li></ul><p>而不以 GC 为目标，被直接设计为手动管理内存、但可以自行实现 GC 的语言有：</p><ul><li>C</li><li>C++</li></ul><p>也有一些语言可以在编译期，依靠编译器插入清理代码的方式，实现精准的清理，例如：</p><ul><li>Rust</li></ul><p>垃圾回收使程序员无需手动处理内存释放，从而能够消除一些需要手动管理内存才会出现的运行时错误：</p><ol><li>在仍然有指向内存区块的指针的情况下释放这块内存时，会产生悬挂指针，从而后续可能错误的访问已经用于他用的内存区域。</li><li>多重释放同一块申请的内存区域可能导致不可知的内存损坏。</li></ol><p>当然，垃圾回收也会伴随一些缺陷，这也就造就了没有 GC 的一些优势：</p><ol><li>没有额外的性能开销</li><li>精准的手动内存管理，极致的利用机器的性能</li></ol><h3 id="19-Go-对比-Java、V8-中-JavaScript-的-GC-性能如何？"><a href="#19-Go-对比-Java、V8-中-JavaScript-的-GC-性能如何？" class="headerlink" title="19. Go 对比 Java、V8 中 JavaScript 的 GC 性能如何？"></a>19. Go 对比 Java、V8 中 JavaScript 的 GC 性能如何？</h3><p>无论是 Java 还是 JavaScript 中的 GC 均为分代式 GC。分代式 GC 的一个核心假设就是分代假说：将对象依据存活时间分配到不同的区域，每次回收只回收其中的一个区域。</p><h4 id="V8-的-GC"><a href="#V8-的-GC" class="headerlink" title="V8 的 GC"></a>V8 的 GC</h4><p>在 V8 中主要将内存分为新生代和老生代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长、常驻内存、占用内存较大的对象：</p><ol><li>新生代中的对象主要通过副垃圾回收器进行回收。该回收过程是一种采用复制的方式实现的垃圾回收算法，它将堆内存一分为二，这两个空间中只有一个处于使用中，另一个则处于闲置状态。处于使用状态的空间称为 From 空间，处于闲置的空间称为 To 空间。分配对象时，先是在 From 空间中进行分配，当开始垃圾回收时，会检查 From 空间中的存活对象，并将这些存活对象复制到 To 空间中，而非存活对象占用的空间被释放。完成复制后，From 空间和 To 空间的角色互换。也就是通过将存活对象在两个空间中进行复制。</li><li>老生代则由主垃圾回收器负责。它实现的是标记清扫过程，但略有不同之处在于它还会在清扫完成后对内存碎片进行整理，进而是一种标记整理的回收器。</li></ol><h4 id="Java-的-GC"><a href="#Java-的-GC" class="headerlink" title="Java 的 GC"></a>Java 的 GC</h4><p>Java 的 GC 称之为 G1，并将整个堆分为年轻代、老年代和永久代。包括四种不同的收集操作，从上往下的这几个阶段会选择性地执行，触发条件是用户的配置和实际代码行为的预测。</p><ol><li>年轻代收集周期：只对年轻代对象进行收集与清理</li><li>老年代收集周期：只对老年代对象进行收集与清理</li><li>混合式收集周期：同时对年轻代和老年代进行收集与清理</li><li>完整 GC 周期：完整的对整个堆进行收集与清理</li></ol><p>在回收过程中，G1 会对停顿时间进行预测，竭尽所能地调整 GC 的策略从而达到用户代码通过系统参数（<code>-XX:MaxGCPauseMillis</code>）所配置的对停顿时间的要求。</p><p>这四个周期的执行成本逐渐上升，优化得当的程序可以完全避免完整 GC 周期。</p><h4 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h4><p>在 Go、Java 和 V8 JavaScript 之间比较 GC 的性能本质上是一个不切实际的问题。如前面所说，垃圾回收器的设计权衡了很多方面的因素，同时还受语言自身设计的影响，因为语言的设计也直接影响了程序员编写代码的形式，也就自然影响了产生垃圾的方式。</p><p>但总的来说，他们三者对垃圾回收的实现都需要 STW，并均已达到了用户代码几乎无法感知到的状态（据 Go GC 作者 Austin 宣称 <a href="https://groups.google.com/d/msg/golang-dev/Ab1sFeoZg_8/_DaL0E8fAwAJ" target="_blank" rel="noopener">STW 小于 100 微秒</a>）。当然，随着 STW 的减少，垃圾回收器会增加 CPU 的使用率，这也是程序员在编写代码时需要手动进行优化的部分，即充分考虑内存分配的必要性，减少过多申请内存带给垃圾回收器的压力。</p><h3 id="20-目前-Go-语言的-GC-还存在哪些问题？"><a href="#20-目前-Go-语言的-GC-还存在哪些问题？" class="headerlink" title="20. 目前 Go 语言的 GC 还存在哪些问题？"></a>20. 目前 Go 语言的 GC 还存在哪些问题？</h3><p>尽管 Go 团队宣称 STW 停顿时间得以优化到 100 微秒级别，但这本质上是一种取舍。原本的 STW 某种意义上来说其实转移到了可能导致用户代码停顿的几个位置；除此之外，由于运行时调度器的实现方式，同样对 GC 存在一定程度的影响。</p><p>目前 Go 中的 GC 仍然存在以下问题：</p><h4 id="1-Mark-Assist-停顿时间过长"><a href="#1-Mark-Assist-停顿时间过长" class="headerlink" title="1. Mark Assist 停顿时间过长"></a>1. Mark Assist 停顿时间过长</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"runtime"</span>    <span class="token string">"runtime/trace"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    windowSize <span class="token operator">=</span> <span class="token number">200000</span>    msgCount   <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    best    time<span class="token punctuation">.</span>Duration <span class="token operator">=</span> time<span class="token punctuation">.</span>Second    bestAt  time<span class="token punctuation">.</span>Time    worst   time<span class="token punctuation">.</span>Duration    worstAt time<span class="token punctuation">.</span>Time    start <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        worst <span class="token operator">=</span> <span class="token number">0</span>        best <span class="token operator">=</span> time<span class="token punctuation">.</span>Second        runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> c channel    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> msgCount<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Best send delay %v at %v, worst send delay: %v at %v. Wall clock: %v \n"</span><span class="token punctuation">,</span> best<span class="token punctuation">,</span> bestAt<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> worst<span class="token punctuation">,</span> worstAt<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> channel <span class="token punctuation">[</span>windowSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>channel<span class="token punctuation">)</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 模拟发送</span>    <span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token operator">%</span>windowSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newMsg</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    elapsed <span class="token operator">:=</span> end<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>    <span class="token keyword">if</span> elapsed <span class="token operator">></span> worst <span class="token punctuation">{</span>        worst <span class="token operator">=</span> elapsed        worstAt <span class="token operator">=</span> end    <span class="token punctuation">}</span>    <span class="token keyword">if</span> elapsed <span class="token operator">&lt;</span> best <span class="token punctuation">{</span>        best <span class="token operator">=</span> elapsed        bestAt <span class="token operator">=</span> end    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newMsg</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行此程序我们可以得到类似下面的结果：</p><pre><code>$ go run main.goBest send delay 330ns at 773.037956ms, worst send delay: 7.127915ms at 579.835487ms. Wall clock: 831.066632ms Best send delay 331ns at 873.672966ms, worst send delay: 6.731947ms at 1.023969626s. Wall clock: 1.515295559s Best send delay 330ns at 1.812141567s, worst send delay: 5.34028ms at 2.193858359s. Wall clock: 2.199921749s Best send delay 338ns at 2.722161771s, worst send delay: 7.479482ms at 2.665355216s. Wall clock: 2.920174197s Best send delay 337ns at 3.173649445s, worst send delay: 6.989577ms at 3.361716121s. Wall clock: 3.615079348s </code></pre><p><img src="https://s.gin.sh/blog/golang/gc/gc-mark-assist.png" alt=""></p><p>在这个结果中，第一次的最坏延迟时间高达 7.12 毫秒，发生在程序运行 578 毫秒左右。通过 <code>go tool trace</code> 可以发现，这个时间段中，Mark Assist 执行了 7112312ns，约为 7.127915ms；可见，此时最坏情况下，标记辅助拖慢了用户代码的执行，是造成 7 毫秒延迟的原因。</p><!-- https://github.com/golang/go/issues/27732 --><!-- https://github.com/golang/go/issues/27410 --><h4 id="2-Sweep-停顿时间过长"><a href="#2-Sweep-停顿时间过长" class="headerlink" title="2. Sweep 停顿时间过长"></a>2. Sweep 停顿时间过长</h4><p>同样还是刚才的例子，如果我们仔细观察 Mark Assist 后发生的 Sweep 阶段，竟然对用户代码的影响长达约 30ms，根据调用栈信息可以看到，该 Sweep 过程发生在内存分配阶段：</p><p><img src="https://s.gin.sh/blog/golang/gc/gc-mark-sweep.png" alt=""></p><!-- https://github.com/golang/go/issues/18155 --><h4 id="3-由于-GC-算法的不正确性导致-GC-周期被迫重新执行"><a href="#3-由于-GC-算法的不正确性导致-GC-周期被迫重新执行" class="headerlink" title="3. 由于 GC 算法的不正确性导致 GC 周期被迫重新执行"></a>3. 由于 GC 算法的不正确性导致 GC 周期被迫重新执行</h4><p>此问题很难复现，但是一个已知的问题，根据 Go 团队的描述，<a href="https://github.com/golang/go/issues/27993##issuecomment-441719687" target="_blank" rel="noopener">能够在 1334 次构建中发生一次</a>，我们可以计算出其触发概率约为 0.0007496251874。虽然发生概率很低，但一旦发生，GC 需要被重新执行，非常不幸。</p><!-- https://github.com/golang/go/issues/27993 --><h4 id="4-创建大量-Goroutine-后导致-GC-消耗更多的-CPU"><a href="#4-创建大量-Goroutine-后导致-GC-消耗更多的-CPU" class="headerlink" title="4. 创建大量 Goroutine 后导致 GC 消耗更多的 CPU"></a>4. 创建大量 Goroutine 后导致 GC 消耗更多的 CPU</h4><p>这个问题可以通过以下程序进行验证：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkGCLargeGs</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> ng <span class="token operator">:=</span> <span class="token number">100</span><span class="token punctuation">;</span> ng <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> ng <span class="token operator">*=</span> <span class="token number">10</span> <span class="token punctuation">{</span>        b<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"##g-%d"</span><span class="token punctuation">,</span> ng<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建大量 goroutine，由于每次创建的 goroutine 会休眠</span>            <span class="token comment" spellcheck="true">// 从而运行时不会复用正在休眠的 goroutine，进而不断创建新的 g</span>            wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ng<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ng<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>                    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 现运行一次 GC 来提供一致的内存环境</span>            runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 记录运行 b.N 次 GC 需要的时间</span>            b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其结果可以通过如下指令来获得：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go test -bench=BenchmarkGCLargeGs -run=^$ -count=5 -v . | tee 4.txt$ benchstat 4.txtname                     time/opGCLargeGs/##g-100-12       192µs ± 5%GCLargeGs/##g-1000-12      331µs ± 1%GCLargeGs/##g-10000-12    1.22ms ± 1%GCLargeGs/##g-100000-12   10.9ms ± 3%GCLargeGs/##g-1000000-12  32.5ms ± 4%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况通常发生于峰值流量后，大量 goroutine 由于任务等待被休眠，从而运行时不断创建新的 goroutine，<br>旧的 goroutine 由于休眠未被销毁且得不到复用，导致 GC 需要扫描的执行栈越来越多，进而完成 GC 所需的时间越来越长。<br>一个解决办法是使用 goroutine 池来限制创建的 goroutine 数量。</p><!-- https://github.com/golang/go/issues/34457 --><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>GC 是一个复杂的系统工程，本文讨论的二十个问题尽管已经展现了一个相对全面的 Go GC。但它们仍然只是 GC 这一宏观问题的一些较为重要的部分，还有非常多的细枝末节、研究进展无法在有限的篇幅内完整讨论。</p><p>从 Go 诞生之初，Go 团队就一直在对 GC 的表现进行实验与优化，但仍然有诸多未解决的问题，我们不妨对 GC 未来的改进拭目以待。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p>【Why golang garbage-collector not implement Generational and Compact gc?】<a href="https://groups.google.com/forum/##!msg/golang-nuts/KJiyv2mV2pU/wdBUH1mHCAAJ" target="_blank" rel="noopener">https://groups.google.com/forum/##!msg/golang-nuts/KJiyv2mV2pU/wdBUH1mHCAAJ</a></p><p>【写一个内存分配器】<a href="http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/##more-3590" target="_blank" rel="noopener">http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/##more-3590</a></p><p>【观察 GC】<a href="https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html" target="_blank" rel="noopener">https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html</a></p><p>【煎鱼 Go debug】<a href="https://segmentfault.com/a/1190000020255157" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020255157</a></p><p>【煎鱼 go tool trace】<a href="https://eddycjy.gitbook.io/golang/di-9-ke-gong-ju/go-tool-trace" target="_blank" rel="noopener">https://eddycjy.gitbook.io/golang/di-9-ke-gong-ju/go-tool-trace</a></p><p>【trace 讲解】<a href="https://www.itcodemonkey.com/article/5419.html" target="_blank" rel="noopener">https://www.itcodemonkey.com/article/5419.html</a></p><p>【An Introduction to go tool trace】<a href="https://about.sourcegraph.com/go/an-introduction-to-go-tool-trace-rhys-hiltner" target="_blank" rel="noopener">https://about.sourcegraph.com/go/an-introduction-to-go-tool-trace-rhys-hiltner</a></p><p>【http pprof 官方文档】<a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener">https://golang.org/pkg/net/http/pprof/</a></p><p>【runtime pprof 官方文档】<a href="https://golang.org/pkg/runtime/pprof/" target="_blank" rel="noopener">https://golang.org/pkg/runtime/pprof/</a></p><p>【trace 官方文档】<a href="https://golang.org/pkg/runtime/trace/" target="_blank" rel="noopener">https://golang.org/pkg/runtime/trace/</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Goruntime </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 是怎么计算 CPU 使用率统的</title>
      <link href="/linux/how-linux-calculates-cpu-usage-statistics/"/>
      <url>/linux/how-linux-calculates-cpu-usage-statistics/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-是怎么计算-CPU-使用率统的"><a href="#Linux-是怎么计算-CPU-使用率统的" class="headerlink" title="Linux 是怎么计算 CPU 使用率统的"></a>Linux 是怎么计算 CPU 使用率统的</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><blockquote><p>在 Linux 执行 <code>top</code> 时可以查看CPU使用的情况其中会包含8个模块 </p></blockquote><h3 id="CPU-占用率相关概念"><a href="#CPU-占用率相关概念" class="headerlink" title="CPU 占用率相关概念"></a>CPU 占用率相关概念</h3><ul><li><strong>用户时间(User time)：</strong>   表示CPU执行用户进程的时间，包括 <code>nices</code> 时间。通常期望用户空间CPU越高越好。</li><li><strong>系统时间(System time)：</strong>   表示CPU在内核运行时间，包括IRQ和softirq时间。系统CPU占用率高，表明系统某部分存在瓶颈。通常值越低越好。</li><li><strong>等待时间(Waiting time) ：</strong>   CPU在等待I/O操作完成所花费的时间。系统不应该花费大量时间来等待I/O操作，否则就说明I/O存在瓶颈。</li><li><strong>空闲时间(Idle time) ：</strong>    系统处于空闲期，等待进程运行。</li><li><strong>Nice时间(Nice time) ：</strong>    系统调整进程优先级所花费的时间。</li><li><strong>硬中断处理时间(Hard Irq time) ：</strong>    系统处理硬中断所花费的时间。</li><li><strong>软中断处理时间(SoftIrq time) ：</strong>   系统处理软中断中断所花费的时间。</li><li><strong>丢失时间(Steal time) ：</strong>   被强制等待（involuntary wait）虚拟CPU的时间，此时hypervisor在为另一个虚拟处理器服务。 </li></ul><h3 id="top-命令看到的-CPU-占用率信息及各项值含义"><a href="#top-命令看到的-CPU-占用率信息及各项值含义" class="headerlink" title="top 命令看到的 CPU 占用率信息及各项值含义"></a>top 命令看到的 CPU 占用率信息及各项值含义</h3><pre class="line-numbers language-bash"><code class="language-bash">%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  0.7 us,  0.7 sy,  0.0 ni, 98.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>us:</strong> <code>User time</code> 用户态使用的cpu时间比。CPU一共花了多少比例的时间运行在用户态空间或者说是用户进程 <code>running user space processes</code>。典型的用户态空间程序有：Shell、数据库、web服务器。</li><li><strong>sy:</strong> <code>System time</code> 系统态使用的cpu时间比。System 的含义与 User 相似。System 表示：CPU花了多少比例的时间在内核空间运行。分配内存、IO操作、创建子进程……都是内核操作。这也表明，当IO操作频繁时，System参数会很高。</li><li><strong>ni:</strong> <code>Nice time</code>用做nice加权的进程分配的用户态cpu时间比。用户空间进程的CPU的调度优先级，范围为[-20,19]。每个linux进程都有个优先级，优先级高的进程有优先执行的权利，这个叫做pri。进程除了优先级外，还有个优先级的修正值。即比如你原先的优先级是20，然后修正值为-2，那么你最后的进程优先级为18。这个修正值就叫做进程的nice值。</li><li><strong>id:</strong> <code>Idle time</code> 空闲的cpu时间比。一般而言，<code>idel + user + nice</code> 约等于100%。</li><li><strong>wa:</strong> <code>Waiting time</code> CPU 等待磁盘写入完成时间。在计算机中，读写磁盘的操作远比CPU运行的速度要慢，CPU负载处理数据，而数据一般在磁盘上需要读到内存中才能处理。当CPU发起读写操作后，需要等着磁盘驱动器将数据读入内存，从而导致CPU 在等待的这一段时间内无事可做。CPU处于这种等待状态的时间由Wait参数来衡量。所以如果一台机器看到wa特别高，那么一般说明是磁盘IO出现问题。</li><li><strong>hi:</strong> <code>Hard Irq time</code> 硬中断消耗时间</li><li><strong>si:</strong> <code>SoftIrq time</code> 软中断消耗时间<br>如果程序都没什么问题，那么是没有 <code>hi</code> 和 <code>si</code> 的，但是实际上有个硬中断和软中断的概念。比如硬中断，CPU 在执行程序的时候，突然外设硬件（比如硬盘出现问题了）机器需要立刻通知cpu进行现场保存工作。这个时候会 CPU 会出现上下文切换。就是 CPU 会有一部分时间会被硬中断占用了，这个时间就是<code>hi</code>。相类似，<code>si</code>是软中断的cpu占用时间，软中断是由软件的指令方式触发的。</li><li><strong>st:</strong> <code>Steal time</code> 虚拟机偷取时间。对虚拟机来说的，一台物理是可以虚拟化出几台虚拟机的。在其中一台虚拟机上用top查看发现<code>st</code>不为0，就说明本来有这么多个 CPU 时间是安排给这个虚拟机的，但是由于某种虚拟技术，把这个 CPU 时间分配给了其他的虚拟机了。这就叫做偷取。</li></ul><h3 id="计算方式"><a href="#计算方式" class="headerlink" title="计算方式"></a>计算方式</h3><p>Linux CPU占用率计算，都是根据/proc/stat文件内容计算而来。</p><pre class="line-numbers language-bash"><code class="language-bash">cpu  6828152 1527 6543411 876011091 668088 0 36573 0 0 0cpu0 6828152 1527 6543411 876011091 668088 0 36573 0 0 0intr 1389849603 100 412 0 0 1170 0 3 0 0 0 0 34 15 0 0 0 0 0 0 0 0 0 0 0 1 16894685 273 0 22 0 7167543 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0ctxt 20567153704btime 1568117559processes 229626procs_running 6procs_blocked 0softirq 592769402 2 371814856 428995 53078902 0 0 136720 0 0 167309927<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Linux CPU占用率是根据/proc/stat文件中的数据计算而来</li><li>/proc/stat中的数据精度为ticks，即1/HZ秒</li><li>内核每个ticks会更新一次CPU使用信息</li><li>CPU占用率的精度为1/HZ秒</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://scoutapm.com/blog/understanding-cpu-steal-time-when-should-you-be-worried" target="_blank" rel="noopener">1. Understanding CPU Steal Time - when should you be worried?</a><br><a href="https://scoutapm.com/blog/understanding-cpu-steal-time-when-should-you-be-worried" target="_blank" rel="noopener">2. Understanding Linux CPU Load - when should you be worried?</a><br><a href="https://scoutapm.com/blog/understanding-cpu-steal-time-when-should-you-be-worried" target="_blank" rel="noopener">3. Slow Server? This is the Flow Chart You’re Looking For</a><br><a href="https://scoutapm.com/blog/understanding-cpu-steal-time-when-should-you-be-worried" target="_blank" rel="noopener">4  . https://scoutapm.com/blog/restricting-process-cpu-usage-using-nice-cpulimit-and-cgroups</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CPU </tag>
            
            <tag> Pperating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解密Go语言之pprof</title>
      <link href="/golang/depth-decrypting-the-pprof-of-the-go-language/"/>
      <url>/golang/depth-decrypting-the-pprof-of-the-go-language/</url>
      
        <content type="html"><![CDATA[<h1 id="【转】深度解密Go语言之pprof"><a href="#【转】深度解密Go语言之pprof" class="headerlink" title="【转】深度解密Go语言之pprof"></a>【转】深度解密Go语言之pprof</h1><p><a href="https://qcrao.com/2019/11/10/dive-into-go-pprof/" target="_blank" rel="noopener">原文地址</a><br><a href="">源码地址</a></p><p>相信很多人都听过“雷神 3”关于性能优化的故事。在一个 3D 游戏引擎的源码里，John Carmack 将 1/sqrt(x) 这个函数的执行效率优化到了极致。</p><p>一般我们使用二分法，或者牛顿迭代法计算一个浮点数的平方根。但在这个函数里，作者使用了一个“魔数”，根本没有迭代，两步就直接算出了平方根。令人叹为观止！</p><p>因为它是最底层的函数，而游戏里涉及到大量的这种运算，使得在运算资源极其紧张的 DOS 时代，游戏也可以流畅地运行。这就是性能优化的魅力！</p><p>工作中，当业务量比较小的时候，用的机器也少，体会不到性能优化带来的收益。而当一个业务使用了几千台机器的时候，性能优化 20%，那就能省下几百台机器，一年能省几百万。省下来的这些钱，给员工发年终奖，那得多 Happy！</p><p>一般而言，性能分析可以从三个层次来考虑：应用层、系统层、代码层。</p><p>应用层主要是梳理业务方的使用方式，让他们更合理地使用，在满足使用方需求的前提下，减少无意义的调用；系统层关注服务的架构，例如增加一层缓存；代码层则关心函数的执行效率，例如使用效率更高的开方算法等。</p><p>做任何事，都要讲究方法。在很多情况下，迅速把事情最关键的部分完成，就能拿到绝大部分的收益了。其他的一些边边角角，可以慢慢地缝合。一上来就想完成 100%，往往会陷入付出了巨大的努力，却收获寥寥的境地。</p><p>性能优化这件事也一样，识别出性能瓶颈，会让我们付出最小的努力，而得到最大的回报。</p><p>Go 语言里，pprof 就是这样一个工具，帮助我们快速找到性能瓶颈，进而进行有针对性地优化。</p><h2 id="什么是-pprof"><a href="#什么是-pprof" class="headerlink" title="什么是 pprof"></a>什么是 pprof</h2><p>代码上线前，我们通过压测可以获知系统的性能，例如每秒能处理的请求数，平均响应时间，错误率等指标。这样，我们对自己服务的性能算是有个底。</p><p>但是压测是线下的模拟流量，如果到了线上呢？会遇到高并发、大流量，不靠谱的上下游，突发的尖峰流量等等场景，这些都是不可预知的。</p><p>线上突然大量报警，接口超时，错误数增加，除了看日志、监控，就是用性能分析工具分析程序的性能，找到瓶颈。当然，一般这种情形不会让你有机会去分析，降级、限流、回滚才是首先要做的，要先止损嘛。回归正常之后，通过线上流量回放，或者压测等手段，制造性能问题，再通过工具来分析系统的瓶颈。</p><p>一般而言，性能分析主要关注 CPU、内存、磁盘 IO、网络这些指标。</p><p>Profiling 是指在程序执行过程中，收集能够反映程序执行状态的数据。在软件工程中，性能分析（performance analysis，也称为 profiling），是以收集程序运行时信息为手段研究程序行为的分析方法，是一种动态程序分析的方法。</p><p>Go 语言自带的 pprof 库就可以分析程序的运行情况，并且提供可视化的功能。它包含两个相关的库：</p><ul><li>runtime/pprof</li></ul><p>对于只跑一次的程序，例如每天只跑一次的离线预处理程序，调用 pprof 包提供的函数，手动开启性能数据采集。</p><ul><li>net/http/pprof</li></ul><p>对于在线服务，对于一个 HTTP Server，访问 pprof 提供的 HTTP 接口，获得性能数据。当然，实际上这里底层也是调用的 runtime/pprof 提供的函数，封装成接口对外提供网络访问。</p><h2 id="pprof-的作用"><a href="#pprof-的作用" class="headerlink" title="pprof 的作用"></a>pprof 的作用</h2><p>pprof 是 Go 语言中分析程序运行性能的工具，它能提供各种性能数据：</p><p><img src="https://user-images.githubusercontent.com/7698088/68523507-3ce36500-02f5-11ea-8e8f-438c9ef2b9f8.png" alt="pprof 采集的信息类型"></p><p>allocs 和 heap 采样的信息一致，不过前者是所有对象的内存分配，而 heap 则是活跃对象的内存分配。</p><blockquote><p>The difference between the two is the way the pprof tool reads there at start time. Allocs profile will start pprof in a mode which displays the total number of bytes allocated since the program began (including garbage-collected bytes).</p></blockquote><p>上图来自参考资料【wolfogre】的一篇 pprof 实战的文章，提供了一个样例程序，通过 pprof 来排查、分析、解决性能问题，非常精彩。</p><blockquote><p>1.当 CPU 性能分析启用后，Go runtime 会每 10ms 就暂停一下，记录当前运行的 goroutine 的调用堆栈及相关数据。当性能分析数据保存到硬盘后，我们就可以分析代码中的热点了。</p></blockquote><blockquote><p>2.内存性能分析则是在堆（Heap）分配的时候，记录一下调用堆栈。默认情况下，是每 1000 次分配，取样一次，这个数值可以改变。栈(Stack)分配 由于会随时释放，因此不会被内存分析所记录。由于内存分析是取样方式，并且也因为其记录的是分配内存，而不是使用内存。因此使用内存性能分析工具来准确判断程序具体的内存使用是比较困难的。</p></blockquote><blockquote><p>3.阻塞分析是一个很独特的分析，它有点儿类似于 CPU 性能分析，但是它所记录的是 goroutine 等待资源所花的时间。阻塞分析对分析程序并发瓶颈非常有帮助，阻塞性能分析可以显示出什么时候出现了大批的 goroutine 被阻塞了。阻塞性能分析是特殊的分析工具，在排除 CPU 和内存瓶颈前，不应该用它来分析。</p></blockquote><h2 id="pprof-如何使用"><a href="#pprof-如何使用" class="headerlink" title="pprof 如何使用"></a>pprof 如何使用</h2><blockquote><p>我们可以通过 报告生成、Web 可视化界面、交互式终端 三种方式来使用 pprof。<br>—— 煎鱼《Golang 大杀器之性能剖析 PProf》</p></blockquote><h3 id="runtime-pprof"><a href="#runtime-pprof" class="headerlink" title="runtime/pprof"></a>runtime/pprof</h3><p>拿 CPU profiling 举例，增加两行代码，调用 pprof.StartCPUProfile 启动 cpu profiling，调用 pprof.StopCPUProfile() 将数据刷到文件里：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"runtime/pprof"</span><span class="token keyword">var</span> cpuprofile <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"cpuprofile"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"write cpu profile to file"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// …………</span>    pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// …………</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="net-http-pprof"><a href="#net-http-pprof" class="headerlink" title="net/http/pprof"></a>net/http/pprof</h3><p>启动一个端口（和正常提供业务服务的端口不同）监听 pprof 请求：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span><span class="token keyword">func</span> <span class="token function">initPprofMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    pPort <span class="token operator">:=</span> global<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span><span class="token function">MustInt</span><span class="token punctuation">(</span><span class="token string">"http_server"</span><span class="token punctuation">,</span> <span class="token string">"pprofport"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    addr <span class="token operator">:=</span> <span class="token string">":"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>pPort<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        err <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"funcRetErr=http.ListenAndServe||err=%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pprof 包会自动注册 handler， 处理相关的请求：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// src/net/http/pprof/pprof.go:71</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/debug/pprof/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Index<span class="token punctuation">)</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/debug/pprof/cmdline"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Cmdline<span class="token punctuation">)</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/debug/pprof/profile"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Profile<span class="token punctuation">)</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/debug/pprof/symbol"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">)</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/debug/pprof/trace"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Trace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个路径 /debug/pprof/ 下面其实还有 5 个子路径：</p><pre class="line-numbers language-go"><code class="language-go">goroutinethreadcreateheapblockmutex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务后，直接在浏览器访问：</p><p><a href="http://47.93.238.9:8080/debug/pprof/" target="_blank" rel="noopener">http://47.93.238.9:8080/debug/pprof/</a></p><p><img src="https://user-images.githubusercontent.com/7698088/68526001-46c79100-0312-11ea-9a7f-7eb41cf482d6.png" alt="页面 /debug/pprof"></p><p>可以直接点击上面的链接，进入子页面，查看相关的汇总信息。</p><p>关于 goroutine 的信息有两个链接，goroutine 和 full goroutine stack dump，前者是一个汇总的消息，可以查看 goroutines 的总体情况，后者则可以看到每一个 goroutine 的状态。页面具体内容的解读可以参考【大彬】的文章。</p><p>点击 profile 和 trace 则会在后台进行一段时间的数据采样，采样完成后，返回给浏览器一个 profile 文件，之后在本地通过 go tool pprof 工具进行分析。</p><p>当我们下载得到了 profile 文件后，执行命令：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> tool pprof ~<span class="token operator">/</span>Downloads<span class="token operator">/</span>profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://user-images.githubusercontent.com/7698088/68529660-bb62f580-033b-11ea-9ff3-67630ce1d21f.png" alt="pprof profile"></p><p>就可以进入命令行交互式使用模式。执行 <code>go tool pprof -help</code> 可以查看帮助信息。</p><p>直接使用如下命令，则不需要通过点击浏览器上的链接就能进入命令行交互模式：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然也是需要先后台采集一段时间的数据，再将数据文件下载到本地，最后进行分析。上述的 Url 后面还可以带上时间参数：?seconds=60，自定义 CPU Profiling 的时长。</p><p>类似的命令还有：</p><pre class="line-numbers language-go"><code class="language-go"># 下载 cpu profile，默认从当前开始收集 30s 的 cpu 使用情况，需要等待 30s<span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>profile# wait 120s<span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>profile?seconds<span class="token operator">=</span><span class="token number">120</span>     # 下载 heap profile<span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>heap# 下载 goroutine profile<span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>goroutine# 下载 block profile<span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>block# 下载 mutex profile<span class="token keyword">go</span> tool pprof http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>mutex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入交互式模式之后，比较常用的有 top、list、web 等命令。</p><p>执行 top：</p><p><img src="https://user-images.githubusercontent.com/7698088/68526610-ea1ba480-0318-11ea-9a13-ea49a1b849b0.png" alt="pprof top"></p><p>得到四列数据：</p><pre class="line-numbers language-go"><code class="language-go">列名    含义flat    本函数的执行耗时flat<span class="token operator">%</span>    flat 占 CPU 总时间的比例。程序总耗时 <span class="token number">16.</span>22s<span class="token punctuation">,</span> Eat 的 <span class="token number">16.</span>19s 占了 <span class="token number">99.82</span><span class="token operator">%</span>sum<span class="token operator">%</span>    前面每一行的 flat 占比总和cum    累计量。指该函数加上该函数调用的函数总耗时cum<span class="token operator">%</span>    cum 占 CPU 总时间的比例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他类型，如 heap 的 flat, sum, cum 的意义和上面的类似，只不过计算的东西不同，一个是 CPU 耗时，一个是内存大小。</p><p>执行 list，使用正则匹配，找到相关的代码：</p><pre><code>list Eat</code></pre><p>直接定位到了相关长耗时的代码处：</p><p><img src="https://user-images.githubusercontent.com/7698088/68526943-34eaeb80-031c-11ea-8d3d-c3e103c5a8a0.png" alt="pprof list"></p><p>执行 web（需要安装 graphviz，pprof 能够借助 grapgviz 生成程序的调用图），会生成一个 svg 格式的文件，直接在浏览器里打开（可能需要设置一下 .svg 文件格式的默认打开方式）：</p><p><img src="https://user-images.githubusercontent.com/7698088/68526883-9c546b80-031b-11ea-86be-ebe59c7cccad.png" alt="pprof web"></p><p>图中的连线代表对方法的调用，连线上的标签代表指定的方法调用的采样值（例如时间、内存分配大小等），方框的大小与方法运行的采样值的大小有关。</p><p>每个方框由两个标签组成：在 cpu profile 中，一个是方法运行的时间占比，一个是它在采样的堆栈中出现的时间占比（前者是 flat 时间，后者则是 cumulate 时间占比)；框越大，代表耗时越多或是内存分配越多。</p><p>另外，traces 命令还可以列出函数的调用栈：</p><p><img src="https://user-images.githubusercontent.com/7698088/68537697-6b1f7e00-03a3-11ea-9d68-d7bdd12c38a4.png" alt="pprof web"></p><p>除了上面讲到的两种方式（报告生成、命令行交互），还可以在浏览器里进行交互。先生成 profile 文件，再执行命令：</p><pre><code>go tool pprof --http=:8080 ~/Downloads/profile</code></pre><p>进入一个可视化操作界面：<br><img src="https://user-images.githubusercontent.com/7698088/68528770-214a7f80-0332-11ea-9ed9-b3b80a244fb5.png" alt="pprof 可视化界面"></p><p>点击菜单栏可以在：Top/Graph/Peek/Source 之间进行切换，甚至可以看到火焰图（Flame Graph）：</p><p><img src="https://user-images.githubusercontent.com/7698088/68528787-48a14c80-0332-11ea-8e9f-1cf730a02083.png" alt="pprof 火焰图"></p><p>它和一般的火焰图相比刚好倒过来了，调用关系的展现是从上到下。形状越长，表示执行时间越长。注：我这里使用的 go 版本是 1.13，更老一些的版本 pprof 工具不支持 -http 的参数。当然也可以下载其他的库查看火焰图，例如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>google<span class="token operator">/</span>pprof或者<span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>uber<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>torch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pprof-进阶"><a href="#pprof-进阶" class="headerlink" title="pprof 进阶"></a>pprof 进阶</h2><p>我在参考资料部分给出了一些使用 pprof 工具进行性能分析的实战文章，可以跟着动手实践一下，之后再用到自己的平时工作中。</p><h3 id="Russ-Cox-实战"><a href="#Russ-Cox-实战" class="headerlink" title="Russ Cox 实战"></a>Russ Cox 实战</h3><p>这部分主要内容来自参考资料【Ross Cox】，学习一下大牛的优化思路。</p><p>事情的起因是这样的，有人发表了一篇文章，用各种语言实现了一个算法，结果用 go 写的程序非常慢，而 C++ 则最快。然后 Russ Cox 就鸣不平了，哪受得了这个气？马上启用 pprof 大杀器进行优化。最后，程序不仅更快，而且使用的内存更少了！</p><p>首先，增加 cpu profiling 的代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> cpuprofile <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"cpuprofile"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"write cpu profile to file"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">*</span>cpuprofile <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">*</span>cpuprofile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 pprof 观察耗时 top5 的函数，发现一个读 map 的函数耗时最长：mapaccess1_fast64，而它出现在一个递归函数中</p><p><img src="https://user-images.githubusercontent.com/7698088/68537368-47593980-039d-11ea-8c77-187b4760b866.png" alt="pprof 火焰图"></p><p>一眼就能看到框最大的 mapacess1_fast64 函数。执行 web mapaccess1 命令，更聚焦一些：</p><p><img src="https://user-images.githubusercontent.com/7698088/68537381-88e9e480-039d-11ea-9c7b-3741f791cbc9.png" alt="pprof 火焰图"></p><p>调用 mapaccess1_fast64 函数最多的就是 main.FindLoops 和 main.DFS，是时候定位到具体的代码了，执行命令：list DFS，定位到相关的代码。</p><p>优化的方法是将 map 改成 slice，能这样做的原因当然和 key 的类型是 int 而且不是太稀疏有关。</p><blockquote><p>The take away will be that for smaller data sets, you shouldn’t use maps where slices would suffice, as maps have a large overhead.</p></blockquote><p>修改完之后，再次通过 cpu profiling，发现递归函数的耗时已经不在 top5 中了。但是新增了长耗时函数：runtime.mallocgc，占比 54.2%，而这和分存分配以及垃圾回收相关。</p><p>下一步，增加采集内存数据的代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> memprofile <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"memprofile"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"write memory profile to this file"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// …………</span>    <span class="token function">FindHavlakLoops</span><span class="token punctuation">(</span>cfgraph<span class="token punctuation">,</span> lsgraph<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">*</span>memprofile <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">*</span>memprofile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        pprof<span class="token punctuation">.</span><span class="token function">WriteHeapProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>        f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// …………</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续通过 top5、list 命令找到内存分配最多的代码位置，发现这回是向 map 里插入元素使用的内存比较多。改进方式同样是用 slice 代替 map，但 map 还有一个特点是可以重复插入元素，因此新写了一个向 slice 插入元素的函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">appendUnique</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> y <span class="token punctuation">{</span>            <span class="token keyword">return</span> a        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，现在程序比最初的时候快了 2.1 倍。再次查看 cpu profile 数据，发现 runtime.mallocgc 降了一些，但仍然占比 50.9%。</p><blockquote><p>Another way to look at why the system is garbage collecting is to look at the allocations that are causing the collections, the ones that spend most of the time in mallocgc.</p></blockquote><p>因此需要查看垃圾回收到底在回收哪些内容，这些内容就是导致频繁垃圾回收的“罪魁祸首”。</p><p>使用 web mallocgc 命令，将和 mallocgc 相关的函数用矢量图的方式展现出来，但是有太多样本量很少的节点影响观察，增加过滤命令：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> tool pprof <span class="token operator">--</span>nodefraction<span class="token operator">=</span><span class="token number">0.1</span> profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://user-images.githubusercontent.com/7698088/68537420-13cadf00-039e-11ea-98d9-f215a0eaabb8.png" alt="pprof 火焰图"></p><p>将少于 10% 的采样点过滤掉，新的矢量图可以直观地看出，FindLoops 触发了最多的垃圾回收操作。继续使用命令 list FindLoops 直接找到代码的位置。</p><p>原来，每次执行 FindLoops 函数时，都要 make 一些临时变量，这会加重垃圾回收器的负担。改进方式是增加一个全局变量 cache，可以重复利用。坏处是，现在不是线程安全的了。</p><p>使用 pprof 工具进行的优化到这就结束了。最后的结果很不错，基本上能达到和 C++ 同等的速度和同等的内存分配大小。</p><p>我们能得到的启发就是先使用 cpu profile 找出耗时最多的函数，进行优化。如果发现 gc 执行比较多的时候，找出内存分配最多的代码以及引发内存分配的函数，进行优化。</p><p>原文很精彩，虽然写作时间比较久远（最初写于 2011 年）了，但仍然值得一看。另外，参考资料【wolfogre】的实战文章也非常精彩，而且用的招式和这篇文章差不多，但是你可以运行文章提供的样例程序，一步步地解决性能问题，很有意思！</p><h2 id="查找内存泄露"><a href="#查找内存泄露" class="headerlink" title="查找内存泄露"></a>查找内存泄露</h2><p>内存分配既可以发生在堆上也可以在栈上。堆上分配的内存需要垃圾回收或者手动回收（对于没有垃圾回收的语言，例如 C++），栈上的内存则通常在函数退出后自动释放。</p><p>Go 语言通过逃逸分析会将尽可能多的对象分配到栈上，以使程序可以运行地更快。</p><p>这里说明一下，有两种内存分析策略：一种是当前的（这一次采集）内存或对象的分配，称为 inuse；另一种是从程序运行到现在所有的内存分配，不管是否已经被 gc 过了，称为 alloc。</p><blockquote><p>As mentioned above, there are two main memory analysis strategies with pprof. One is around looking at the current allocations (bytes or object count), called inuse. The other is looking at all the allocated bytes or object count throughout the run-time of the program, called alloc. This means regardless if it was gc-ed, a summation of everything sampled.</p></blockquote><p>加上 <code>-sample_index</code> 参数后，可以切换内存分析的类型：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> tool pprof <span class="token operator">-</span>sample_index<span class="token operator">=</span>alloc_space  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">47.93</span><span class="token punctuation">.</span><span class="token number">238.9</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>debug<span class="token operator">/</span>pprof<span class="token operator">/</span>heap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>共有 4 种：</p><pre class="line-numbers language-go"><code class="language-go">类型    含义inuse_space    amount of memory allocated and not released yetinuse_objects    amount of objects allocated and not released yetalloc_space    total amount of memory <span class="token function">allocated</span> <span class="token punctuation">(</span>regardless of released<span class="token punctuation">)</span>alloc_objects    total amount of objects <span class="token function">allocated</span> <span class="token punctuation">(</span>regardless of released<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考资料【大彬 实战内存泄露】讲述了如何通过类似于 diff 的方式找到前后两个时刻多出的 goroutine，进而找到 goroutine 泄露的原因，并没有直接使用 heap 或者 goroutine 的 profile 文件。同样推荐阅读！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>pprof 是进行 Go 程序性能分析的有力工具，它通过采样、收集运行中的 Go 程序性能相关的数据，生成 profile 文件。之后，提供三种不同的展现形式，让我们能更直观地看到相关的性能数据。</p><p>得到性能数据后，可以使用 top、web、list等命令迅速定位到相应的代码处，并进行优化。</p><p>“过早的优化是万恶之源”。实际工作中，很少有人会关注性能，但当你写出的程序存在性能瓶颈，qa 压测时，qps 上不去，为了展示一下技术实力，还是要通过 pprof 观察性能瓶颈，进行相应的性能优化。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【Russ Cox 优化过程，并附上代码】<a href="https://blog.golang.org/profiling-go-programs" target="_blank" rel="noopener">https://blog.golang.org/profiling-go-programs</a></p><p>【google pprof】<a href="https://github.com/google/pprof" target="_blank" rel="noopener">https://github.com/google/pprof</a></p><p>【使用 pprof 和火焰图调试 golang 应用】<a href="https://cizixs.com/2017/09/11/profiling-golang-program/" target="_blank" rel="noopener">https://cizixs.com/2017/09/11/profiling-golang-program/</a></p><p>【资源合集】<a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/" target="_blank" rel="noopener">https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/</a></p><p>【Profiling your Golang app in 3 steps】<a href="https://coder.today/tech/2018-11-10_profiling-your-golang-app-in-3-steps/" target="_blank" rel="noopener">https://coder.today/tech/2018-11-10_profiling-your-golang-app-in-3-steps/</a></p><p>【案例，压测 Golang remote profiling and flamegraphs】<a href="https://matoski.com/article/golang-profiling-flamegraphs/" target="_blank" rel="noopener">https://matoski.com/article/golang-profiling-flamegraphs/</a></p><p>【煎鱼 pprof】<a href="https://segmentfault.com/a/1190000016412013" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016412013</a></p><p>【鸟窝 pprof】<a href="https://colobu.com/2017/03/02/a-short-survey-of-golang-pprof/" target="_blank" rel="noopener">https://colobu.com/2017/03/02/a-short-survey-of-golang-pprof/</a></p><p>【关于 Go 的 7 种性能分析方法】<a href="https://blog.lab99.org/post/golang-2017-10-20-video-seven-ways-to-profile-go-apps.html" target="_blank" rel="noopener">https://blog.lab99.org/post/golang-2017-10-20-video-seven-ways-to-profile-go-apps.html</a></p><p>【pprof 比较全】<a href="https://juejin.im/entry/5ac9cf3a518825556534c76e" target="_blank" rel="noopener">https://juejin.im/entry/5ac9cf3a518825556534c76e</a></p><p>【通过实例来讲解分析、优化过程】<a href="https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/" target="_blank" rel="noopener">https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/</a></p><p>【Go 作者 Dmitry Vyukov】<a href="https://github.com/golang/go/wiki/Performance" target="_blank" rel="noopener">https://github.com/golang/go/wiki/Performance</a></p><p>【wolfogre 非常精彩的实战文章】<a href="https://blog.wolfogre.com/posts/go-ppof-practice/" target="_blank" rel="noopener">https://blog.wolfogre.com/posts/go-ppof-practice/</a></p><p>【dave.cheney】<a href="https://dave.cheney.net/high-performance-go-workshop/dotgo-paris.html" target="_blank" rel="noopener">https://dave.cheney.net/high-performance-go-workshop/dotgo-paris.html</a></p><p>【实战案例】<a href="https://www.cnblogs.com/sunsky303/p/11058808.html" target="_blank" rel="noopener">https://www.cnblogs.com/sunsky303/p/11058808.html</a></p><p>【大彬 实战内存泄露】<a href="https://segmentfault.com/a/1190000019222661" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019222661</a></p><p>【查找内存泄露】<a href="https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/</a></p><p>【雷神 3 性能优化】<a href="https://diducoder.com/sotry-about-sqrt.html" target="_blank" rel="noopener">https://diducoder.com/sotry-about-sqrt.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Forward </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起攻克面试难关：Go面试每日一题</title>
      <link href="/golang/to-overcome-the-interview-difficulties-together-go-interview-one-day-a-day/"/>
      <url>/golang/to-overcome-the-interview-difficulties-together-go-interview-one-day-a-day/</url>
      
        <content type="html"><![CDATA[<h1 id="一起攻克面试难关：Go-面试每天一篇"><a href="#一起攻克面试难关：Go-面试每天一篇" class="headerlink" title="一起攻克面试难关：Go 面试每天一篇"></a>一起攻克面试难关：Go 面试每天一篇</h1><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p><a href="https://mp.weixin.qq.com/s/8xcx0L89njD24iXo-FTSVw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/8xcx0L89njD24iXo-FTSVw</a></p><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>下面这段代码输出的内容： </li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印前"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印中"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印后"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"触发异常"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>输出：</li></ul><pre class="line-numbers language-go"><code class="language-go">打印后打印中打印前<span class="token builtin">panic</span><span class="token punctuation">:</span> 触发异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参考解析：defer 的执行顺序是后进先出。当出现 panic 语句的时候，会先按照 defer 的后进先出的顺序执行，最后才会执行panic。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p><a href="https://mp.weixin.qq.com/s/Vwb-48SF19OaJr0zHOdfzg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Vwb-48SF19OaJr0zHOdfzg</a></p><h3 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>下面这段代码输出什么，说明原因。 </li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>val    <span class="token punctuation">}</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"->"</span><span class="token punctuation">,</span> <span class="token operator">*</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>输出：</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">2</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">3</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参考解析：</strong>这是新手常会犯的错误写法，for range 循环的时候会创建每个元素的副本，而不是元素的引用，所以 m[key] = &amp;val 取的都是变量 val 的地址，所以最后 map 中的所有元素的值都是变量 val 的地址，因为最后 val 被赋值为3，所有输出都是3.</p><p><strong>正确的写法：</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">{</span>        value <span class="token operator">:=</span> val        m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>value    <span class="token punctuation">}</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"===>"</span><span class="token punctuation">,</span> <span class="token operator">*</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><p><a href="https://mp.weixin.qq.com/s/V00k8vfNanjYRAra5cviog" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/V00k8vfNanjYRAra5cviog</a></p><h3 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>下面两段代码输出什么。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//    1...</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    2...</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>两段代码分别输出：</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>参考解析：</strong>这道题考的是使用 append 向 slice 添加元素，第一段代码常见的错误是 [1 2 3]，需要注意。</p><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h3><ul><li>Question<br>下面这段代码有什么缺陷</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">funcMui</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案：第二个返回值没有命名。<br>在函数有多个返回值时，只要有一个返回值有命名，其他的也必须命名。如果有多个返回值必须加上括号()；如果只有一个返回值且命名也必须加上括号()。这里的第一个返回值有命名 sum，第二个没有命名，所以错误。</li></ul><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h3><ul><li><p>Question<br>new() 与 make() 的区别</p></li><li><p>Answer<br>new(T) 和 make(T,args) 是 Go 语言内建函数，用来分配内存，但适用的类型不同。</p></li></ul><p>new(T) 会为 T 类型的新值分配已置零的内存空间，并返回地址（指针），即类型为 *T 的值。换句话说就是，返回一个指针，该指针指向新分配的、类型为 T 的零值。适用于值类型，如数组、结构体等。</p><p>make(T,args) 返回初始化之后的 T 类型的值，这个值并不是 T 类型的零值，也不是指针 *T，是经过初始化之后的 T 的引用。make() 只适用于 slice、map 和 channel.</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p><a href="https://mp.weixin.qq.com/s/BiIMh9QFNYuMa3ngTk-z-g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BiIMh9QFNYuMa3ngTk-z-g</a></p><h3 id="Question-1-3"><a href="#Question-1-3" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>下面这段代码能否通过编译，不能的话原因是什么；如果能，输出什么。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    list <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>不能通过编译，new([]int) 之后的 list 是一个 *[]int 类型的指针，不能对指针执行 append 操作。可以使用 make() 初始化之后再用。同样的，map 和 channel 建议使用 make() 或字面量的方式初始化，不要用 new() 。</li></ul><h3 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2"></a>Question 2</h3><ul><li>Question<br>下面这段代码能否通过编译，如果可以，输出什么？</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    s2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>    s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>不能通过编译。append() 的第二个参数不能直接使用 slice，需使用 … 操作符，将一个切片追加到另一个切片上：append(s1,s2…)。或者直接跟上元素，形如：append(s1,1,2,3)。</li></ul><h3 id="Question-3-1"><a href="#Question-3-1" class="headerlink" title="Question 3"></a>Question 3</h3><ul><li>Question<br>下面这段代码能否通过编译，如果可以，输出什么？</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    size     <span class="token operator">:=</span> <span class="token number">1024</span>    max_size <span class="token operator">=</span> size <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> max_size<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：不能通过编译。这道题的主要知识点是变量声明的简短模式，形如：x := 100。但这种声明方式有限制：<ol><li>必须使用显示初始化；</li><li>不能提供数据类型，编译器会自动推导；</li><li>只能在函数内部使用简短模式；</li></ol></li></ul><h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h2><p><a href="https://mp.weixin.qq.com/s/BiIMh9QFNYuMa3ngTk-z-g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BiIMh9QFNYuMa3ngTk-z-g</a></p><h3 id="Question-1-4"><a href="#Question-1-4" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li><p>Question<br>下面这段代码能否通过编译？不能的话，原因是什么？如果通过，输出什么？</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sn1 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>      age  <span class="token builtin">int</span>      name <span class="token builtin">string</span>  <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"qq"</span><span class="token punctuation">}</span>  sn2 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>      age  <span class="token builtin">int</span>      name <span class="token builtin">string</span>  <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"qq"</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> sn1 <span class="token operator">==</span> sn2 <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sn1 == sn2"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  sm1 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>      age <span class="token builtin">int</span>      m   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>  <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  sm2 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>      age <span class="token builtin">int</span>      m   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>  <span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> sm1 <span class="token operator">==</span> sm2 <span class="token punctuation">{</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sm1 == sm2"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Answer</li></ul><p>编译不通过 invalid operation: sm1 == sm2<br>这道题目考的是结构体的比较，有几个需要注意的地方：<br>1.结构体只能比较是否相等，但是不能比较大小。<br>2.相同类型的结构体才能够进行比较，结构体是否相同不但与属性类型有关，还与属性顺序相关，sn3 与 sn1 就是不同的结构体；</p><pre class="line-numbers language-go"><code class="language-go">sn3 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"qq"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.如果 struct 的所有成员都可以比较，则该 struct 就可以通过 == 或 != 进行比较是否相等，比较时逐个项进行比较，如果每一项都相等，则两个结构体才相等，否则不相等；</p><blockquote><p>那什么是可比较的呢，常见的有 bool、数值型、字符、指针、数组等，像切片、map、函数等是不能比较的。 具体可以参考 Go 说明文档。<a href="http://docs.studygolang.com/ref/spec#Comparison_operators" target="_blank" rel="noopener">http://docs.studygolang.com/ref/spec#Comparison_operators</a></p></blockquote><h2 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h2><p><a href="https://mp.weixin.qq.com/s/6UQ1JyYn_C0zL8U3aUMFLg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/6UQ1JyYn_C0zL8U3aUMFLg</a></p><h3 id="Question-1-5"><a href="#Question-1-5" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>通过指针变量 p 访问其成员变量 name，有哪几种方式？</li></ul><pre class="line-numbers language-go"><code class="language-go">A<span class="token punctuation">.</span>p<span class="token punctuation">.</span>nameB<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>nameC<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>nameD<span class="token punctuation">.</span>p<span class="token operator">-</span><span class="token operator">></span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：AC。&amp; 取址运算符，* 指针解引用。</li></ul><h3 id="Question-2-2"><a href="#Question-2-2" class="headerlink" title="Question 2"></a>Question 2</h3><ul><li>Question<br>下面这段代码能否通过编译？如果通过，输出什么？</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyInt1 <span class="token builtin">int</span><span class="token keyword">type</span> MyInt2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> i1 MyInt1 <span class="token operator">=</span> i    <span class="token keyword">var</span> i2 MyInt2 <span class="token operator">=</span> i    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：编译不通过，cannot use i (type int) as type MyInt1 in assignment。<br>这道题考的是类型别名与类型定义的区别。</li></ul><p>第 5 行代码是基于类型 int 创建了新类型 MyInt1，第 6 行代码是创建了 int 的类型别名 MyInt2，注意类型别名的定义时 = 。所以，第 10 行代码相当于是将 int 类型的变量赋值给 MyInt1 类型的变量，Go 是强类型语言，编译当然不通过；而 MyInt2 只是 int 的别名，本质上还是 int，可以赋值。<br>第 10 行代码的赋值可以使用强制类型转化 var i1 MyInt1 = MyInt1(i).</p><h3 id="Question-3-2"><a href="#Question-3-2" class="headerlink" title="Question 3"></a>Question 3</h3><ul><li>Question<br>以下代码输出什么？</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token function">ap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token function">app</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ap</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">app</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Day-7"><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h2><p><a href="https://mp.weixin.qq.com/s/OfauBwvdcjsxlJ6YvcV1rg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OfauBwvdcjsxlJ6YvcV1rg</a><br>关于字符串连接，下面语法正确的是？</p><pre class="line-numbers language-go"><code class="language-go">A<span class="token punctuation">.</span> str <span class="token operator">:=</span> <span class="token string">'abc'</span> <span class="token operator">+</span> <span class="token string">'123'</span>B<span class="token punctuation">.</span> str <span class="token operator">:=</span> <span class="token string">"abc"</span> <span class="token operator">+</span> <span class="token string">"123"</span>C<span class="token punctuation">.</span> str <span class="token operator">:=</span> <span class="token string">'123'</span> <span class="token operator">+</span> <span class="token string">"abc"</span>D<span class="token punctuation">.</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"abc%d"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：BD。知识点：字符串连接。除了以上两种连接方式，还有 strings.Join()、buffer.WriteString()等。</li></ul><h3 id="Question-2-3"><a href="#Question-2-3" class="headerlink" title="Question 2"></a>Question 2</h3><ul><li>Question<br>下面这段代码能否编译通过？如果可以，输出什么？</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    x <span class="token operator">=</span> <span class="token boolean">iota</span>    <span class="token boolean">_</span>    y    z <span class="token operator">=</span> <span class="token string">"zz"</span>    k    p <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：编译通过，输出：0 2 zz zz 5。知识点：iota 的使用。给大家贴篇文章，讲的很详细<br><a href="https://www.cnblogs.com/zsy/p/5370052.html" target="_blank" rel="noopener">https://www.cnblogs.com/zsy/p/5370052.html</a></li></ul><h3 id="Question-3-3"><a href="#Question-3-3" class="headerlink" title="Question 3"></a>Question 3</h3><ul><li>Question<br>下面赋值正确的是</li></ul><pre class="line-numbers language-go"><code class="language-go">A<span class="token punctuation">.</span> <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token boolean">nil</span>B<span class="token punctuation">.</span> <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">nil</span>C<span class="token punctuation">.</span> <span class="token keyword">var</span> x <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token boolean">nil</span>D<span class="token punctuation">.</span> <span class="token keyword">var</span> x <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token boolean">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：BD。知识点：nil 值。nil 只能赋值给指针、chan、func、interface、map 或 slice 类型的变量。强调下 D 选项的 error 类型，它是一种内置接口类型，看下方贴出的源码就知道，所以 D 是对的。</li></ul><h2 id="Day-8"><a href="#Day-8" class="headerlink" title="Day 8"></a>Day 8</h2><p><a href="https://mp.weixin.qq.com/s/-uioKjs5J8n1zispE_2Hgw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-uioKjs5J8n1zispE_2Hgw</a></p><h3 id="Question-1-6"><a href="#Question-1-6" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>关于init函数，下面说法正确的是</li></ul><pre class="line-numbers language-go"><code class="language-go">A<span class="token punctuation">.</span> 一个包中，可以包含多个 init 函数；B<span class="token punctuation">.</span> 程序编译时，先执行依赖包的 init 函数，再执行 main 包内的 init 函数；C<span class="token punctuation">.</span> main 包中，不能有 init 函数；D<span class="token punctuation">.</span> init 函数可以被其他函数调用；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer</li></ul><p>参考答案及解析：AB。关于 init() 函数有几个需要注意的地方：</p><ol><li>init() 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等;</li><li>一个包可以出线多个 init() 函数,一个源文件也可以包含多个 init() 函数；</li><li>同一个包中多个 init() 函数的执行顺序没有明确定义，但是不同包的init函数是根据包导入的依赖关系决定的（看下图）;</li><li>init() 函数在代码中不能被显示调用、不能被引用（赋值给函数变量），否则出现编译错误;</li><li>一个包被引用多次，如 A import B,C import B,A import C，B 被引用多次，但 B 包只会初始化一次；</li><li>引入包，不可出现死循坏。即 A import B,B import A，这种情况编译失败；</li></ol><p><img src="https://s.gin.sh/blog/golang/go_init_sequesce.jpg" alt="Golang init"></p><h3 id="Question-2-4"><a href="#Question-2-4" class="headerlink" title="Question 2"></a>Question 2</h3><ul><li>Question<br>下面这段代码输出什么以及原因</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    h <span class="token operator">:=</span> hello    <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"not nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go">A<span class="token punctuation">.</span> <span class="token boolean">nil</span>B<span class="token punctuation">.</span> not <span class="token boolean">nil</span>C<span class="token punctuation">.</span> compilation <span class="token builtin">error</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>答案及解析：B。这道题目里面，是将 hello() 赋值给变量 h，而不是函数的返回值，所以输出 not nil。</li></ul><h3 id="Question-3-4"><a href="#Question-3-4" class="headerlink" title="Question 3"></a>Question 3</h3><ul><li>Question<br>下面这段代码能否编译通过？如果可以，输出什么</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">switch</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unknown"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：编译失败。考点：类型选择，类型选择的语法形如：i.(type)，其中 i 是接口，type 是固定关键字，需要注意的是，只有接口类型才可以使用类型选择。看下关于接口的文章。</li></ul><h2 id="Day-9"><a href="#Day-9" class="headerlink" title="Day 9"></a>Day 9</h2><p><a href="https://mp.weixin.qq.com/s/ycVU9Jywq3Z9HhKHXP3GPQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ycVU9Jywq3Z9HhKHXP3GPQ</a></p><h3 id="Question-1-7"><a href="#Question-1-7" class="headerlink" title="Question 1"></a>Question 1</h3><ul><li>Question<br>关于channel，下面语法正确的是()</li></ul><pre class="line-numbers language-go"><code class="language-go">A<span class="token punctuation">.</span> <span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span>B<span class="token punctuation">.</span> ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>C<span class="token punctuation">.</span> <span class="token operator">&lt;-</span> chD<span class="token punctuation">.</span> ch <span class="token operator">&lt;-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Answer<br>参考答案及解析：ABC。A、B都是声明 channel；C 读取 channel；写 channel 是必须带上值，所以 D 错误。</li></ul><h3 id="Question-2-5"><a href="#Question-2-5" class="headerlink" title="Question 2"></a>Question 2</h3><ul><li>Question<br>关于channel，下面语法正确的是()</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token builtin">int</span>    p <span class="token operator">:=</span> person<span class="token punctuation">{</span><span class="token string">"mike"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>A.0B.1C.Compilation error </code></pre><ul><li>Answer<br>参考答案及解析：A。打印一个 map 中不存在的值时，返回元素类型的零值。这个例子中，m 的类型是 map[person]int，因为 m 中不存在 p，所以打印 int 类型的零值，即 0。</li></ul><h3 id="Question-3-5"><a href="#Question-3-5" class="headerlink" title="Question 3"></a>Question 3</h3><ul><li>Question<br>关于channel，下面语法正确的是()</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>num <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    <span class="token function">hello</span><span class="token punctuation">(</span>i<span class="token operator">...</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>A.18B.5C.Compilation error  </code></pre><ul><li>Answer</li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解密Go语言之Time</title>
      <link href="/golang/depth-decrypting-the-time-of-the-go-language-by-gorm-marshaljson-and-unmarshaljson/"/>
      <url>/golang/depth-decrypting-the-time-of-the-go-language-by-gorm-marshaljson-and-unmarshaljson/</url>
      
        <content type="html"><![CDATA[<h1 id="深度解密Go语言之Time"><a href="#深度解密Go语言之Time" class="headerlink" title="深度解密Go语言之Time"></a>深度解密Go语言之Time</h1><blockquote><p>最近在使用<code>Gorm</code>的时候遇到一个关于时间戳的问题，我以此为切入点仔细的阅读了一下<code>Time</code>的源码。</p></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>Gorm在序列化与反序列化时的时间格式是挺令人头疼的</p></blockquote><ul><li>平常我们使用的格式</li></ul><pre class="line-numbers language-go"><code class="language-go">Unix 时间戳： <span class="token number">1462357253</span>通用格式：<span class="token number">2016</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Golang 支持的格式 <a href="https://sourcegraph.com/github.com/golang/go@master/-/blob/src/time/format.go#L73:7" target="_blank" rel="noopener">代码地址</a></li></ul><pre class="line-numbers language-go"><code class="language-go">ANSIC       <span class="token operator">=</span> <span class="token string">"Mon Jan _2 15:04:05 2006"</span>UnixDate    <span class="token operator">=</span> <span class="token string">"Mon Jan _2 15:04:05 MST 2006"</span>RubyDate    <span class="token operator">=</span> <span class="token string">"Mon Jan 02 15:04:05 -0700 2006"</span>RFC822      <span class="token operator">=</span> <span class="token string">"02 Jan 06 15:04 MST"</span>RFC822Z     <span class="token operator">=</span> <span class="token string">"02 Jan 06 15:04 -0700"</span> <span class="token comment" spellcheck="true">// RFC822 with numeric zone</span>RFC850      <span class="token operator">=</span> <span class="token string">"Monday, 02-Jan-06 15:04:05 MST"</span>RFC1123     <span class="token operator">=</span> <span class="token string">"Mon, 02 Jan 2006 15:04:05 MST"</span>RFC1123Z    <span class="token operator">=</span> <span class="token string">"Mon, 02 Jan 2006 15:04:05 -0700"</span> <span class="token comment" spellcheck="true">// RFC1123 with numeric zone</span>RFC3339     <span class="token operator">=</span> <span class="token string">"2006-01-02T15:04:05Z07:00"</span>   <span class="token comment" spellcheck="true">//  默认序列化语反序列化的格式</span>RFC3339Nano <span class="token operator">=</span> <span class="token string">"2006-01-02T15:04:05.999999999Z07:00"</span>Kitchen     <span class="token operator">=</span> <span class="token string">"3:04PM"</span><span class="token comment" spellcheck="true">// Handy time stamps.</span>Stamp      <span class="token operator">=</span> <span class="token string">"Jan _2 15:04:05"</span>StampMilli <span class="token operator">=</span> <span class="token string">"Jan _2 15:04:05.000"</span>StampMicro <span class="token operator">=</span> <span class="token string">"Jan _2 15:04:05.000000"</span>StampNano  <span class="token operator">=</span> <span class="token string">"Jan _2 15:04:05.000000000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始解析"><a href="#开始解析" class="headerlink" title="开始解析"></a>开始解析</h2><h3 id="基本的时间格式"><a href="#基本的时间格式" class="headerlink" title="基本的时间格式"></a>基本的时间格式</h3><p>大家在使用的时候会</p><pre class="line-numbers language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output<span class="token punctuation">:</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">29.4333017</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">0.003985601</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>时间的存储</li></ul><blockquote><p>time时间最终会用一个int64表示当前的时间，每一位数字表示一纳秒</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    Nanosecond  Duration <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token comment" spellcheck="true">//纳秒</span>    Microsecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Nanosecond    <span class="token comment" spellcheck="true">//微妙</span>    Millisecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Microsecond    <span class="token comment" spellcheck="true">//毫秒</span>    Second               <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Millisecond    <span class="token comment" spellcheck="true">//秒</span>    Minute               <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Second            <span class="token comment" spellcheck="true">//分钟</span>    Hour                 <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Minute            <span class="token comment" spellcheck="true">//小时</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//otput: 1970-01-01 09:00:00</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//output: 292277026596-12-05 00:30:07</span><span class="token comment" spellcheck="true">//此处计算方式是以秒为单位，是不对的</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt64<span class="token operator">/</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//output: 2262-04-12 08:47:16</span><span class="token comment" spellcheck="true">// 正确的最大时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">After</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Time<span class="token keyword">func</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Tick</span><span class="token punctuation">(</span>d Duration<span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> Time<span class="token keyword">type</span> Duration <span class="token builtin">int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://golang.org/pkg/time/" target="_blank" rel="noopener">官方文档 https://golang.org/pkg/time/</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang, </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Gorm </tag>
            
            <tag> Json </tag>
            
            <tag> Time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解密Go语言之context</title>
      <link href="/golang/depth-decrypting-the-context-of-the-go-language/"/>
      <url>/golang/depth-decrypting-the-context-of-the-go-language/</url>
      
        <content type="html"><![CDATA[<h1 id="深度解密Go语言之context"><a href="#深度解密Go语言之context" class="headerlink" title="深度解密Go语言之context"></a>深度解密Go语言之context</h1><p><a href="https://www.cnblogs.com/qcrao-2018/p/11007503.html" target="_blank" rel="noopener">原文地址</a><br><a href="https://github.com/golang/go/blob/master/src/context/context.go" target="_blank" rel="noopener">源码地址</a></p><p>Go 语言的 context 包短小精悍，非常适合新手学习。不论是它的源码还是实际使用，都值得投入时间去学习。</p><p>这篇文章依然想尝试全面、深入地去研究。文章相比往期而言，整体不长，希望你看完可以有所收获！</p><h2 id="什么是-context"><a href="#什么是-context" class="headerlink" title="什么是 context"></a>什么是 context</h2><p>Go 1.7 标准库引入 context，中文译作“上下文”，准确说它是 goroutine 的上下文，包含 goroutine 的运行状态、环境、现场等信息。</p><p>context 主要用来在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、k-v 等。</p><p>随着 context 包的引入，标准库中很多接口因此加上了 context 参数，例如 database/sql 包。context 几乎成为了并发控制和超时控制的标准做法。</p><blockquote><p>context.Context 类型的值可以协调多个 groutine 中的代码执行“取消”操作，并且可以存储键值对。最重要的是它是并发安全的。</p></blockquote><blockquote><p>与它协作的 API 都可以由外部控制执行“取消”操作，例如：取消一个 HTTP 请求的执行。</p></blockquote><p>没看懂？没关系，先往后看。</p><h2 id="为什么有-Context"><a href="#为什么有-Context" class="headerlink" title="为什么有 Context"></a>为什么有 Context</h2><p>Go 常用来写后台服务，通常只需要几行代码，就可以搭建一个 http server。</p><p>在 Go 的 server 里，通常每来一个请求都会启动若干个 goroutine 同时工作：有些去数据库拿数据，有些调用下游接口获取相关数据……</p><p><img src="https://s.gin.sh/blog/images/2019/context_request_goroutine_1.png" alt="Request请求流程"></p><p>这些 goroutine 需要共享这个请求的基本数据，例如登陆的 token，处理请求的最大超时时间（如果超过此值再返回数据，请求方因为超时接收不到）等等。当请求被取消或是处理时间太长，这有可能是使用者关闭了浏览器或是已经超过了请求方规定的超时时间，请求方直接放弃了这次请求结果。这时，所有正在为这个请求工作的 goroutine 需要快速退出，因为它们的“工作成果”不再被需要了。在相关联的 goroutine 都退出后，系统就可以回收相关的资源。</p><p>再多说一点，Go 语言中的 server 实际上是一个“协程模型”，也就是说一个协程处理一个请求。例如在业务的高峰期，某个下游服务的响应变慢，而当前系统的请求又没有超时控制，或者超时时间设置地过大，那么等待下游服务返回数据的协程就会越来越多。而我们知道，协程是要消耗系统资源的，后果就是协程数激增，内存占用飙涨，甚至导致服务不可用。更严重的会导致雪崩效应，整个服务对外表现为不可用，这肯定是 P0 级别的事故。这时，肯定有人要背锅了。</p><p>其实前面描述的 P0 级别事故，通过设置“允许下游最长处理时间”就可以避免。例如，给下游设置的 timeout 是 50 ms，如果超过这个值还没有接收到返回数据，就直接向客户端返回一个默认值或者错误。例如，返回商品的一个默认库存数量。注意，这里设置的超时时间和创建一个 http client 设置的读写超时时间不一样，这里不详细展开。可以去看看参考资料【Go 在今日头条的实践】一文，有很精彩的论述。</p><p>context 包就是为了解决上面所说的这些问题而开发的：在 一组 goroutine 之间传递共享的值、取消信号、deadline……</p><p><img src="https://s.gin.sh/blog/images/2019/context_request_goroutine_2.png" alt=""></p><p>用简练一些的话来说，在Go 里，我们不能直接杀死协程，协程的关闭一般会用 <code>channel+select</code> 方式来控制。但是在某些场景下，例如处理一个请求衍生了很多协程，这些协程之间是相互关联的：需要共享一些全局变量、有共同的 deadline 等，而且可以同时被关闭。再用 <code>channel+select</code> 就会比较麻烦，这时就可以通过 context 来实现。</p><p>一句话：context 用来解决 goroutine 之间退出通知、元数据传递的功能</p><h2 id="context-底层实现原理"><a href="#context-底层实现原理" class="headerlink" title="context 底层实现原理"></a>context 底层实现原理</h2><p>我们分析的 Go 版本依然是 1.9.2。</p><h3 id="整体概览"><a href="#整体概览" class="headerlink" title="整体概览"></a>整体概览</h3><p>context 包的代码并不长，context.go 文件总共不到 500 行，其中还有很多大段的注释，代码可能也就 200 行左右的样子，是一个非常值得研究的代码库。</p><p>先给大家看一张整体的图：</p><p><img src="https://s.gin.sh/blog/images/2019/context_func.png" alt=""></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">Context</td><td style="text-align:center">接口</td><td style="text-align:center">定义了 Context 接口的四个方法</td></tr><tr><td style="text-align:center">emptyCtx</td><td style="text-align:center">结构体</td><td style="text-align:center">实现了 Context 接口，它其实是个空的 context</td></tr><tr><td style="text-align:center">CancelFunc</td><td style="text-align:center">函数</td><td style="text-align:center">取消函数</td></tr><tr><td style="text-align:center">canceler</td><td style="text-align:center">短文本</td><td style="text-align:center">context 取消接口，定义了两个方法</td></tr><tr><td style="text-align:center">cancelCtx</td><td style="text-align:center">结构体</td><td style="text-align:center">可以被取消</td></tr><tr><td style="text-align:center">timerCtx</td><td style="text-align:center">结构体</td><td style="text-align:center">超时会被取消</td></tr><tr><td style="text-align:center">valueCtx</td><td style="text-align:center">结构体</td><td style="text-align:center">可以存储 k-v 对</td></tr><tr><td style="text-align:center">Background</td><td style="text-align:center">函数</td><td style="text-align:center">返回一个空的 context，常作为根 context</td></tr><tr><td style="text-align:center">TODO</td><td style="text-align:center">函数</td><td style="text-align:center">返回一个空的 context，常用于重构时期，没有合适的 context 可用</td></tr><tr><td style="text-align:center">WithCancel</td><td style="text-align:center">函数</td><td style="text-align:center">基于父 context，生成一个可以取消的 context</td></tr><tr><td style="text-align:center">newCancelCtx</td><td style="text-align:center">函数</td><td style="text-align:center">创建一个可取消的 context</td></tr><tr><td style="text-align:center">propagateCancel</td><td style="text-align:center">函数</td><td style="text-align:center">向下传递 context 节点间的取消关系</td></tr><tr><td style="text-align:center">parentCancelCtx</td><td style="text-align:center">函数</td><td style="text-align:center">找到第一个可取消的父节点</td></tr><tr><td style="text-align:center">removeChild</td><td style="text-align:center">函数</td><td style="text-align:center">去掉父节点的孩子节点</td></tr><tr><td style="text-align:center">init</td><td style="text-align:center">短文本</td><td style="text-align:center">包初始化</td></tr><tr><td style="text-align:center">WithDeadline</td><td style="text-align:center">函数</td><td style="text-align:center">创建一个有 deadline 的 context</td></tr><tr><td style="text-align:center">WithTimeout</td><td style="text-align:center">函数</td><td style="text-align:center">创建一个有 timeout 的 context</td></tr><tr><td style="text-align:center">WithValue</td><td style="text-align:center">函数</td><td style="text-align:center">创建一个存储 k-v 对的 context</td></tr></tbody></table><p>上面这张表展示了 context 的所有函数、接口、结构体，可以纵览全局，可以在读完文章后，再回头细看。</p><p>整体类图如下：</p><p><img src="https://s.gin.sh/blog/images/2019/context_structure.png" alt=""></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>现在可以直接看源码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当 context 被取消或者到了 deadline，返回一个被关闭的 channel</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在 channel Done 关闭后，返回 context 取消原因</span>    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// 返回 context 是否会被取消以及自动取消时间（即 deadline）</span>    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 key 对应的 value</span>    <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Context</code> 是一个接口，定义了 4 个方法，它们都是幂等的。也就是说连续多次调用同一个方法，得到的结果都是相同的。</p><p><code>Done()</code> 返回一个 channel，可以表示 context 被取消的信号：当这个 channel 被关闭时，说明 context 被取消了。注意，这是一个只读的channel。 我们又知道，读一个关闭的 channel 会读出相应类型的零值。并且源码里没有地方会向这个 channel 里面塞入值。换句话说，这是一个 receive-only 的 channel。因此在子协程里读这个 channel，除非被关闭，否则读不出来任何东西。也正是利用了这一点，子协程从 channel 里读出了值（零值）后，就可以做一些收尾工作，尽快退出。</p><p><code>Err()</code> 返回一个错误，表示 channel 被关闭的原因。例如是被取消，还是超时。</p><p><code>Deadline()</code> 返回 context 的截止时间，通过此时间，函数就可以决定是否进行接下来的操作，如果时间太短，就可以不往下做了，否则浪费系统资源。当然，也可以用这个 deadline 来设置一个 I/O 操作的超时时间。</p><p><code>Value()</code> 获取之前设置的 key 对应的 value。</p><h4 id="canceler"><a href="#canceler" class="headerlink" title="canceler"></a>canceler</h4><p>再来看另外一个接口：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> canceler <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现了上面定义的两个方法的 Context，就表明该 Context 是可取消的。源码中有两个类型实现了 canceler 接口：<em>cancelCtx 和 </em>timerCtx。注意是加了 * 号的，是这两个结构体的指针实现了 canceler 接口。</p><p>Context 接口设计成这个样子的原因：</p><ul><li><p>“取消”操作应该是建议性，而非强制性<br>caller 不应该去关心、干涉 callee 的情况，决定如何以及何时 return 是 callee 的责任。caller 只需发送“取消”信息，callee 根据收到的信息来做进一步的决策，因此接口并没有定义 cancel 方法。</p></li><li><p>“取消”操作应该可传递<br>“取消”某个函数时，和它相关联的其他函数也应该“取消”。因此，Done() 方法返回一个只读的 channel，所有相关函数监听此 channel。一旦 channel 关闭，通过 channel 的“广播机制”，所有监听者都能收到。</p></li></ul><h3 id="构体"><a href="#构体" class="headerlink" title="构体"></a>构体</h3><h4 id="emptyCtx"><a href="#emptyCtx" class="headerlink" title="emptyCtx"></a>emptyCtx</h4><p>源码中定义了 Context 接口后，并且给出了一个实现：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看这段源码，非常 happy。因为每个函数都实现的异常简单，要么是直接返回，要么是返回 nil。</p><p>所以，这实际上是一个空的 context，永远不会被 cancel，没有存储值，也没有 deadline。</p><p>它被包装成：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    background <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span>    todo       <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过下面两个导出的函数（首字母大写）对外公开：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>    <span class="token keyword">return</span> background<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>    <span class="token keyword">return</span> todo<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>background 通常用在 main 函数中，作为所有 context 的根节点。</p><p>todo 通常用在并不知道传递什么 context的情形。例如，调用一个需要传递 context 参数的函数，你手头并没有其他 context 可以传递，这时就可以传递 todo。这常常发生在重构进行中，给一些函数添加了一个 Context 参数，但不知道要传什么，就用 todo “占个位子”，最终要换成其他 context。</p><h4 id="cancelCtx"><a href="#cancelCtx" class="headerlink" title="cancelCtx"></a>cancelCtx</h4><p>再来看一个重要的 context：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> cancelCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Context    <span class="token comment" spellcheck="true">// 保护之后的字段</span>    mu       sync<span class="token punctuation">.</span>Mutex    done     <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    children <span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    err      <span class="token builtin">error</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个可以取消的 Context，实现了 canceler 接口。它直接将接口 Context 作为它的一个匿名字段，这样，它就可以被看成一个 Context。</p><p>先来看 <code>Done()</code> 方法的实现：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    d <span class="token operator">:=</span> c<span class="token punctuation">.</span>done    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> d<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c.done 是“懒汉式”创建，只有调用了 Done() 方法的时候才会被创建。再次说明，函数返回的是一个只读的 channel，而且没有地方向这个 channel 里面写数据。所以，直接调用读这个 channel，协程会被 block 住。一般通过搭配 select 来使用。一旦关闭，就会立即读出零值。</p><p>Err() 和 String() 方法比较简单，不多说。推荐看源码，非常简单。</p><p>接下来，我们重点关注 cancel() 方法的实现：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 必须要传 err</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"context: internal error: missing cancel error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 已经被其他协程取消</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 给 err 字段赋值</span>    c<span class="token punctuation">.</span>err <span class="token operator">=</span> err    <span class="token comment" spellcheck="true">// 关闭 channel，通知其他协程</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>done <span class="token operator">=</span> closedchan    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历它的所有子节点</span>    <span class="token keyword">for</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>children <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归地取消所有子节点</span>        child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将子节点置空</span>    c<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token boolean">nil</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从父节点中移除自己 </span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总体来看，cancel() 方法的功能就是关闭 channel：c.done；递归地取消它的所有子节点；从父节点从删除自己。达到的效果是通过关闭 channel，将取消信号传递给了它的所有子节点。goroutine 接收到取消信号的方式就是 select 语句中的读 c.done 被选中。</p><p>我们再来看创建一个可取消的 Context 的方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> cancelCtx <span class="token punctuation">{</span>    <span class="token keyword">return</span> cancelCtx<span class="token punctuation">{</span>Context<span class="token punctuation">:</span> parent<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个暴露给用户的方法，传入一个父 Context（这通常是一个 background，作为根节点），返回新建的 context，新 context 的 done channel 是新建的（前文讲过）。</p><p>当 WithCancel 函数返回的 CancelFunc 被调用或者是父节点的 done channel 被关闭（父节点的 CancelFunc 被调用），此 context（子节点） 的 done channel 也会被关闭。</p><p>注意传给 WithCancel 方法的参数，前者是 true，也就是说取消的时候，需要将自己从父节点里删除。第二个参数则是一个固定的取消错误类型：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> Canceled <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"context canceled"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还注意到一点，调用子节点 cancel 方法的时候，传入的第一个参数 removeFromParent 是 false。</p><p>两个问题需要回答：1. 什么时候会传 true？2. 为什么有时传 true，有时传 false？</p><p>当 removeFromParent 为 true 时，会将当前节点的 context 从父节点 context 中删除：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最关键的一行：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>什么时候会传 true 呢？答案是调用 WithCancel() 方法的时候，也就是新创建一个可取消的 context 节点时，返回的 cancelFunc 函数会传入 true。这样做的结果是：当调用返回的 cancelFunc 时，会将这个 context 从它的父节点里“除名”，因为父节点可能有很多子节点，你自己取消了，所以我要和你断绝关系，对其他人没影响。</p><p>在取消函数内部，我知道，我所有的子节点都会因为我的一：c.children = nil 而化为灰烬。我自然就没有必要再多做这一步，最后我所有的子节点都会和我断绝关系，没必要一个个做。另外，如果遍历子节点的时候，调用 child.cancel 函数传了 true，还会造成同时遍历和删除一个 map 的境地，会有问题的。</p><p><img src="https://user-images.githubusercontent.com/7698088/59315867-37ee9b00-8cee-11e9-8c19-9a4cf7606d14.png" alt=""></p><p>如上左图，代表一棵 context 树。当调用左图中标红 context 的 cancel 方法后，该 context 从它的父 context 中去除掉了：实线箭头变成了虚线。且虚线圈框出来的 context 都被取消了，圈内的 context 间的父子关系都荡然无存了。</p><p>重点看 propagateCancel()：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父节点是个空节点</span>    <span class="token keyword">if</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// parent is never canceled</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 找到可以取消的父 context</span>    <span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 父节点已经被取消了，本节点（子节点）也要取消</span>            child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 父节点未取消</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// "挂到"父节点上</span>            p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有找到可取消的父 context。新启动一个协程监控父节点或子节点取消信号</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法的作用就是向上寻找可以“挂靠”的“可取消”的 context，并且“挂靠”上去。这样，调用上层 cancel 方法的时候，就可以层层传递，将那些挂靠的子 context 同时“取消”。</p><p>这里着重解释下为什么会有 else 描述的情况发生。else 是指当前节点 context 没有向上找到可以取消的父节点，那么就要再启动一个协程监控父节点或者子节点的取消动作。</p><p>这里就有疑问了，既然没找到可以取消的父节点，那 case &lt;-parent.Done() 这个 case 就永远不会发生，所以可以忽略这个 case；而 case &lt;-child.Done() 这个 case 又啥事不干。那这个 else 不就多余了吗？</p><p>其实不然。我们来看 parentCancelCtx 的代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> c <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">*</span>cancelCtx<span class="token punctuation">:</span>            <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> <span class="token operator">*</span>timerCtx<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">,</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> <span class="token operator">*</span>valueCtx<span class="token punctuation">:</span>            parent <span class="token operator">=</span> c<span class="token punctuation">.</span>Context        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只会识别三种 Context 类型：cancelCtx，timerCtx，*valueCtx。若是把 Context 内嵌到一个类型里，就识别不出来了。</p><p>由于 context 包的代码并不多，所以我直接把它 copy 出来了，然后在 else 语句里加上了几条打印语句，来验证上面的说法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyContext <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的 Context 是我 copy 出来的，所以前面不用加 context.</span>    Context<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    childCancel <span class="token operator">:=</span> <span class="token boolean">true</span>    parentCtx<span class="token punctuation">,</span> parentFunc <span class="token operator">:=</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mctx <span class="token operator">:=</span> MyContext<span class="token punctuation">{</span>parentCtx<span class="token punctuation">}</span>    childCtx<span class="token punctuation">,</span> childFun <span class="token operator">:=</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>mctx<span class="token punctuation">)</span>    <span class="token keyword">if</span> childCancel <span class="token punctuation">{</span>        <span class="token function">childFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">parentFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>parentCtx<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mctx<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>childCtx<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 防止主协程退出太快，子协程来不及打印 </span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我自已在 else 里添加的打印语句我就不贴出来了，感兴趣的可以自己动手实验下。我们看下三个 context 的打印结果：</p><pre class="line-numbers language-go"><code class="language-go">context<span class="token punctuation">.</span>Background<span class="token punctuation">.</span>WithCancel<span class="token punctuation">{</span>context<span class="token punctuation">.</span>Background<span class="token punctuation">.</span>WithCancel<span class="token punctuation">}</span><span class="token punctuation">{</span>context<span class="token punctuation">.</span>Background<span class="token punctuation">.</span>WithCancel<span class="token punctuation">}</span><span class="token punctuation">.</span>WithCancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>果然，mctx，childCtx 和正常的 parentCtx 不一样，因为它是一个自定义的结构体类型。</p><p>else 这段代码说明，如果把 ctx 强行塞进一个结构体，并用它作为父节点，调用 WithCancel 函数构建子节点 context 的时候，Go 会新启动一个协程来监控取消信号，明显有点浪费嘛。</p><p>再来说一下，select 语句里的两个 case 其实都不能删。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个 case 说明当父节点取消，则取消子节点。如果去掉这个 case，那么父节点取消的信号就不能传递到子节点。</p><p>第二个 case 是说如果子节点自己取消了，那就退出这个 select，父节点的取消信号就不用管了。如果去掉这个 case，那么很可能父节点一直不取消，这个 goroutine 就泄漏了。当然，如果父节点取消了，就会重复让子节点取消，不过，这也没什么影响嘛。</p><h4 id="timerCtx"><a href="#timerCtx" class="headerlink" title="timerCtx"></a>timerCtx</h4><p>timerCtx 基于 cancelCtx，只是多了一个 time.Timer 和一个 deadline。Timer 会在 deadline 到来时，自动取消 context。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    cancelCtx    timer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer <span class="token comment" spellcheck="true">// Under cancelCtx.mu.</span>    deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>timerCtx 首先是一个 cancelCtx，所以它能取消。看下 cancel() 方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 直接调用 cancelCtx 的取消方法</span>    c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从父节点中删除子节点</span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>timer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 关掉定时器，这样，在deadline 到来时，不会再次取消</span>        c<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 timerCtx 的方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>WithTimeout</code> 函数直接调用了 <code>WithDeadline</code>，传入的 deadline 是当前时间加上 <code>timeout</code> 的时间，也就是从现在开始再经过 <code>timeout</code> 时间就算超时。也就是说，<code>WithDeadline</code> 需要用的是绝对时间。重点来看它：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> cur<span class="token punctuation">,</span> ok <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果父节点 context 的 deadline 早于指定时间。直接构建一个可取消的 context。</span>        <span class="token comment" spellcheck="true">// 原因是一旦父节点超时，自动调用 cancel 函数，子节点也会随之取消。</span>        <span class="token comment" spellcheck="true">// 所以不用单独处理子节点的计时器时间到了之后，自动调用 cancel 函数</span>        <span class="token keyword">return</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构建 timerCtx</span>    c <span class="token operator">:=</span> <span class="token operator">&amp;</span>timerCtx<span class="token punctuation">{</span>        cancelCtx<span class="token punctuation">:</span> <span class="token function">newCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>        deadline<span class="token punctuation">:</span>  deadline<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 挂靠到父节点上</span>    <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 计算当前距离 deadline 的时间</span>    d <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span>    <span class="token keyword">if</span> d <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 直接取消</span>        c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// deadline has already passed</span>        <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// d 时间后，timer 会自动调用 cancel 函数。自动取消</span>        c<span class="token punctuation">.</span>timer <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Canceled<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说仍然要把子节点挂靠到父节点，一旦父节点取消了，会把取消信号向下传递到子节点，子节点随之取消。</p><p>有一个特殊情况是，如果要创建的这个子节点的 deadline 比父节点要晚，也就是说如果父节点是时间到自动取消，那么一定会取消这个子节点，导致子节点的 deadline 根本不起作用，因为子节点在 deadline 到来之前就已经被父节点取消了。</p><p>这个函数的最核心的一句是：</p><pre class="line-numbers language-go"><code class="language-go">c<span class="token punctuation">.</span>timer <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> DeadlineExceeded<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>c.timer 会在 d 时间间隔后，自动调用 cancel 函数，并且传入的错误就是 <code>DeadlineExceeded：</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> DeadlineExceeded <span class="token builtin">error</span> <span class="token operator">=</span> deadlineExceededError<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> deadlineExceededError <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>deadlineExceededError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>   <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"context deadline exceeded"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是超时错误。</p><h4 id="valueCtx"><a href="#valueCtx" class="headerlink" title="valueCtx"></a>valueCtx</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Context    key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它实现了两个方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v.WithValue(%#v, %#v)"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">.</span>key<span class="token punctuation">,</span> c<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span>val    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于它直接将 Context 作为匿名字段，因此仅管它只实现了 2 个方法，其他方法继承自父 context。但它仍然是一个 Context，这是 Go 语言的一个特点。</p><p>创建 valueCtx 的函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Context <span class="token punctuation">{</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"nil key"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"key is not comparable"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>valueCtx<span class="token punctuation">{</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对 key 的要求是可比较，因为之后需要通过 key 取出 context 中的值，可比较是必须的。</p><p>通过层层传递 context，最终形成这样一棵树：</p><p><img src="https://user-images.githubusercontent.com/7698088/59154893-5e72c300-8aaf-11e9-9b78-3c34b5e73a45.png" alt=""></p><p>和链表有点像，只是它的方向相反：Context 指向它的父节点，链表则指向下一个节点。通过 WithValue 函数，可以创建层层的 valueCtx，存储 goroutine 间可以共享的变量。</p><p>取值的过程，实际上是一个递归查找的过程：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span>val    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它会顺着链路一直往上找，比较当前节点的 key<br>是否是要找的 key，如果是，则直接返回 value。否则，一直顺着 context 往前，最终找到根节点（一般是 emptyCtx），直接返回一个 nil。所以用 Value 方法的时候要判断结果是否为 nil。</p><p>因为查找方向是往上走的，所以，父节点没法获取子节点存储的值，子节点却可以获取父节点的值。</p><p>WithValue 创建 context 节点的过程实际上就是创建链表节点的过程。两个节点的 key 值是可以相等的，但它们是两个不同的 context 节点。查找的时候，会向上查找到最后一个挂载的 context 节点，也就是离得比较近的一个父节点 context。所以，整体上而言，用 WithValue 构造的其实是一个低效率的链表。</p><p>如果你接手过项目，肯定经历过这样的窘境：在一个处理过程中，有若干子函数、子协程。各种不同的地方会向 context 里塞入各种不同的 k-v 对，最后在某个地方使用。</p><p>你根本就不知道什么时候什么地方传了什么值？这些值会不会被“覆盖”（底层是两个不同的 context 节点，查找的时候，只会返回一个结果）？你肯定会崩溃的。</p><p>而这也是 context.Value 最受争议的地方。很多人建议尽量不要通过 context 传值。</p><h2 id="如何使用-context"><a href="#如何使用-context" class="headerlink" title="如何使用 context"></a>如何使用 context</h2><p>context 使用起来非常方便。源码里对外提供了一个创建根节点 context 的函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Context<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>background 是一个空的 context， 它不能被取消，没有值，也没有超时时间。</p><p>有了根节点 context，又提供了四个函数创建子节点 context：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>context 会在函数传递间传递。只需要在适当的时间调用 cancel 函数向 goroutines 发出取消信号或者调用 Value 函数取出 context 中的值。</p><p>在官方博客里，对于使用 context 提出了几点建议：</p><ul><li>Do not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx.</li><li>Do not pass a nil Context, even if a function permits it. Pass context.TODO if you are unsure about which Context to use.</li><li>Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.</li><li>The same Context may be passed to functions running in different goroutines; Contexts are safe for simultaneous use by multiple goroutines.</li></ul><p>我翻译一下：</p><ul><li>不要将 Context 塞到结构体里。直接将 Context 类型作为函数的第一参数，而且一般都命名为 ctx。</li><li>不要向函数传入一个 nil 的 context，如果你实在不知道传什么，标准库给你准备好了一个 context：todo。</li><li>不要把本应该作为函数参数的类型塞到 context 中，context 存储的应该是一些共同的数据。例如：登陆的 session、cookie 等。</li><li>同一个 context 可能会被传递到多个 goroutine，别担心，context 是并发安全的。</li></ul><h3 id="传递共享的数据"><a href="#传递共享的数据" class="headerlink" title="传递共享的数据"></a>传递共享的数据</h3><p>对于 Web 服务端开发，往往希望将一个请求处理的整个过程串起来，这就非常依赖于 Thread Local（对于 Go 可理解为单个协程所独有） 的变量，而在 Go 语言中并没有这个概念，因此需要在函数调用的时候传递 context。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">process</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    ctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"traceId"</span><span class="token punctuation">,</span> <span class="token string">"qcrao-2019"</span><span class="token punctuation">)</span>    <span class="token function">process</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    traceId<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"traceId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"process over. trace_id=%s\n"</span><span class="token punctuation">,</span> traceId<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"process over. no trace_id\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-go"><code class="language-go">process over<span class="token punctuation">.</span> no trace_idprocess over<span class="token punctuation">.</span> trace_id<span class="token operator">=</span>qcrao<span class="token number">-2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一次调用 process 函数时，ctx 是一个空的 context，自然取不出来 traceId。第二次，通过 WithValue 函数创建了一个 context，并赋上了 traceId 这个 key，自然就能取出来传入的 value 值。</p><p>当然，现实场景中可能是从一个 HTTP 请求中获取到的 Request-ID。所以，下面这个样例可能更适合：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> requestIDKey <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">func</span> <span class="token function">WithRequestID</span><span class="token punctuation">(</span>next http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>        <span class="token keyword">func</span><span class="token punctuation">(</span>rw http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从 header 中提取 request-id</span>            reqID <span class="token operator">:=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Request-ID"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 创建 valueCtx。使用自定义的类型，不容易冲突</span>            ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>                req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestIDKey<span class="token punctuation">,</span> reqID<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 创建新的请求</span>            req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 调用 HTTP 处理函数</span>            next<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> req<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取 request-id</span><span class="token keyword">func</span> <span class="token function">GetRequestID</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>requestIDKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Handle</span><span class="token punctuation">(</span>rw http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿到 reqId，后面可以记录日志等等</span>    reqID <span class="token operator">:=</span> <span class="token function">GetRequestID</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> <span class="token function">WithRequestID</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>Handle<span class="token punctuation">)</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取消-goroutine"><a href="#取消-goroutine" class="headerlink" title="取消 goroutine"></a>取消 goroutine</h3><p>我们先来设想一个场景：打开外卖的订单页，地图上显示外卖小哥的位置，而且是每秒更新 1 次。app 端向后台发起 websocket 连接（现实中可能是轮询）请求后，后台启动一个协程，每隔 1 秒计算 1 次小哥的位置，并发送给端。如果用户退出此页面，则后台需要“取消”此过程，退出 goroutine，系统回收资源。</p><p>后端可能的实现如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token function">calculatePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">sendResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要实现“取消”功能，并且在不了解 context 功能的前提下，可能会这样做：给函数增加一个指针型的 bool 变量，在 for 语句的开始处判断 bool 变量是发由 true 变为 false，如果改变，则退出循环。</p><p>上面给出的简单做法，可以实现想要的效果，没有问题，但是并不优雅，并且一旦协程数量多了之后，并且各种嵌套，就会很麻烦。优雅的做法，自然就要用到 context。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Perform</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token function">calculatePos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">sendResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// 被取消，直接返回</span>            <span class="token keyword">return</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// block 1 秒钟 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主流程可能是这样的：</p><pre class="line-numbers language-go"><code class="language-go">ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">Perform</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ……</span><span class="token comment" spellcheck="true">// app 端返回页面，调用cancel 函数</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意一个细节，WithTimeOut 函数返回的 context 和 cancelFun 是分开的。context 本身并没有取消函数，这样做的原因是取消函数只能由外层函数调用，防止子节点 context 调用取消函数，从而严格控制信息的流向：由父节点 context 流向子节点 context。<br>2</p><p>####防止 goroutine 泄漏<br>前面那个例子里，goroutine 还是会自己执行完，最后返回，只不过会多浪费一些系统资源。这里改编一个“如果不用 context 取消，goroutine 就会泄漏的例子”，来自参考资料：【避免协程泄漏】。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> n <span class="token builtin">int</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            ch <span class="token operator">&lt;-</span> n            n<span class="token operator">++</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ch<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个可以生成无限整数的协程，但如果我只需要它产生的前 5 个数，那么就会发生 goroutine 泄漏：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 n == 5 的时候，直接 break 掉。那么 gen 函数的协程就会执行无限循环，永远不会停下来。发生了 goroutine 泄漏。</p><p>用 context 改进这个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gen</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> n <span class="token builtin">int</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> n<span class="token punctuation">:</span>                n<span class="token operator">++</span>                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ch<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 避免其他地方忘记 cancel，且重复调用不影响</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">gen</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">{</span>            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加一个 context，在 break 前调用 cancel 函数，取消 goroutine。gen 函数在接收到取消信号后，直接退出，系统回收资源。</p><h2 id="context-真的这么好吗"><a href="#context-真的这么好吗" class="headerlink" title="context 真的这么好吗"></a>context 真的这么好吗</h2><p>读完全文，你一定有这种感觉：context 就是为 server 而设计的。说什么处理一个请求，需要启动多个 goroutine 并行地去处理，并且在这些 goroutine 之间还要传递一些共享的数据等等，这些都是写一个 server 要做的事。</p><p>没错，Go 很适合写 server，但它终归是一门通用的语言。你在用 Go 做 Leetcode 上面的题目的时候，肯定不会认为它和一般的语言有什么差别。所以，很多特性好不好，应该从 Go 只是一门普通的语言，很擅长写 server 的角度来看。</p><p>从这个角度来看，context 并没有那么美好。Go 官方建议我们把 Context 作为函数的第一个参数，甚至连名字都准备好了。这造成一个后果：因为我们想控制所有的协程的取消动作，所以需要在几乎所有的函数里加上一个 Context 参数。很快，我们的代码里，context 将像病毒一样扩散的到处都是。</p><p>在参考资料【Go2 应该去掉 context】这篇英文博客里，作者甚至调侃说：如果要把 Go 标准库的大部分函数都加上 context 参数的话，例如下面这样：</p><pre class="line-numbers language-go"><code class="language-go">n<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就给我来一枪吧！</p><p>原文是这样说的：put a bullet in my head, please.我当时看到这句话的时候，会心一笑。这可能就是陶渊明说的：每有会意，便欣然忘食。当然，我是在晚饭会看到这句话的。</p><p>为了表达自己对 context 并没有什么好感，作者接着又说了一句：If you use ctx.Value in my (non-existent) company, you’re fired. 简直太幽默了，哈哈。</p><p>另外，像 WithCancel、WithDeadline、WithTimeout、WithValue 这些创建函数，实际上是创建了一个个的链表结点而已。我们知道，对链表的操作，通常都是 O(n) 复杂度的，效率不高。</p><p>那么，context 包到底解决了什么问题呢？答案是：cancelation。仅管它并不完美，但它确实很简洁地解决了问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里，整个 context 包的内容就全部讲完了。源码非常短，很适合学习，一定要去读一下。</p><p>context 包是 Go 1.7 引入的标准库，主要用于在 goroutine 之间传递取消信号、超时时间、截止时间以及一些共享的值等。它并不是太完美，但几乎成了并发控制和超时控制的标准做法。</p><p>使用上，先创建一个根节点的 context，之后根据库提供的四个函数创建相应功能的子节点 context。由于它是并发安全的，所以可以放心地传递。</p><p>当使用 context 作为函数参数时，直接把它放在第一个参数的位置，并且命名为 ctx。另外，不要把 context 嵌套在自定义的类型里。</p><p>最后，大家下次在看到代码里有用到 context 的，观察下是怎么使用的，肯定逃不出我们讲的几种类型。熟悉之后会发现：context 可能并不完美，但它确实简洁高效地解决了问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【context 官方博客】<a href="https://blog.golang.org/context" target="_blank" rel="noopener">https://blog.golang.org/context</a></p><p>【今日头条构建Go的实践】<a href="https://zhuanlan.zhihu.com/p/26695984" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26695984</a></p><p>【飞雪无情的博客】<a href="https://www.flysnow.org/2017/05/12/go-in-action-go-context.html" target="_blank" rel="noopener">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></p><p>【context 源码】<a href="https://juejin.im/post/5a6873fef265da3e317e55b6" target="_blank" rel="noopener">https://juejin.im/post/5a6873fef265da3e317e55b6</a></p><p>【腾讯云源码阅读】<a href="https://cloud.tencent.com/developer/section/1140703" target="_blank" rel="noopener">https://cloud.tencent.com/developer/section/1140703</a></p><p>【更宏观地一些思考，english】<a href="https://siadat.github.io/post/context" target="_blank" rel="noopener">https://siadat.github.io/post/context</a></p><p>【避免协程泄漏】<a href="https://rakyll.org/leakingctx/" target="_blank" rel="noopener">https://rakyll.org/leakingctx/</a></p><p>【应用分类】<a href="https://dreamerjonson.com/2019/05/09/golang-73-context/index.html" target="_blank" rel="noopener">https://dreamerjonson.com/2019/05/09/golang-73-context/index.html</a></p><p>【官方文档示例翻译版】<a href="https://brantou.github.io/2017/05/19/go-concurrency-patterns-context/" target="_blank" rel="noopener">https://brantou.github.io/2017/05/19/go-concurrency-patterns-context/</a></p><p>【例子，english】<a href="http://p.agnihotry.com/post/understanding_the_context_package_in_golang/" target="_blank" rel="noopener">http://p.agnihotry.com/post/understanding_the_context_package_in_golang/</a></p><p>【Go2 应该去掉 context】<a href="https://faiface.github.io/post/context-should-go-away-go2/" target="_blank" rel="noopener">https://faiface.github.io/post/context-should-go-away-go2/</a></p><p>【源码，比较详细】<a href="https://juejin.im/post/5c1514c86fb9a049b82a5acb" target="_blank" rel="noopener">https://juejin.im/post/5c1514c86fb9a049b82a5acb</a></p><p>【Golang Context 是好的设计吗？】<a href="https://segmentfault.com/a/1190000017394302" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017394302</a></p><p>【今日头条的 Go 实践】<a href="https://36kr.com/p/5073181" target="_blank" rel="noopener">https://36kr.com/p/5073181</a></p><p>【实例】<a href="https://zhuanlan.zhihu.com/p/60180409" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/60180409</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Context </tag>
            
            <tag> Forward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个关于GORM的奇怪问题</title>
      <link href="/golang/a-strange-problem-about-gorm/"/>
      <url>/golang/a-strange-problem-about-gorm/</url>
      
        <content type="html"><![CDATA[<h1 id="一个关于GORM的奇怪问题"><a href="#一个关于GORM的奇怪问题" class="headerlink" title="一个关于GORM的奇怪问题"></a>一个关于GORM的奇怪问题</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一般在些查询的时候都需要一个简单的Filer功能，根据传入的参数做一个系统的筛选</p><ul><li>Code</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//    获取文章分类列表</span><span class="token keyword">func</span> <span class="token function">GetCategoryList</span><span class="token punctuation">(</span>condition <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>mysql<span class="token punctuation">.</span>ArticleCategory <span class="token punctuation">{</span>    category_list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>mysql<span class="token punctuation">.</span>ArticleCategory<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    根据传入的参数先筛选一遍数据</span>    db <span class="token operator">:=</span> <span class="token function">filterArticleCategory</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"blog_article_group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.id, "</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.name,"</span> <span class="token operator">+</span>            <span class="token string">"count(blog_article.id) AS count, "</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.created_at, "</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.updated_at"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"left join blog_article on blog_article_group.id = blog_article.g_id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"blog_article_group.id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>category_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>category_list<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    更具筛选的条件先设置筛选条件</span><span class="token keyword">func</span> <span class="token function">filterArticleCategory</span><span class="token punctuation">(</span>condition <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> condition<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ?"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token operator">+</span>condition<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> db<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h2><ul><li>第一次</li></ul><pre class="line-numbers language-sql"><code class="language-sql">curl http:<span class="token comment" spellcheck="true">//127.0.0.1:9000/article_category</span><span class="token keyword">SELECT</span>    blog_article_group<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span> blog_article<span class="token punctuation">.</span>id <span class="token punctuation">)</span> <span class="token keyword">AS</span> count<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>created_at<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>updated_at <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>blog_article_group<span class="token punctuation">`</span>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> blog_article <span class="token keyword">ON</span> blog_article_group<span class="token punctuation">.</span>id <span class="token operator">=</span> blog_article<span class="token punctuation">.</span>g_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    blog_article_group<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二次</li></ul><pre class="line-numbers language-sql"><code class="language-sql">curl http:<span class="token comment" spellcheck="true">//127.0.0.1:9000/article_category?name=la</span><span class="token keyword">SELECT</span>    blog_article_group<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span> blog_article<span class="token punctuation">.</span>id <span class="token punctuation">)</span> <span class="token keyword">AS</span> count<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>created_at<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>updated_at <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>blog_article_group<span class="token punctuation">`</span>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> blog_article <span class="token keyword">ON</span> blog_article_group<span class="token punctuation">.</span>id <span class="token operator">=</span> blog_article<span class="token punctuation">.</span>g_id <span class="token keyword">WHERE</span>    <span class="token punctuation">(</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%la%'</span> <span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    blog_article_group<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第三次</li></ul><pre class="line-numbers language-sql"><code class="language-sql">curl http:<span class="token comment" spellcheck="true">//127.0.0.1:9000/article_category?name=la</span><span class="token keyword">SELECT</span>    blog_article_group<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span> blog_article<span class="token punctuation">.</span>id <span class="token punctuation">)</span> <span class="token keyword">AS</span> count<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>created_at<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>updated_at <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>blog_article_group<span class="token punctuation">`</span>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> blog_article <span class="token keyword">ON</span> blog_article_group<span class="token punctuation">.</span>id <span class="token operator">=</span> blog_article<span class="token punctuation">.</span>g_id <span class="token keyword">WHERE</span>    <span class="token punctuation">(</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%la%'</span> <span class="token punctuation">)</span>     <span class="token operator">AND</span> <span class="token punctuation">(</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%la%'</span> <span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    blog_article_group<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第四次</li></ul><pre class="line-numbers language-sql"><code class="language-sql">curl http:<span class="token comment" spellcheck="true">//127.0.0.1:9000/article_category?name=la</span><span class="token keyword">SELECT</span>    blog_article_group<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span> blog_article<span class="token punctuation">.</span>id <span class="token punctuation">)</span> <span class="token keyword">AS</span> count<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>created_at<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>updated_at <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>blog_article_group<span class="token punctuation">`</span>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> blog_article <span class="token keyword">ON</span> blog_article_group<span class="token punctuation">.</span>id <span class="token operator">=</span> blog_article<span class="token punctuation">.</span>g_id <span class="token keyword">WHERE</span>    <span class="token punctuation">(</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%la%'</span> <span class="token punctuation">)</span>     <span class="token operator">AND</span> <span class="token punctuation">(</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%la%'</span> <span class="token punctuation">)</span>     <span class="token operator">AND</span> <span class="token punctuation">(</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%la%'</span> <span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    blog_article_group<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><blockquote><p>在多次查询的时候filer函数中的where语句会执行多次，最终导致出现多个AND.</p></blockquote><ul><li>每个请求都是一个goruntime，其中的map也是独立的不会出现冲突</li><li>GORM在版本之后返回的db都是指针，已经做好了全局的连接池管理</li></ul><p>没有看过GORM的源码，初步估计是全局返回的db指针的问题。</p><ul><li><a href="https://gorm.io/docs/method_chaining.html#Method-Chaining" target="_blank" rel="noopener">官方解答</a></li></ul><p>Gorm implements method chaining interface, so you could write code like this:</p><pre class="line-numbers language-go"><code class="language-go">db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"postgres"</span><span class="token punctuation">,</span> <span class="token string">"user=gorm dbname=gorm sslmode=disable"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// create a new relation</span>tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"jinzhu"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// add more filter</span><span class="token keyword">if</span> someCondition <span class="token punctuation">{</span>    tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age = ?"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age = ?"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> yetAnotherCondition <span class="token punctuation">{</span>    tx <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"active = ?"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Query won’t be generated until a immediate method, which could be useful in some cases.</p><p>Like you could extract a wrapper to handle some common logic</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>因为使用了全局的db指针进行查询，但是内部会共享一个Scope导致查询条件重复。官方也给出了方案，就是在操作时需要将全局的db复制一份。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetCategoryList</span><span class="token punctuation">(</span>condition <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>ArticleCategory <span class="token punctuation">{</span>    category_list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ArticleCategory<span class="token punctuation">{</span><span class="token punctuation">}</span>    tx <span class="token operator">:=</span> <span class="token function">filterArticleCategory</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span>    tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"blog_article_group"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.id, "</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.name,"</span> <span class="token operator">+</span>            <span class="token string">"count(blog_article.id) AS count, "</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.created_at, "</span> <span class="token operator">+</span>            <span class="token string">"blog_article_group.updated_at"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Joins</span><span class="token punctuation">(</span><span class="token string">"left join blog_article on blog_article_group.id = blog_article.g_id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"blog_article_group.id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>category_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>category_list<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">filterArticleCategory</span><span class="token punctuation">(</span>condition <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>    tx <span class="token operator">:=</span> db    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> condition<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        tx <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name like ?"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token operator">+</span>condition<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tx<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> GROM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解密Go语言之unsafe</title>
      <link href="/golang/depth-decrypting-the-unsafe-of-the-go-language/"/>
      <url>/golang/depth-decrypting-the-unsafe-of-the-go-language/</url>
      
        <content type="html"><![CDATA[<h1 id="深度解密Go语言之-unsafe"><a href="#深度解密Go语言之-unsafe" class="headerlink" title="深度解密Go语言之 unsafe"></a>深度解密Go语言之 unsafe</h1><p><a href="https://www.cnblogs.com/qcrao-2018/p/10964692.html" target="_blank" rel="noopener">原文地址</a><br><a href="">源码地址</a></p><p>上一篇文章我们详细分析了 map 的底层实现，如果你也跟着阅读了源码，那一定对 unsafe.Pointer 不陌生，map 对 key 进行定位的时候，大量使用。</p><p>unsafe.Pointer 位于 unsafe 包，这篇文章，我们来深入研究 unsafe 包。先说明一下，本文没有之前那么长了，你可以比较轻松地读完，这样的时候不是太多。</p><p>上次发布文章的时候，包括代码超过 5w 字，后台编辑器的体验非常差，一度让我怀疑人生。我之前说过，像 map 那样的长文，估计能读完的不超过 1 %。像下面这几位同学的评价，并不多见。</p><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><p>在正式介绍 unsafe 包之前，需要着重介绍 Go 语言中的指针类型。</p><p>我本科开始学编程的时候，第一门语言就是 C。之后又陆续学过 C++，Java，Python，这些语言都挺强大的，但是没了 C 语言那么“单纯”。直到我开始接触 Go 语言，又找到了那种感觉。Go 语言的作者之一 Ken Thompson 也是 C 语言的作者。所以，Go 可以看作 C 系语言，它的很多特性都和 C 类似，指针就是其中之一。</p><p>然而，Go 语言的指针相比 C 的指针有很多限制。这当然是为了安全考虑，要知道像 Java/Python 这些现代语言，生怕程序员出错，哪有什么指针（这里指的是显式的指针）？更别说像 C/C++ 还需要程序员自己清理“垃圾”。所以对于 Go 来说，有指针已经很不错了，仅管它有很多限制。</p><p>为什么需要指针类型呢？参考文献 go101.org 里举了这样一个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">double</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">+=</span> x<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>    <span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常简单，我想在 double 函数里将 a 翻倍，但是例子中的函数却做不到。为什么？因为 Go 语言的函数传参都是值传递。double 函数里的 x 只是实参 a 的一个拷贝，在函数内部对 x 的操作不能反馈到实参 a。</p><p>如果这时，有一个指针就可以解决问题了！这也是我们常用的“伎俩”。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">double</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token operator">*</span>x    x <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>    <span class="token function">double</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>a    <span class="token function">double</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> p <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12 false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很常规的操作，不用多解释。唯一可能有些疑惑的在这一句：</p><pre class="line-numbers language-go"><code class="language-go">x <span class="token operator">=</span> <span class="token boolean">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这得稍微思考一下，才能得出这一行代码根本不影响的结论。因为是值传递，所以 x 也只是对 &amp;a 的一个拷贝。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">*</span>x <span class="token operator">+=</span> <span class="token operator">*</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一句把 x 指向的值（也就是 &amp;a 指向的值，即变量 a）变为原来的 2 倍。但是对 x 本身（一个指针）的操作却不会影响外层的 a，所以 x = nil 掀不起任何大风大浪。</p><p>下面的这张图可以“自证清白”：</p><p><img src="https://user-images.githubusercontent.com/7698088/58675362-96c72280-8386-11e9-89a6-f37204648b03.png" alt=""></p><p>然而，相比于 C 语言中指针的灵活，Go 的指针多了一些限制。但这也算是 Go 的成功之处：既可以享受指针带来的便利，又避免了指针的危险性。</p><ul><li>限制一：Go 的指针不能进行数学运算。</li></ul><p>来看一个简单的例子：</p><pre class="line-numbers language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">5</span>p <span class="token operator">:=</span> <span class="token operator">&amp;</span>ap<span class="token operator">++</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码将不能通过编译，会报编译错误：invalid operation，也就是说不能对指针做数学运算。</p><ul><li>限制二：不同类型的指针不能相互转换。<br>例如下面这个简短的例子：</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> f <span class="token operator">*</span><span class="token builtin">float64</span>    f <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也会报编译错误：</p><pre class="line-numbers language-go"><code class="language-go">cannot use <span class="token operator">&amp;</span><span class="token function">a</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> as <span class="token keyword">type</span> <span class="token operator">*</span><span class="token builtin">float64</span> in assignment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于两个指针能否相互转换，参考资料中 go 101 相关文章里写得非常细，这里我不想展开。个人认为记住这些没有什么意义，有完美主义的同学可以去阅读原文。当然我也有完美主义，但我有时会克制，嘿嘿。</p><ul><li><p>限制三：不同类型的指针不能使用 == 或 != 比较。<br>只有在两个指针类型相同或者可以相互转换的情况下，才可以对两者进行比较。另外，指针可以通过 == 和 != 直接和 nil 作比较。</p></li><li><p>限制四：不同类型的指针变量不能相互赋值。<br>这一点同限制三。</p></li></ul><h2 id="什么是-unsafe"><a href="#什么是-unsafe" class="headerlink" title="什么是 unsafe"></a>什么是 unsafe</h2><p>前面所说的指针是类型安全的，但它有很多限制。Go 还有非类型安全的指针，这就是 unsafe 包提供的 unsafe.Pointer。在某些情况下，它会使代码更高效，当然，也更危险。</p><p>unsafe 包用于 Go 编译器，在编译阶段使用。从名字就可以看出来，它是不安全的，官方并不建议使用。我在用 unsafe 包的时候会有一种不舒服的感觉，可能这也是语言设计者的意图吧。</p><p>但是高阶的 Gopher，怎么能不会使用 unsafe 包呢？它可以绕过 Go 语言的类型系统，直接操作内存。例如，一般我们不能操作一个结构体的未导出成员，但是通过 unsafe 包就能做到。unsafe 包让我可以直接读写内存，还管你什么导出还是未导出。</p><h2 id="为什么有-unsafe"><a href="#为什么有-unsafe" class="headerlink" title="为什么有 unsafe"></a>为什么有 unsafe</h2><p>Go 语言类型系统是为了安全和效率设计的，有时，安全会导致效率低下。有了 unsafe 包，高阶的程序员就可以利用它绕过类型系统的低效。因此，它就有了存在的意义，阅读 Go 源码，会发现有大量使用 unsafe 包的例子。</p><h2 id="unsafe-实现原理"><a href="#unsafe-实现原理" class="headerlink" title="unsafe 实现原理"></a>unsafe 实现原理</h2><p>我们来看源码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> ArbitraryType <span class="token builtin">int</span><span class="token keyword">type</span> Pointer <span class="token operator">*</span>ArbitraryType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从命名来看，<code>Arbitrary</code> 是任意的意思，也就是说 Pointer 可以指向任意类型，实际上它类似于 C 语言里的 <code>void*</code>。</p><p>unsafe 包还有其他三个函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sizeof</span><span class="token punctuation">(</span>x ArbitraryType<span class="token punctuation">)</span> <span class="token builtin">uintptr</span><span class="token keyword">func</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>x ArbitraryType<span class="token punctuation">)</span> <span class="token builtin">uintptr</span><span class="token keyword">func</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>x ArbitraryType<span class="token punctuation">)</span> <span class="token builtin">uintptr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Sizeof</code> 返回类型 x 所占据的字节数，但不包含 x 所指向的内容的大小。例如，对于一个指针，函数返回的大小为 8 字节（64位机上），一个 slice 的大小则为 slice header 的大小。</p><p><code>Offsetof</code> 返回结构体成员在内存中的位置离结构体起始处的字节数，所传参数必须是结构体的成员。</p><p><code>Alignof</code> 返回 m，m 是指当类型进行内存对齐时，它分配到的内存地址能整除 m。</p><p>注意到以上三个函数返回的结果都是 uintptr 类型，这和 unsafe.Pointer 可以相互转换。三个函数都是在编译期间执行，它们的结果可以直接赋给 const 型变量。另外，因为三个函数执行的结果和操作系统、编译器相关，所以是不可移植的。</p><blockquote><p>综上所述，unsafe 包提供了 2 点重要的能力：</p></blockquote><ul><li>任何类型的指针和 unsafe.Pointer 可以相互转换。</li><li>uintptr 类型和 unsafe.Pointer 可以相互转换。</li></ul><p><img src="https://user-images.githubusercontent.com/7698088/58747453-1dbaee80-849e-11e9-8c75-2459f76792d2.png" alt=""></p><p>pointer 不能直接进行数学运算，但可以把它转换成 uintptr，对 uintptr 类型进行数学运算，再转换成 pointer 类型。</p><pre class="line-numbers language-go"><code class="language-go">pointer 不能直接进行数学运算，但可以把它转换成 <span class="token builtin">uintptr</span>，对 <span class="token builtin">uintptr</span> 类型进行数学运算，再转换成 pointer 类型。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一点要注意的是，uintptr 并没有指针的语义，意思就是 uintptr 所指向的对象会被 gc 无情地回收。而 unsafe.Pointer 有指针语义，可以保护它所指向的对象在“有用”的时候不会被垃圾回收。</p><p>unsafe 包中的几个函数都是在编译期间执行完毕，毕竟，编译器对内存分配这些操作“了然于胸”。在 <code>/usr/local/go/src/cmd/compile/internal/gc/unsafe.go</code> 路径下，可以看到编译期间 Go 对 unsafe 包中函数的处理。</p><p>更深层的原理需要去研究编译器的源码，这里就不去深究了。我们重点关注它的用法，接着往下看</p><h2 id="unsafe-如何使用"><a href="#unsafe-如何使用" class="headerlink" title="unsafe 如何使用"></a>unsafe 如何使用</h2><h3 id="获取-slice-长度"><a href="#获取-slice-长度" class="headerlink" title="获取 slice 长度"></a>获取 slice 长度</h3><p>通过前面关于 slice 的文章，我们知道了 slice header 的结构体定义：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// runtime/slice.go</span><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>    array unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// 元素指针</span>    <span class="token builtin">len</span>   <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 长度 </span>    <span class="token builtin">cap</span>   <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 容量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 make 函数新建一个 slice，底层调用的是 makeslice 函数，返回的是 slice 结构体：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此我们可以通过 unsafe.Pointer 和 uintptr 进行转换，得到 slice 的字段值。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> Len <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Len<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9 9</span>    <span class="token keyword">var</span> Cap <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Cap<span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20 20</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Len，cap 的转换流程如下：</p><pre class="line-numbers language-go"><code class="language-go">Len<span class="token punctuation">:</span> <span class="token operator">&amp;</span>s <span class="token operator">=</span><span class="token operator">></span> pointer <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">uintptr</span> <span class="token operator">=</span><span class="token operator">></span> pointer <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">int</span>Cap<span class="token punctuation">:</span> <span class="token operator">&amp;</span>s <span class="token operator">=</span><span class="token operator">></span> pointer <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">uintptr</span> <span class="token operator">=</span><span class="token operator">></span> pointer <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="获取-map-长度"><a href="#获取-map-长度" class="headerlink" title="获取 map 长度"></a>获取 map 长度</h3><p>再来看一下上篇文章我们讲到的 map：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    count     <span class="token builtin">int</span>    flags     <span class="token builtin">uint8</span>    B         <span class="token builtin">uint8</span>    noverflow <span class="token builtin">uint16</span>    hash0     <span class="token builtin">uint32</span>    buckets    unsafe<span class="token punctuation">.</span>Pointer    oldbuckets unsafe<span class="token punctuation">.</span>Pointer    nevacuate  <span class="token builtin">uintptr</span>    extra <span class="token operator">*</span>mapextra<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 slice 不同的是，makemap 函数返回的是 hmap 的指针，注意是指针：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> hint <span class="token builtin">int64</span><span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> bucket unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token operator">*</span>hmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们依然能通过 unsafe.Pointer 和 uintptr 进行转换，得到 hamp 字段的值，只不过，现在 count 变成二级指针了：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    mp<span class="token punctuation">[</span><span class="token string">"qcrao"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>    mp<span class="token punctuation">[</span><span class="token string">"stefno"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>    count <span class="token operator">:=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2 2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>count 的转换过程：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">&amp;</span>mp <span class="token operator">=</span><span class="token operator">></span> pointer <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">*</span><span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="map-源码中的应用"><a href="#map-源码中的应用" class="headerlink" title="map 源码中的应用"></a>map 源码中的应用</h3><p>在 map 源码中，mapaccess1、mapassign、mapdelete 函数中，需要定位 key 的位置，会先对 key 做哈希运算。</p><p>例如：</p><pre class="line-numbers language-go"><code class="language-go">b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>h.buckets</code> 是一个 <code>unsafe.Pointer</code>，将它转换成 <code>uintptr</code>，然后加上 (<code>hash&amp;m)*uintptr(t.bucketsize)</code>，二者相加的结果再次转换成 <code>unsafe.Pointer</code>，最后，转换成 <code>bmap</code> 指针，得到 <code>key</code> 所落入的 <code>bucket</code> 位置。如果不熟悉这个公式，可以看看上一篇文章，浅显易懂。</p><p>上面举的例子相对简单，来看一个关于赋值的更难一点的例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// store new key/value at insert position</span><span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span>    kmem <span class="token operator">:=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>insertk<span class="token punctuation">)</span> <span class="token operator">=</span> kmem    insertk <span class="token operator">=</span> kmem<span class="token punctuation">}</span><span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectvalue <span class="token punctuation">{</span>    vmem <span class="token operator">:=</span> <span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span> vmem<span class="token punctuation">}</span><span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> insertk<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是在找到了 key 要插入的位置后，进行“赋值”操作。insertk 和 val 分别表示 key 和 value 所要“放置”的地址。如果 t.indirectkey 为真，说明 bucket 中存储的是 key 的指针，因此需要将 insertk 看成指针的指针，这样才能将 bucket 中的相应位置的值设置成指向真实 key 的地址值，也就是说 key 存放的是指针。</p><p>下面这张图展示了设置 key 的全部操作：</p><p><img src="https://user-images.githubusercontent.com/7698088/58756044-c1e67900-8522-11e9-9dda-72ba2a731acf.png" alt=""></p><p>obj 是真实的 key 存放的地方。第 4 号图，obj 表示执行完 typedmemmove 函数后，被成功赋值。</p><h3 id="Offsetof-获取成员偏移量"><a href="#Offsetof-获取成员偏移量" class="headerlink" title="Offsetof 获取成员偏移量"></a>Offsetof 获取成员偏移量</h3><p>对于一个结构体，通过 offset 函数可以获取结构体成员的偏移量，进而获取成员的地址，读写该地址的内存，就可以达到改变成员值的目的。</p><p>这里有一个内存分配相关的事实：结构体会被分配一块连续的内存，结构体的地址也代表了第一个成员的地址。</p><p>我们来看一个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Programmer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    language <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">:=</span> Programmer<span class="token punctuation">{</span><span class="token string">"stefno"</span><span class="token punctuation">,</span> <span class="token string">"go"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    name <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token string">"qcrao"</span>    lang <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> unsafe<span class="token punctuation">.</span><span class="token function">Offsetof</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">*</span>lang <span class="token operator">=</span> <span class="token string">"Golang"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码，输出：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">{</span>stefno <span class="token keyword">go</span><span class="token punctuation">}</span><span class="token punctuation">{</span>qcrao Golang<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>name 是结构体的第一个成员，因此可以直接将 &amp;p 解析成 *string。这一点，在前面获取 map 的 count 成员时，用的是同样的原理。</p><p>对于结构体的私有成员，现在有办法可以通过 unsafe.Pointer 改变它的值了。</p><p>我把 Programmer 结构体升级，多加一个字段：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Programmer <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    language <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且放在其他包，这样在 main 函数中，它的三个字段都是私有成员变量，不能直接修改。但我通过 unsafe.Sizeof() 函数可以获取成员大小，进而计算出成员的地址，直接修改内存。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">:=</span> Programmer<span class="token punctuation">{</span><span class="token string">"stefno"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"go"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    lang <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">*</span>lang <span class="token operator">=</span> <span class="token string">"Golang"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">{</span>stefno <span class="token number">18</span> <span class="token keyword">go</span><span class="token punctuation">}</span><span class="token punctuation">{</span>stefno <span class="token number">18</span> Golang<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="string-和-slice-的相互转换"><a href="#string-和-slice-的相互转换" class="headerlink" title="string 和 slice 的相互转换"></a>string 和 slice 的相互转换</h3><p>这是一个非常精典的例子。实现字符串和 bytes 切片之间的转换，要求是 zero-copy。想一下，一般的做法，都需要遍历字符串或 bytes 切片，再挨个赋值。</p><p>完成这个任务，我们需要了解 slice 和 string 的底层数据结构：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> StringHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Data <span class="token builtin">uintptr</span>    Len  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> SliceHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Data <span class="token builtin">uintptr</span>    Len  <span class="token builtin">int</span>    Cap  <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是反射包下的结构体，路径：src/reflect/value.go。只需要共享底层 []byte 数组就可以实现 zero-copy。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">string2bytes</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    stringHeader <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    bh <span class="token operator">:=</span> reflect<span class="token punctuation">.</span>SliceHeader<span class="token punctuation">{</span>        Data<span class="token punctuation">:</span> stringHeader<span class="token punctuation">.</span>Data<span class="token punctuation">,</span>        Len<span class="token punctuation">:</span>  stringHeader<span class="token punctuation">.</span>Len<span class="token punctuation">,</span>        Cap<span class="token punctuation">:</span>  stringHeader<span class="token punctuation">.</span>Len<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">bytes2string</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>    sliceHeader <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>SliceHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    sh <span class="token operator">:=</span> reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">{</span>        Data<span class="token punctuation">:</span> sliceHeader<span class="token punctuation">.</span>Data<span class="token punctuation">,</span>        Len<span class="token punctuation">:</span>  sliceHeader<span class="token punctuation">.</span>Len<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码比较简单，不作详细解释。通过构造 slice header 和 string header，来完成 string 和 byte slice 之间的转换。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>unsafe 包绕过了 Go 的类型系统，达到直接操作内存的目的，使用它有一定的风险性。但是在某些场景下，使用 unsafe 包提供的函数会提升代码的效率，Go 源码中也是大量使用 unsafe 包。</p><p>unsafe 包定义了 Pointer 和三个函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> ArbitraryType <span class="token builtin">int</span><span class="token keyword">type</span> Pointer <span class="token operator">*</span>ArbitraryType<span class="token keyword">func</span> <span class="token function">Sizeof</span><span class="token punctuation">(</span>x ArbitraryType<span class="token punctuation">)</span> <span class="token builtin">uintptr</span><span class="token keyword">func</span> <span class="token function">Offsetof</span><span class="token punctuation">(</span>x ArbitraryType<span class="token punctuation">)</span> <span class="token builtin">uintptr</span><span class="token keyword">func</span> <span class="token function">Alignof</span><span class="token punctuation">(</span>x ArbitraryType<span class="token punctuation">)</span> <span class="token builtin">uintptr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过三个函数可以获取变量的大小、偏移、对齐等信息。</p><p>uintptr 可以和 unsafe.Pointer 进行相互转换，uintptr 可以进行数学运算。这样，通过 uintptr 和 unsafe.Pointer 的结合就解决了 Go 指针不能进行数学运算的限制。</p><p>通过 unsafe 相关函数，可以获取结构体私有成员的地址，进而对其做进一步的读写操作，突破 Go 的类型安全限制。关于 unsafe 包，我们更多关注它的用法。</p><p>顺便说一句，unsafe 包用多了之后，也不觉得它的名字有多么地不“美观”了。相反，因为使用了官方并不提倡的东西，反而觉得有点酷炫。这就是叛逆的感觉吧。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【飞雪无情的博客】<a href="https://www.flysnow.org/2017/07/06/go-in-action-unsafe-pointer.html" target="_blank" rel="noopener">https://www.flysnow.org/2017/07/06/go-in-action-unsafe-pointer.html</a></p><p>【译文 unsafe包详解】<a href="https://gocn.vip/question/371" target="_blank" rel="noopener">https://gocn.vip/question/371</a></p><p>【官方文档】<a href="https://golang.org/pkg/unsafe/" target="_blank" rel="noopener">https://golang.org/pkg/unsafe/</a></p><p>【例子】<a href="http://www.opscoder.info/golang_unsafe.html" target="_blank" rel="noopener">http://www.opscoder.info/golang_unsafe.html</a></p><p>【煎鱼大佬的博客】<a href="https://segmentfault.com/a/1190000017389782" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017389782</a></p><p>【go语言圣经】<a href="https://www.kancloud.cn/wizardforcel/gopl-zh/106477" target="_blank" rel="noopener">https://www.kancloud.cn/wizardforcel/gopl-zh/106477</a></p><p>【pointer and system calls】<a href="https://blog.gopheracademy.com/advent-2017/unsafe-pointer-and-system-calls/" target="_blank" rel="noopener">https://blog.gopheracademy.com/advent-2017/unsafe-pointer-and-system-calls/</a></p><p>【pointer and uintptr】<a href="https://my.oschina.net/xinxingegeya/blog/729673" target="_blank" rel="noopener">https://my.oschina.net/xinxingegeya/blog/729673</a></p><p>【unsafe.pointer】<a href="https://go101.org/article/unsafe.html" target="_blank" rel="noopener">https://go101.org/article/unsafe.html</a></p><p>【go 指针类型】<a href="https://go101.org/article/pointer.html" target="_blank" rel="noopener">https://go101.org/article/pointer.html</a></p><p>【码洞 快学Go语言 unsafe】<a href="https://juejin.im/post/5c189dce5188256b2e71e79b" target="_blank" rel="noopener">https://juejin.im/post/5c189dce5188256b2e71e79b</a></p><p>【官方文档】<a href="https://golang.org/pkg/unsafe/" target="_blank" rel="noopener">https://golang.org/pkg/unsafe/</a></p><p>【jasper 的小窝】<a href="http://www.opscoder.info/golang_unsafe.html" target="_blank" rel="noopener">http://www.opscoder.info/golang_unsafe.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Forward </tag>
            
            <tag> unsafe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解密Go语言之 map</title>
      <link href="/golang/depth-decrypting-the-map-of-the-go-language/"/>
      <url>/golang/depth-decrypting-the-map-of-the-go-language/</url>
      
        <content type="html"><![CDATA[<h1 id="【转】深度解密Go语言之-map"><a href="#【转】深度解密Go语言之-map" class="headerlink" title="【转】深度解密Go语言之 map"></a>【转】深度解密Go语言之 map</h1><p><a href="https://www.cnblogs.com/qcrao-2018/p/10903807.html" target="_blank" rel="noopener">原文地址</a><br><a href="">源码地址</a></p><p>这篇文章主要讲 map 的赋值、删除、查询、扩容的具体执行过程，仍然是从底层的角度展开。结合源码，看完本文一定会彻底明白 map 底层原理。<br>我要说明的是，这里对 map 的基本用法涉及比较少，我相信可以通过阅读其他入门书籍了解。本文的内容比较深入，但是由于我画了各种图，我相信很容易看懂。</p><h2 id="什么是-map"><a href="#什么是-map" class="headerlink" title="什么是 map"></a>什么是 map</h2><p>维基百科里这样定义 map：</p><blockquote><p>In computer science, an associative array, map, symbol table, or dictionary is an abstract data type composed of a collection of (key, value) pairs, such that each possible key appears at most once in the collection.</p></blockquote><p>简单说明一下：在计算机科学里，被称为相关数组、map、符号表或者字典，是由一组 &lt;key, value&gt; 对组成的抽象数据结构，并且同一个 key 只会出现一次。<br>有两个关键点：map 是由 key-value 对组成的；key 只会出现一次。</p><blockquote><p>和 map 相关的操作主要是：</p></blockquote><ul><li>增加一个 k-v 对 —— Add or insert；</li><li>删除一个 k-v 对 —— Remove or delete；</li><li>修改某个 k 对应的 v —— Reassign；</li><li>查询某个 k 对应的 v —— Lookup；</li></ul><p>简单说就是最基本的 增删查改。</p><p>map 的设计也被称为 “The dictionary problem”，它的任务是设计一种数据结构用来维护一个集合的数据，并且可以同时对集合进行增删查改的操作。最主要的数据结构有两种：哈希查找表<code>（Hash table）</code>、搜索树<code>（Search tree）</code>。</p><p>哈希查找表用一个哈希函数将 key 分配到不同的桶（bucket，也就是数组的不同 index）。这样，开销主要在哈希函数的计算以及数组的常数访问时间。在很多场景下，哈希查找表的性能很高。</p><p>哈希查找表一般会存在“碰撞”的问题，就是说不同的 key 被哈希到了同一个 bucket。一般有两种应对方法：<code>链表法</code>和<code>开放地址法</code>。<code>链表法</code>将一个 bucket 实现成一个链表，落在同一个 bucket 中的 key 都会插入这个链表。<code>开放地址</code>法则是碰撞发生后，通过一定的规律，在数组的后面挑选“空位”，用来放置新的 key。</p><p>搜索树法一般采用自平衡搜索树，包括：AVL 树，红黑树。面试时经常会被问到，甚至被要求手写红黑树代码，很多时候，面试官自己都写不上来，非常过分。</p><p>自平衡搜索树法的最差搜索效率是 O(logN)，而哈希查找表最差是 O(N)。当然，哈希查找表的平均查找效率是 O(1)，如果哈希函数设计的很好，最坏的情况基本不会出现。还有一点，遍历自平衡搜索树，返回的 key 序列，一般会按照从小到大的顺序；而哈希查找表则是乱序的。</p><h2 id="为什么要用-map"><a href="#为什么要用-map" class="headerlink" title="为什么要用 map"></a>为什么要用 map</h2><p>从 Go 语言官方博客摘录一段话：</p><blockquote><p>One of the most useful data structures in computer science is the hash table. Many hash table implementations exist with varying properties, but in general they offer fast lookups, adds, and deletes. Go provides a built-in map type that implements a hash table.</p></blockquote><p>hash table 是计算机数据结构中一个最重要的设计。大部分 hash table 都实现了快速查找、添加、删除的功能。Go 语言内置的 map 实现了上述所有功能。<br>很难想象写一个程序不使用 map，以至于在回答为什么要用 map 这个问题上犯了难。<br>所以，到底为什么要用 map 呢？因为它太强大了，各种增删查改的操作效率非常高。</p><h2 id="map-的底层如何实现"><a href="#map-的底层如何实现" class="headerlink" title="map 的底层如何实现"></a>map 的底层如何实现</h2><p>首先声明我用的 Go 版本：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> version go1<span class="token number">.9</span><span class="token punctuation">.</span><span class="token number">2</span> darwin<span class="token operator">/</span>amd64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面说了 map 实现的几种方案，Go 语言采用的是哈希查找表，并且使用链表解决哈希冲突。<br>接下来我们要探索 map 的核心原理，一窥它的内部结构。</p><h3 id="map-内存模型"><a href="#map-内存模型" class="headerlink" title="map 内存模型"></a>map 内存模型</h3><p>在源码中，表示 map 的结构体是 hmap，它是 hashmap 的“缩写”：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A header for a Go map.</span><span class="token keyword">type</span> hmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 元素个数，调用 len(map) 时，直接返回此值</span>    count     <span class="token builtin">int</span>    flags     <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">// buckets 的对数 log_2</span>    B         <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">// overflow 的 bucket 近似数</span>    noverflow <span class="token builtin">uint16</span>    <span class="token comment" spellcheck="true">// 计算 key 的哈希的时候会传入哈希函数</span>    hash0     <span class="token builtin">uint32</span>    <span class="token comment" spellcheck="true">// 指向 buckets 数组，大小为 2^B</span>    <span class="token comment" spellcheck="true">// 如果元素个数为0，就为 nil</span>    buckets    unsafe<span class="token punctuation">.</span>Pointer    <span class="token comment" spellcheck="true">// 扩容的时候，buckets 长度会是 oldbuckets 的两倍</span>    oldbuckets unsafe<span class="token punctuation">.</span>Pointer    <span class="token comment" spellcheck="true">// 指示扩容进度，小于此地址的 buckets 迁移完成</span>    nevacuate  <span class="token builtin">uintptr</span>    extra <span class="token operator">*</span>mapextra <span class="token comment" spellcheck="true">// optional fields</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明一下，B 是 buckets 数组的长度的对数，也就是说 buckets 数组的长度就是 2^B。bucket 里面存储了 key 和 value，后面会再讲。<br>buckets 是一个指针，最终它指向的是一个结构体：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    tophash <span class="token punctuation">[</span>bucketCnt<span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但这只是表面(src/runtime/hashmap.go)的结构，编译期间会给它加料，动态地创建一个新的结构：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> bmap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    topbits  <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>    keys     <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>keytype    values   <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>valuetype    pad      <span class="token builtin">uintptr</span>    overflow <span class="token builtin">uintptr</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bmap</code> 就是我们常说的“桶”，桶里面会最多装 8 个 key，这些 key 之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的。在桶内，又会根据 key 计算出来的 hash 值的高 8 位来决定 key 到底落入桶内的哪个位置（一个桶内最多有8个位置）。</p><p>来一个整体的图：<br><img src="https://user-images.githubusercontent.com/7698088/57576986-acd87600-749f-11e9-8710-75e423c7efdb.png" alt=""></p><p>当 map 的 key 和 value 都不是指针，并且 size 都小于 128 字节的情况下，会把 bmap 标记为不含指针，这样可以避免 gc 时扫描整个 hmap。但是，我们看 bmap 其实有一个 overflow 的字段，是指针类型的，破坏了 bmap 不含指针的设想，这时会把 overflow 移动到 extra 字段来。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> mapextra <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// overflow[0] contains overflow buckets for hmap.buckets.</span>    <span class="token comment" spellcheck="true">// overflow[1] contains overflow buckets for hmap.oldbuckets.</span>    overflow <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap    <span class="token comment" spellcheck="true">// nextOverflow 包含空闲的 overflow bucket，这是预分配的 bucket</span>    nextOverflow <span class="token operator">*</span>bmap<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bmap 是存放 k-v 的地方，我们把视角拉近，仔细看 bmap 的内部组成。</p><p><img src="https://user-images.githubusercontent.com/7698088/57577391-f88f1d80-74a7-11e9-893c-4783dc4fb35e.png" alt=""></p><p>上图就是 bucket 的内存模型，<code>HOB Hash</code> 指的就是 <code>top hash</code>。 注意到 key 和 value 是各自放在一起的，并不是 <code>key/value/key/value/...</code> 这样的形式。源码里说明这样的好处是在某些情况下可以省略掉 padding 字段，节省内存空间。</p><p>例如，有这样一个类型的 map：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span><span class="token builtin">int8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果按照 <code>key/value/key/value/...</code>这样的模式存储，那在每一个 <code>key/value</code> 对之后都要额外 <code>padding</code> 7 个字节；而将所有的 <code>key</code>，<code>value</code> 分别绑定到一起，这种形式 <code>key/key/.../value/value/...</code>，则只需要在最后添加 <code>padding</code>。</p><p>每个 bucket 设计成最多只能放 8 个 key-value 对，如果有第 9 个 key-value 落入当前的 bucket，那就需要再构建一个 bucket ，通过 overflow 指针连接起来。</p><h3 id="创建-map"><a href="#创建-map" class="headerlink" title="创建 map"></a>创建 map</h3><p>从语法层面上来说，创建 map 很简单：</p><pre class="line-numbers language-go"><code class="language-go">ageMp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 指定 map 长度</span>ageMp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ageMp 为 nil，不能向其添加元素，会直接panic</span><span class="token keyword">var</span> ageMp <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过汇编语言可以看到，实际上底层调用的是 makemap 函数，主要做的工作就是初始化 hmap 结构体的各种字段，例如计算 B 的大小，设置哈希种子 hash0 等等。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makemap</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> hint <span class="token builtin">int64</span><span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> bucket unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token operator">*</span>hmap <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略各种条件检查...</span>    <span class="token comment" spellcheck="true">// 找到一个 B，使得 map 的装载因子在正常范围内</span>    B <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">;</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span> B<span class="token operator">++</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化 hash table</span>    <span class="token comment" spellcheck="true">// 如果 B 等于 0，那么 buckets 就会在赋值的时候再分配</span>    <span class="token comment" spellcheck="true">// 如果长度比较大，分配内存会花费长一点</span>    buckets <span class="token operator">:=</span> bucket    <span class="token keyword">var</span> extra <span class="token operator">*</span>mapextra    <span class="token keyword">if</span> B <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> nextOverflow <span class="token operator">*</span>bmap        buckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> B<span class="token punctuation">)</span>        <span class="token keyword">if</span> nextOverflow <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            extra <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>mapextra<span class="token punctuation">)</span>            extra<span class="token punctuation">.</span>nextOverflow <span class="token operator">=</span> nextOverflow        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化 hamp</span>    <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>hmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">newobject</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>hmap<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    h<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>    h<span class="token punctuation">.</span>B <span class="token operator">=</span> B    h<span class="token punctuation">.</span>extra <span class="token operator">=</span> extra    h<span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span>    h<span class="token punctuation">.</span>hash0 <span class="token operator">=</span> <span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> buckets    h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> <span class="token boolean">nil</span>    h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> <span class="token number">0</span>    h<span class="token punctuation">.</span>noverflow <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> h<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，这个函数返回的结果：<code>*hmap</code>，它是一个指针，而我们之前讲过的 <code>makeslice</code>函数返回的是 <code>Slice</code> 结构体：</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">makeslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回顾一下 slice 的结构体定义：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// runtime/slice.go</span><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>    array unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// 元素指针</span>    <span class="token builtin">len</span>   <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 长度 </span>    <span class="token builtin">cap</span>   <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 容量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体内部包含底层的数据指针。</p><p>makemap 和 makeslice 的区别，带来一个不同点：当 map 和 slice 作为函数参数时，在函数参数内部对 map 的操作会影响 map 自身；而对 slice 却不会（之前讲 slice 的文章里有讲过）。</p><p>主要原因：一个是指针（<code>*hmap</code>），一个是结构体（<code>slice</code>）。Go 语言中的函数传参都是值传递，在函数内部，参数会被 copy 到本地。<code>*hmap</code>指针 copy 完之后，仍然指向同一个 map，因此函数内部对 map 的操作会影响实参。而 slice 被 copy 后，会成为一个新的 slice，对它进行的操作不会影响到实参。</p><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>map 的一个关键点在于，哈希函数的选择。在程序启动时，会检测 cpu 是否支持 aes，如果支持，则使用 aes hash，否则使用 memhash。这是在函数 <code>alginit()</code> 中完成，位于路径：<code>src/runtime/alg.go</code> 下。</p><blockquote><p>hash 函数，有加密型和非加密型。加密型的一般用于加密数据、数字摘要等，典型代表就是 md5、sha1、sha256、aes256 这种；非加密型的一般就是查找。在 map 的应用场景中，用的是查找。选择 hash 函数主要考察的是两点：性能、碰撞概率。</p></blockquote><p>之前我们讲过，表示类型的结构体：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> _type <span class="token keyword">struct</span> <span class="token punctuation">{</span>    size       <span class="token builtin">uintptr</span>    ptrdata    <span class="token builtin">uintptr</span> <span class="token comment" spellcheck="true">// size of memory prefix holding all pointers</span>    hash       <span class="token builtin">uint32</span>    tflag      tflag    align      <span class="token builtin">uint8</span>    fieldalign <span class="token builtin">uint8</span>    kind       <span class="token builtin">uint8</span>    alg        <span class="token operator">*</span>typeAlg    gcdata    <span class="token operator">*</span><span class="token builtin">byte</span>    str       nameOff    ptrToThis typeOff<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>alg</code>字段就和哈希相关，它是指向如下结构体的指针：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// src/runtime/alg.go</span><span class="token keyword">type</span> typeAlg <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// (ptr to object, seed) -> hash</span>    hash <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span>    <span class="token comment" spellcheck="true">// (ptr to object A, ptr to object B) -> ==?</span>    equal <span class="token keyword">func</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>typeAlg 包含两个函数，hash 函数计算类型的哈希值，而 equal 函数则计算两个类型是否“哈希相等”。</p><p>对于 string 类型，它的 hash、equal 函数如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">strhash</span><span class="token punctuation">(</span>a unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> h <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span> <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>stringStruct<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">memhash</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>str<span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">strequal</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 key 的类型，_type 结构体的 alg 字段会被设置对应类型的 hash 和 equal 函数。</p><h3 id="key-定位过程"><a href="#key-定位过程" class="headerlink" title="key 定位过程"></a>key 定位过程</h3><p>key 经过哈希计算后得到哈希值，共 64 个 bit 位（64位机，32位机就不讨论了，现在主流都是64位机），计算它到底要落在哪个桶时，只会用到最后 B 个 bit 位。还记得前面提到过的 B 吗？如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32。</p><p>例如，现在有一个 key 经过哈希函数计算后，得到的哈希结果是：</p><pre class="line-numbers language-go"><code class="language-go"> <span class="token number">10010111</span> <span class="token operator">|</span> <span class="token number">000011110110110010001111001010100010010110010101010</span> │ <span class="token number">01010</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用最后的 5 个 bit 位，也就是 01010，值为 10，也就是 10 号桶。这个操作实际上就是取余操作，但是取余开销太大，所以代码实现上用的位操作代替。</p><p>再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位，放入。</p><p>buckets 编号就是桶编号，当两个不同的 key 落在同一个桶中，也就是发生了哈希冲突。冲突的解决手段是用链表法：在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key。</p><p>这里参考曹大 github 博客里的一张图，原图是 ascii 图，geek 味十足，可以从参考资料找到曹大的博客，推荐大家去看看。</p><p><img src="https://user-images.githubusercontent.com/7698088/57577721-faf57580-74af-11e9-8826-aacdb34a1d2b.png" alt=""></p><p>上图中，假定 B = 5，所以 bucket 总数就是 2^5 = 32。首先计算出待查找 key 的哈希，使用低 5 位 <code>00110</code>，找到对应的 6 号 bucket，使用高 8 位 <code>10010111</code>，对应十进制 151，在 6 号 bucket 中寻找 tophash 值（HOB hash）为 151 的 key，找到了 2 号槽位，这样整个查找过程就结束了。</p><p>如果在 bucket 中没找到，并且 overflow 不为空，还要继续去 overflow bucket 中寻找，直到找到或是所有的 key 槽位都找遍了，包括所有的 overflow bucket。</p><p>我们来看下源码吧，哈哈！通过汇编语言可以看到，查找某个 key 的底层函数是 <code>mapacess</code> 系列函数，函数的作用类似，区别在下一节会讲到。这里我们直接看 <code>mapacess1</code> 函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ……</span>    <span class="token comment" spellcheck="true">// 如果 h 什么都没有，返回零值</span>    <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 写和读冲突</span>    <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>hashWriting <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"concurrent map read and map write"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不同类型 key 使用的 hash 算法在编译期确定</span>    alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg    <span class="token comment" spellcheck="true">// 计算哈希值，并且加入 hash0 引入随机性</span>    hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 比如 B=5，那 m 就是31，二进制是全 1</span>    <span class="token comment" spellcheck="true">// 求 bucket num 时，将 hash 与 m 相与，</span>    <span class="token comment" spellcheck="true">// 达到 bucket num 由 hash 的低 8 位决定的效果</span>    m <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>h<span class="token punctuation">.</span>B <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// b 就是 bucket 的地址</span>    b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// oldbuckets 不为 nil，说明发生了扩容</span>    <span class="token keyword">if</span> c <span class="token operator">:=</span> h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果不是同 size 扩容（看后面扩容的内容）</span>        <span class="token comment" spellcheck="true">// 对应条件 1 的解决方案</span>        <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 新 bucket 数量是老的 2 倍</span>            m <span class="token operator">>>=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 求出 key 在老的 map 中的 bucket 位置</span>        oldb <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>hash<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 如果 oldb 没有搬迁到新的 bucket</span>        <span class="token comment" spellcheck="true">// 那就在老的 bucket 中寻找</span>        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>oldb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            b <span class="token operator">=</span> oldb        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算出高 8 位的 hash</span>    <span class="token comment" spellcheck="true">// 相当于右移 56 位，只取高8位</span>    top <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>hash <span class="token operator">>></span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>PtrSize<span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 增加一个 minTopHash</span>    <span class="token keyword">if</span> top <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">{</span>        top <span class="token operator">+=</span> minTopHash    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历 8 个 bucket</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// tophash 不匹配，继续</span>            <span class="token keyword">if</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> top <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// tophash 匹配，定位到 key 的位置</span>            k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// key 是指针</span>            <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解引用</span>                k <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果 key 相等</span>            <span class="token keyword">if</span> alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 定位到 value 的位置</span>                v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// value 解引用</span>                <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectvalue <span class="token punctuation">{</span>                    v <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> v            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// bucket 找完（还没找到），继续到 overflow bucket 里找</span>        b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// overflow bucket 也找完了，说明没有目标 key</span>        <span class="token comment" spellcheck="true">// 返回零值</span>        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zeroVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数返回 h[key] 的指针，如果 h 中没有此 key，那就会返回一个 key 相应类型的零值，不会返回 nil。<br>代码整体比较直接，没什么难懂的地方。跟着上面的注释一步步理解就好了。<br>这里，说一下定位 key 和 value 的方法以及整个循环的写法。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// key 定位公式</span>k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// value 定位公式</span>v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token operator">+</span>bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b 是 bmap 的地址，这里 bmap 还是源码里定义的结构体，只包含一个 tophash 数组，经编译器扩充之后的结构体才包含 key，value，overflow 这些字段。dataOffset 是 key 相对于 bmap 起始地址的偏移：</p><pre class="line-numbers language-go"><code class="language-go">b 是 bmap 的地址，这里 bmap 还是源码里定义的结构体，只包含一个 tophash 数组，经编译器扩充之后的结构体才包含 key，value，overflow 这些字段。dataOffset 是 key 相对于 bmap 起始地址的偏移：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此 bucket 里 key 的起始地址就是 unsafe.Pointer(b)+dataOffset。第 i 个 key 的地址就要在此基础上跨过 i 个 key 的大小；而我们又知道，value 的地址是在所有 key 之后，因此第 i 个 value 的地址还需要加上所有 key 的偏移。理解了这些，上面 key 和 value 的定位公式就很好理解了。</p><p>再说整个大循环的写法，最外层是一个无限循环，通过</p><pre class="line-numbers language-go"><code class="language-go">b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遍历所有的 bucket，这相当于是一个 bucket 链表。</p><p>当定位到一个具体的 bucket 时，里层循环就是遍历这个 bucket 里所有的 cell，或者说所有的槽位，也就是 bucketCnt=8 个槽位。整个循环过程：<br><img src="https://user-images.githubusercontent.com/7698088/57581783-fe5c2180-74ee-11e9-99c9-5a226216e1af.png" alt=""></p><p>再说一下 minTopHash，当一个 cell 的 tophash 值小于 minTopHash 时，标志这个 cell 的迁移状态。因为这个状态值是放在 tophash 数组里，为了和正常的哈希值区分开，会给 key 计算出来的哈希值一个增量：minTopHash。这样就能区分正常的 top hash 值和表示状态的哈希值。</p><p>下面的这几种状态就表征了 bucket 的情况：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 空的 cell，也是初始时 bucket 的状态</span>empty          <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 空的 cell，表示 cell 已经被迁移到新的 bucket</span>evacuatedEmpty <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// key,value 已经搬迁完毕，但是 key 都在新 bucket 前半部分，</span><span class="token comment" spellcheck="true">// 后面扩容部分会再讲到。</span>evacuatedX     <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 同上，key 在后半部分</span>evacuatedY     <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">// tophash 的最小正常值</span>minTopHash     <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码里判断这个 bucket 是否已经搬迁完毕，用到的函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">evacuated</span><span class="token punctuation">(</span>b <span class="token operator">*</span>bmap<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    h <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> h <span class="token operator">></span> empty <span class="token operator">&amp;&amp;</span> h <span class="token operator">&lt;</span> minTopHash<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只取了 tophash 数组的第一个值，判断它是否在 0-4 之间。对比上面的常量，当 top hash 是 evacuatedEmpty、evacuatedX、evacuatedY 这三个值之一，说明此 bucket 中的 key 全部被搬迁到了新 bucket。</p><h3 id="map-的两种-get-操作"><a href="#map-的两种-get-操作" class="headerlink" title="map 的两种 get 操作"></a>map 的两种 get 操作</h3><p>Go 语言中读取 map 有两种语法：带 comma 和 不带 comma。当要查询的 key 不在 map 里，带 comma 的用法会返回一个 bool 型变量提示 key 是否在 map 中；而不带 comma 的语句则会返回一个 value 类型的零值。如果 value 是 int 型就会返回 0，如果 value 是 string 类型，就会返回空字符串。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ageMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    ageMap<span class="token punctuation">[</span><span class="token string">"qcrao"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment" spellcheck="true">// 不带 comma 用法</span>    age1 <span class="token operator">:=</span> ageMap<span class="token punctuation">[</span><span class="token string">"stefno"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 带 comma 用法</span>    age2<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ageMap<span class="token punctuation">[</span><span class="token string">"stefno"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age2<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">0</span><span class="token number">0</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以前一直觉得好神奇，怎么实现的？这其实是编译器在背后做的工作：分析代码后，将两种语法对应到底层两个不同的函数。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// src/runtime/hashmap.go</span><span class="token keyword">func</span> <span class="token function">mapaccess1</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token keyword">func</span> <span class="token function">mapaccess2</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>源码里，函数命名不拘小节，直接带上后缀 1，2，完全不理会《代码大全》里的那一套命名的做法。从上面两个函数的声明也可以看出差别了，<code>mapaccess2</code> 函数返回值多了一个 bool 型变量，两者的代码也是完全一样的，只是在返回值后面多加了一个 false 或者 true。</p><p>另外，根据 key 的不同类型，编译器还会将查找、插入、删除的函数用更具体的函数替换，以优化效率：</p><pre class="line-numbers language-go"><code class="language-go">key 类型    查找<span class="token builtin">uint32</span>    <span class="token function">mapaccess1_fast32</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint32</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token builtin">uint32</span>    <span class="token function">mapaccess2_fast32</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token builtin">uint64</span>    <span class="token function">mapaccess1_fast64</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint64</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token builtin">uint64</span>    <span class="token function">mapaccess2_fast64</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token builtin">string</span>    <span class="token function">mapaccess1_faststr</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> ky <span class="token builtin">string</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token builtin">string</span>    <span class="token function">mapaccess2_faststr</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> ky <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些函数的参数类型直接是具体的 uint32、unt64、string，在函数内部由于提前知晓了 key 的类型，所以内存布局是很清楚的，因此能节省很多操作，提高效率。</p><p>上面这些函数都是在文件 <code>src/runtime/hashmap_fast.go</code> 里。</p><h3 id="如何进行扩容"><a href="#如何进行扩容" class="headerlink" title="如何进行扩容"></a>如何进行扩容</h3><p>使用哈希表的目的就是要快速查找到目标 key，然而，随着向 map 中添加的 key 越来越多，key 发生碰撞的概率也越来越大。bucket 中的 8 个 cell 会被逐渐塞满，查找、插入、删除 key 的效率也会越来越低。最理想的情况是一个 bucket 只装一个 key，这样，就能达到 O(1) 的效率，但这样空间消耗太大，用空间换时间的代价太高。<br>Go 语言采用一个 bucket 里装载 8 个 key，定位到某个 bucket 后，还需要再定位到具体的 key，这实际上又用了时间换空间。<br>当然，这样做，要有一个度，不然所有的 key 都落在了同一个 bucket 里，直接退化成了链表，各种操作的效率直接降为 O(n)，是不行的。<br>因此，需要有一个指标来衡量前面描述的情况，这就是装载因子。Go 源码里这样定义 装载因子：</p><pre class="line-numbers language-go"><code class="language-go">loadFactor <span class="token operator">:=</span> count <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>count 就是 map 的元素个数，2^B 表示 bucket 数量。</p><p>再来说触发 map 扩容的时机：在向 map 插入新 key 的时候，会进行条件检测，符合下面这 2 个条件，就会触发扩容：</p><ul><li>装载因子超过阈值，源码里定义的阈值是 6.5。</li><li>overflow 的 bucket 数量过多：当 B 小于 15，也就是 bucket 总数 2^B 小于 2^15 时，如果 overflow 的 bucket 数量超过 2^B；当 B &gt;= 15，也就是 bucket 总数 2^B 大于等于 2^15，如果 overflow 的 bucket 数量超过 2^15。</li></ul><p>通过汇编语言可以找到赋值操作对应源码中的函数是 mapassign，对应扩容条件的源码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// src/runtime/hashmap.go/mapassign</span><span class="token comment" spellcheck="true">// 触发扩容时机</span><span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>noverflow<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">hashGrow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 装载因子超过 6.5</span><span class="token keyword">func</span> <span class="token function">overLoadFactor</span><span class="token punctuation">(</span>count <span class="token builtin">int64</span><span class="token punctuation">,</span> B <span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> count <span class="token operator">>=</span> bucketCnt <span class="token operator">&amp;&amp;</span> <span class="token function">float32</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">>=</span> loadFactor<span class="token operator">*</span><span class="token function">float32</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// overflow buckets 太多</span><span class="token keyword">func</span> <span class="token function">tooManyOverflowBuckets</span><span class="token punctuation">(</span>noverflow <span class="token builtin">uint16</span><span class="token punctuation">,</span> B <span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> B <span class="token operator">&lt;</span> <span class="token number">16</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> noverflow <span class="token operator">>=</span> <span class="token function">uint16</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>B    <span class="token punctuation">}</span>    <span class="token keyword">return</span> noverflow <span class="token operator">>=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">15</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释一下：</p><p>第 1 点：我们知道，每个 bucket 有 8 个空位，在没有溢出，且所有的桶都装满了的情况下，装载因子算出来的结果是 8。因此当装载因子超过 6.5 时，表明很多 bucket 都快要装满了，查找效率和插入效率都变低了。在这个时候进行扩容是有必要的。</p><p>第 2 点：是对第 1 点的补充。就是说在装载因子比较小的情况下，这时候 map 的查找和插入效率也很低，而第 1 点识别不出来这种情况。表面现象就是计算装载因子的分子比较小，即 map 里元素总数少，但是 bucket 数量多（真实分配的 bucket 数量多，包括大量的 overflow bucket）。</p><p>不难想像造成这种情况的原因：不停地插入、删除元素。先插入很多元素，导致创建了很多 bucket，但是装载因子达不到第 1 点的临界值，未触发扩容来缓解这种情况。之后，删除元素降低元素总数量，再插入很多元素，导致创建很多的 overflow bucket，但就是不会触犯第 1 点的规定，你能拿我怎么办？overflow bucket 数量太多，导致 key 会很分散，查找插入效率低得吓人，因此出台第 2 点规定。这就像是一座空城，房子很多，但是住户很少，都分散了，找起人来很困难。</p><p>对于命中条件 1，2 的限制，都会发生扩容。但是扩容的策略并不相同，毕竟两种条件应对的场景不同。</p><p>对于条件 1，元素太多，而 bucket 数量太少，很简单：将 B 加 1，bucket 最大数量（2^B）直接变成原来 bucket 数量的 2 倍。于是，就有新老 bucket 了。注意，这时候元素都在老 bucket 里，还没迁移到新的 bucket 来。而且，新 bucket 只是最大数量变为原来最大数量（2^B）的 2 倍（2^B * 2）。</p><p>对于条件 2，其实元素没那么多，但是 overflow bucket 数特别多，说明很多 bucket 都没装满。解决办法就是开辟一个新 bucket 空间，将老 bucket 中的元素移动到新 bucket，使得同一个 bucket 中的 key 排列地更紧密。这样，原来，在 overflow bucket 中的 key 可以移动到 bucket 中来。结果是节省空间，提高 bucket 利用率，map 的查找和插入效率自然就会提升。</p><p>对于条件 2 的解决方案，曹大的博客里还提出了一个极端的情况：如果插入 map 的 key 哈希都一样，就会落到同一个 bucket 里，超过 8 个就会产生 overflow bucket，结果也会造成 overflow bucket 数过多。移动元素其实解决不了问题，因为这时整个哈希表已经退化成了一个链表，操作效率变成了 <code>O(n)</code>。</p><p>再来看一下扩容具体是怎么做的。由于 map 扩容需要将原有的 key/value 重新搬迁到新的内存地址，如果有大量的 key/value 需要搬迁，会非常影响性能。因此 Go map 的扩容采取了一种称为“渐进式”地方式，原有的 key 并不会一次性搬迁完毕，每次最多只会搬迁 2 个 bucket。</p><p>上面说的 <code>hashGrow()</code> 函数实际上并没有真正地“搬迁”，它只是分配好了新的 buckets，并将老的 buckets 挂到了 oldbuckets 字段上。真正搬迁 <code>buckets</code> 的动作在 <code>growWork()</code> 函数中，而调用 growWork() 函数的动作是在 mapassign 和 mapdelete 函数中。也就是插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作。先检查 oldbuckets 是否搬迁完毕，具体来说就是检查 oldbuckets 是否为 nil。</p><p>我们先看 <code>hashGrow()</code> 函数所做的工作，再来看具体的搬迁 buckets 是如何进行的。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">hashGrow</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// B+1 相当于是原来 2 倍的空间</span>    bigger <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 对应条件 2</span>    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">overLoadFactor</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 进行等量的内存扩容，所以 B 不变</span>        bigger <span class="token operator">=</span> <span class="token number">0</span>        h<span class="token punctuation">.</span>flags <span class="token operator">|=</span> sameSizeGrow    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将老 buckets 挂到 buckets 上</span>    oldbuckets <span class="token operator">:=</span> h<span class="token punctuation">.</span>buckets    <span class="token comment" spellcheck="true">// 申请新的 buckets 空间</span>    newbuckets<span class="token punctuation">,</span> nextOverflow <span class="token operator">:=</span> <span class="token function">makeBucketArray</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">.</span>B<span class="token operator">+</span>bigger<span class="token punctuation">)</span>    flags <span class="token operator">:=</span> h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^</span> <span class="token punctuation">(</span>iterator <span class="token operator">|</span> oldIterator<span class="token punctuation">)</span>    <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>iterator <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        flags <span class="token operator">|=</span> oldIterator    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 提交 grow 的动作</span>    h<span class="token punctuation">.</span>B <span class="token operator">+=</span> bigger    h<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags    h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> oldbuckets    h<span class="token punctuation">.</span>buckets <span class="token operator">=</span> newbuckets    <span class="token comment" spellcheck="true">// 搬迁进度为 0</span>    h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// overflow buckets 数为 0</span>    h<span class="token punctuation">.</span>noverflow <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要是申请到了新的 buckets 空间，把相关的标志位都进行了处理：例如标志 nevacuate 被置为 0， 表示当前搬迁进度为 0。</p><p>值得一说的是对 <code>h.flags</code> 的处理：</p><pre class="line-numbers language-go"><code class="language-go">flags <span class="token operator">:=</span> h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^</span> <span class="token punctuation">(</span>iterator <span class="token operator">|</span> oldIterator<span class="token punctuation">)</span><span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>iterator <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>    flags <span class="token operator">|=</span> oldIterator<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里得先说下运算符：&amp;^。这叫<code>按位置0</code>运算符。例如：</p><pre class="line-numbers language-go"><code class="language-go">x <span class="token operator">=</span> <span class="token number">01010011</span>y <span class="token operator">=</span> <span class="token number">01010100</span>z <span class="token operator">=</span> x <span class="token operator">&amp;^</span> y <span class="token operator">=</span> <span class="token number">00000011</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果 y bit 位为 1，那么结果 z 对应 bit 位就为 0，否则 z 对应 bit 位就和 x 对应 bit 位的值相同。</p><p>所以上面那段对 flags 一顿操作的代码的意思是：先把 h.flags 中 iterator 和 oldIterator 对应位清 0，然后如果发现 iterator 位为 1，那就把它转接到 oldIterator 位，使得 oldIterator 标志位变成 1。潜台词就是：buckets 现在挂到了 oldBuckets 名下了，对应的标志位也转接过去吧。</p><p>几个标志位如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">/</span> 可能有迭代器使用 bucketsiterator     <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 可能有迭代器使用 oldbuckets</span>oldIterator  <span class="token operator">=</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 有协程正在向 map 中写入 key</span>hashWriting  <span class="token operator">=</span> <span class="token number">4</span><span class="token comment" spellcheck="true">// 等量扩容（对应条件 2）</span>sameSizeGrow <span class="token operator">=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来看看真正执行搬迁工作的 growWork() 函数。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">growWork</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> bucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 确认搬迁老的 bucket 对应正在使用的 bucket</span>    <span class="token function">evacuate</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bucket<span class="token operator">&amp;</span>h<span class="token punctuation">.</span><span class="token function">oldbucketmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 再搬迁一个 bucket，以加快搬迁进程</span>    <span class="token keyword">if</span> h<span class="token punctuation">.</span><span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">evacuate</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>nevacuate<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>h.growing() 函数非常简单：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>hmap<span class="token punctuation">)</span> <span class="token function">growing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> h<span class="token punctuation">.</span>oldbuckets <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果 <code>oldbuckets</code>不为空，说明还没有搬迁完毕，还得继续搬。</p><p><code>bucket&amp;h.oldbucketmask()</code> 这行代码，如源码注释里说的，是为了确认搬迁的 bucket 是我们正在使用的 bucket。<code>oldbucketmask()</code> 函数返回扩容前的 map 的 bucketmask。</p><p>所谓的 bucketmask，作用就是将 key 计算出来的哈希值与 bucketmask 相与，得到的结果就是 key 应该落入的桶。比如 B = 5，那么 bucketmask 的低 5 位是 <code>11111</code>，其余位是 <code>0</code>，hash 值与其相与的意思是，只有 hash 值的低 5 位决策 key 到底落入哪个 bucket。</p><p>接下来，我们集中所有的精力在搬迁的关键函数 evacuate。源码贴在下面，不要紧张，我会加上大面积的注释，通过注释绝对是能看懂的。之后，我会再对搬迁过程作详细说明。</p><p>源码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">evacuate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> oldbucket <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定位老的 bucket 地址</span>    b <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 结果是 2^B，如 B = 5，结果为32</span>    newbit <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">noldbuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// key 的哈希函数</span>    alg <span class="token operator">:=</span> t<span class="token punctuation">.</span>key<span class="token punctuation">.</span>alg    <span class="token comment" spellcheck="true">// 如果 b 没有被搬迁过</span>    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">evacuated</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">// 表示bucket 移动的目标地址</span>            x<span class="token punctuation">,</span> y   <span class="token operator">*</span>bmap            <span class="token comment" spellcheck="true">// 指向 x,y 中的 key/val</span>            xi<span class="token punctuation">,</span> yi <span class="token builtin">int</span>            <span class="token comment" spellcheck="true">// 指向 x，y 中的 key</span>            xk<span class="token punctuation">,</span> yk unsafe<span class="token punctuation">.</span>Pointer            <span class="token comment" spellcheck="true">// 指向 x，y 中的 value</span>            xv<span class="token punctuation">,</span> yv unsafe<span class="token punctuation">.</span>Pointer        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 默认是等 size 扩容，前后 bucket 序号不变</span>        <span class="token comment" spellcheck="true">// 使用 x 来进行搬迁</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        xi <span class="token operator">=</span> <span class="token number">0</span>        xk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>        xv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>、        <span class="token comment" spellcheck="true">// 如果不是等 size 扩容，前后 bucket 序号有变</span>        <span class="token comment" spellcheck="true">// 使用 y 来进行搬迁</span>        <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// y 代表的 bucket 序号增加了 2^B</span>            y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>buckets<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldbucket<span class="token operator">+</span>newbit<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            yi <span class="token operator">=</span> <span class="token number">0</span>            yk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>            yv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>yk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历所有的 bucket，包括 overflow buckets</span>        <span class="token comment" spellcheck="true">// b 是老的 bucket 地址</span>        <span class="token keyword">for</span> <span class="token punctuation">;</span> b <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">overflow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>            v <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 遍历 bucket 中的所有 cell</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucketCnt<span class="token punctuation">;</span> i<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前 cell 的 top hash 值</span>                top <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">// 如果 cell 为空，即没有 key</span>                <span class="token keyword">if</span> top <span class="token operator">==</span> empty <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 那就标志它被"搬迁"过</span>                    b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> evacuatedEmpty                    <span class="token comment" spellcheck="true">// 继续下个 cell</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 正常不会出现这种情况</span>                <span class="token comment" spellcheck="true">// 未被搬迁的 cell 只可能是 empty 或是</span>                <span class="token comment" spellcheck="true">// 正常的 top hash（大于 minTopHash）</span>                <span class="token keyword">if</span> top <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">{</span>                    <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"bad map state"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                k2 <span class="token operator">:=</span> k                <span class="token comment" spellcheck="true">// 如果 key 是指针，则解引用</span>                <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span>                    k2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 默认使用 X，等量扩容</span>                useX <span class="token operator">:=</span> <span class="token boolean">true</span>                <span class="token comment" spellcheck="true">// 如果不是等量扩容</span>                <span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">sameSizeGrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 计算 hash 值，和 key 第一次写入时一样</span>                    hash <span class="token operator">:=</span> alg<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hash0<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 如果有协程正在遍历 map</span>                    <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>iterator <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果出现 相同的 key 值，算出来的 hash 值不同</span>                        <span class="token keyword">if</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>reflexivekey <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alg<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 只有在 float 变量的 NaN() 情况下会出现</span>                            <span class="token keyword">if</span> top<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 第 B 位置 1</span>                                hash <span class="token operator">|=</span> newbit                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 第 B 位置 0</span>                                hash <span class="token operator">&amp;^=</span> newbit                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">// 取高 8 位作为 top hash 值</span>                            top <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>hash <span class="token operator">>></span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>PtrSize<span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> top <span class="token operator">&lt;</span> minTopHash <span class="token punctuation">{</span>                                top <span class="token operator">+=</span> minTopHash                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 取决于新哈希值的 oldB+1 位是 0 还是 1</span>                    <span class="token comment" spellcheck="true">// 详细看后面的文章</span>                    useX <span class="token operator">=</span> hash<span class="token operator">&amp;</span>newbit <span class="token operator">==</span> <span class="token number">0</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果 key 搬到 X 部分</span>                <span class="token keyword">if</span> useX <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 标志老的 cell 的 top hash 值，表示搬移到 X 部分</span>                    b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> evacuatedX                    <span class="token comment" spellcheck="true">// 如果 xi 等于 8，说明要溢出了</span>                    <span class="token keyword">if</span> xi <span class="token operator">==</span> bucketCnt <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 新建一个 bucket</span>                        newx <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">newoverflow</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> x<span class="token punctuation">)</span>                        x <span class="token operator">=</span> newx                        <span class="token comment" spellcheck="true">// xi 从 0 开始计数</span>                        xi <span class="token operator">=</span> <span class="token number">0</span>                        <span class="token comment" spellcheck="true">// xk 表示 key 要移动到的位置</span>                        xk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// xv 表示 value 要移动到的位置</span>                        xv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xk<span class="token punctuation">,</span> bucketCnt<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 设置 top hash 值</span>                    x<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span>xi<span class="token punctuation">]</span> <span class="token operator">=</span> top                    <span class="token comment" spellcheck="true">// key 是指针</span>                    <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 将原 key（是指针）复制到新位置</span>                        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>xk<span class="token punctuation">)</span> <span class="token operator">=</span> k2 <span class="token comment" spellcheck="true">// copy pointer</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 将原 key（是值）复制到新位置</span>                        <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> xk<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// copy value</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// value 是指针，操作同 key</span>                    <span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectvalue <span class="token punctuation">{</span>                        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>xv<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">typedmemmove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> xv<span class="token punctuation">,</span> v<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 定位到下一个 cell</span>                    xi<span class="token operator">++</span>                    xk <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xk<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>keysize<span class="token punctuation">)</span><span class="token punctuation">)</span>                    xv <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>xv<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>valuesize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// key 搬到 Y 部分，操作同 X 部分</span>                    <span class="token comment" spellcheck="true">// ……</span>                    <span class="token comment" spellcheck="true">// 省略了这部分，操作和 X 部分相同</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果没有协程在使用老的 buckets，就把老 buckets 清除掉，帮助gc</span>        <span class="token keyword">if</span> h<span class="token punctuation">.</span>flags<span class="token operator">&amp;</span>oldIterator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>bmap<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>oldbuckets<span class="token punctuation">,</span> oldbucket<span class="token operator">*</span><span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 只清除bucket 的 key,value 部分，保留 top hash 部分，指示搬迁状态</span>            <span class="token keyword">if</span> t<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>kind<span class="token operator">&amp;</span>kindNoPointers <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token function">memclrHasPointers</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token operator">-</span>dataOffset<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">memclrNoHeapPointers</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> dataOffset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>bucketsize<span class="token punctuation">)</span><span class="token operator">-</span>dataOffset<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新搬迁进度</span>    <span class="token comment" spellcheck="true">// 如果此次搬迁的 bucket 等于当前进度</span>    <span class="token keyword">if</span> oldbucket <span class="token operator">==</span> h<span class="token punctuation">.</span>nevacuate <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 进度加 1</span>        h<span class="token punctuation">.</span>nevacuate <span class="token operator">=</span> oldbucket <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">// Experiments suggest that 1024 is overkill by at least an order of magnitude.</span>        <span class="token comment" spellcheck="true">// Put it in there as a safeguard anyway, to ensure O(1) behavior.</span>        <span class="token comment" spellcheck="true">// 尝试往后看 1024 个 bucket</span>        stop <span class="token operator">:=</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">+</span> <span class="token number">1024</span>        <span class="token keyword">if</span> stop <span class="token operator">></span> newbit <span class="token punctuation">{</span>            stop <span class="token operator">=</span> newbit        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 寻找没有搬迁的 bucket</span>        <span class="token keyword">for</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">!=</span> stop <span class="token operator">&amp;&amp;</span> <span class="token function">bucketEvacuated</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">.</span>nevacuate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            h<span class="token punctuation">.</span>nevacuate<span class="token operator">++</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 现在 h.nevacuate 之前的 bucket 都被搬迁完毕</span>        <span class="token comment" spellcheck="true">// 所有的 buckets 搬迁完毕</span>        <span class="token keyword">if</span> h<span class="token punctuation">.</span>nevacuate <span class="token operator">==</span> newbit <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 清除老的 buckets</span>            h<span class="token punctuation">.</span>oldbuckets <span class="token operator">=</span> <span class="token boolean">nil</span>            <span class="token comment" spellcheck="true">// 清除老的 overflow bucket</span>            <span class="token comment" spellcheck="true">// 回忆一下：[0] 表示当前 overflow bucket</span>            <span class="token comment" spellcheck="true">// [1] 表示 old overflow bucket</span>            <span class="token keyword">if</span> h<span class="token punctuation">.</span>extra <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                h<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>overflow<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 清除正在扩容的标志位</span>            h<span class="token punctuation">.</span>flags <span class="token operator">&amp;^=</span> sameSizeGrow        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>evacuate 函数的代码注释非常清晰，对着代码和注释是很容易看懂整个的搬迁过程的，耐心点。</p><p>搬迁的目的就是将老的 buckets 搬迁到新的 buckets。而通过前面的说明我们知道，应对条件 1，新的 buckets 数量是之前的一倍，应对条件 2，新的 buckets 数量和之前相等。</p><p>对于条件 1，从老的 buckets 搬迁到新的 buckets，由于 bucktes 数量不变，因此可以按序号来搬，比如原来在 0 号 bucktes，到新的地方后，仍然放在 0 号 buckets。</p><p>对于条件 2，就没这么简单了。要重新计算 key 的哈希，才能决定它到底落在哪个 bucket。例如，原来 B = 5，计算出 key 的哈希后，只用看它的低 5 位，就能决定它落在哪个 bucket。扩容后，B 变成了 6，因此需要多看一位，它的低 6 位决定 key 落在哪个 bucket。这称为 rehash。</p><p><img src="https://user-images.githubusercontent.com/7698088/57740474-af7adb80-76ea-11e9-8409-4af0ce1a814a.png" alt=""></p><p>因此，某个 key 在搬迁前后 bucket 序号可能和原来相等，也可能是相比原来加上 2^B（原来的 B 值），取决于 hash 值 第 6 bit 位是 0 还是 1。</p><p>理解了上面 bucket 序号的变化，我们就可以回答另一个问题了：为什么遍历 map 是无序的？</p><p>map 在扩容后，会发生 key 的搬迁，原来落在同一个 bucket 中的 key，搬迁后，有些 key 就要远走高飞了（bucket 序号加上了 2^B）。而遍历的过程，就是按顺序遍历 bucket，同时按顺序遍历 bucket 中的 key。搬迁后，key 的位置发生了重大的变化，有些 key 飞上高枝，有些 key 则原地不动。这样，遍历 map 的结果就不可能按原来的顺序了。</p><p>当然，如果我就一个 hard code 的 map，我也不会向 map 进行插入删除的操作，按理说每次遍历这样的 map 都会返回一个固定顺序的 key/value 序列吧。的确是这样，但是 Go 杜绝了这种做法，因为这样会给新手程序员带来误解，以为这是一定会发生的事情，在某些情况下，可能会酿成大错。</p><p>当然，Go 做得更绝，当我们在遍历 map 时，并不是固定地从 0 号 bucket 开始遍历，每次都是从一个随机值序号的 bucket 开始遍历，并且是从这个 bucket 的一个随机序号的 cell 开始遍历。这样，即使你是一个写死的 map，仅仅只是遍历它，也不太可能会返回一个固定序列的 key/value 对了。</p><p>多说一句，“迭代 map 的结果是无序的”这个特性是从 go 1.0 开始加入的。</p><p>再明确一个问题：如果扩容后，B 增加了 1，意味着 buckets 总数是原来的 2 倍，原来 1 号的桶“裂变”到两个桶。</p><p>例如，原始 B = 2，1号 bucket 中有 2 个 key 的哈希值低 3 位分别为：010，110。由于原来 B = <code>2</code>，所以低 2 位 10 决定它们落在 2 号桶，现在 B 变成 3，所以 <code>010</code>、<code>110</code> 分别落入 2、6 号桶。</p><p><img src="https://user-images.githubusercontent.com/7698088/57818861-74df7480-77b8-11e9-8104-2a58dc006660.png" alt=""><br>理解了这个，后面讲 map 迭代的时候会用到。</p><p>再来讲搬迁函数中的几个关键点：</p><p>evacuate 函数每次只完成一个 bucket 的搬迁工作，因此要遍历完此 bucket 的所有的 cell，将有值的 cell copy 到新的地方。bucket 还会链接 overflow bucket，它们同样需要搬迁。因此会有 2 层循环，外层遍历 bucket 和 overflow bucket，内层遍历 bucket 的所有 cell。这样的循环在 map 的源码里到处都是，要理解透了。</p><p>源码里提到 X, Y part，其实就是我们说的如果是扩容到原来的 2 倍，桶的数量是原来的 2 倍，前一半桶被称为 X part，后一半桶被称为 Y part。一个 bucket 中的 key 可能会分裂落到 2 个桶，一个位于 X part，一个位于 Y part。所以在搬迁一个 cell 之前，需要知道这个 cell 中的 key 是落到哪个 Part。很简单，重新计算 cell 中 key 的 hash，并向前“多看”一位，决定落入哪个 Part，这个前面也说得很详细了。</p><p>有一个特殊情况是：有一种 key，每次对它计算 hash，得到的结果都不一样。这个 key 就是 math.NaN() 的结果，它的含义是 not a number，类型是 float64。当它作为 map 的 key，在搬迁的时候，会遇到一个问题：再次计算它的哈希值和它当初插入 map 时的计算出来的哈希值不一样！</p><p>你可能想到了，这样带来的一个后果是，这个 key 是永远不会被 Get 操作获取的！当我使用 m[math.NaN()] 语句的时候，是查不出来结果的。这个 key 只有在遍历整个 map 的时候，才有机会现身。所以，可以向一个 map 插入任意数量的 math.NaN() 作为 key。</p><p>当搬迁碰到 math.NaN() 的 key 时，只通过 tophash 的最低位决定分配到 X part 还是 Y part（如果扩容后是原来 buckets 数量的 2 倍）。如果 tophash 的最低位是 0 ，分配到 X part；如果是 1 ，则分配到 Y part。</p><p>这是通过 tophash 值与新算出来的哈希值进行运算得到的：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">if</span> top<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// top hash 最低位为 1</span>    <span class="token comment" spellcheck="true">// 新算出来的 hash 值的 B 位置 1</span>    hash <span class="token operator">|=</span> newbit<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新算出来的 hash 值的 B 位置 0</span>    hash <span class="token operator">&amp;^=</span> newbit<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// hash 值的 B 位为 0，则搬迁到 x part</span><span class="token comment" spellcheck="true">// 当 B = 5时，newbit = 32，二进制低 6 位为 10 0000</span>useX <span class="token operator">=</span> hash<span class="token operator">&amp;</span>newbit <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实这样的 key 我随便搬迁到哪个 bucket 都行，当然，还是要搬迁到上面裂变那张图中的两个 bucket 中去。但这样做是有好处的，在后面讲 map 迭代的时候会再详细解释，暂时知道是这样分配的就行。</p><p>确定了要搬迁到的目标 bucket 后，搬迁操作就比较好进行了。将源 key/value 值 copy 到目的地相应的位置。</p><p>设置 key 在原始 buckets 的 tophash 为 evacuatedX 或是 evacuatedY，表示已经搬迁到了新 map 的 x part 或是 y part。新 map 的 tophash 则正常取 key 哈希值的高 8 位。</p><p>下面通过图来宏观地看一下扩容前后的变化。</p><p>扩容前，B = 2，共有 4 个 buckets，lowbits 表示 hash 值的低位。假设我们不关注其他 buckets 情况，专注在 2 号 bucket。并且假设 overflow 太多，触发了等量扩容（对应于前面的条件 2）。</p><p><img src="https://user-images.githubusercontent.com/7698088/57963483-5b286380-7957-11e9-852a-8296c6c16daa.png" alt=""></p><p>扩容完成后，overflow bucket 消失了，key 都集中到了一个 bucket，更为紧凑了，提高了查找的效率。</p><p><img src="https://user-images.githubusercontent.com/7698088/57963519-dc7ff600-7957-11e9-9877-36c3f4bc3526.png" alt=""></p><p>假设触发了 2 倍的扩容，那么扩容完成后，老 buckets 中的 key 分裂到了 2 个 新的 bucket。一个在 x part，一个在 y 的 part。依据是 hash 的 lowbits。新 map 中 0-3 称为 x part，4-7 称为 y part。</p><p><img src="https://user-images.githubusercontent.com/7698088/57963651-04705900-795a-11e9-9801-e3dc475d4782.png" alt=""></p><p>注意，上面的两张图忽略了其他 buckets 的搬迁情况，表示所有的 bucket 都搬迁完毕后的情形。实际上，我们知道，搬迁是一个“渐进”的过程，并不会一下子就全部搬迁完毕。所以在搬迁过程中，oldbuckets 指针还会指向原来老的 []bmap，并且已经搬迁完毕的 key 的 tophash 值会是一个状态值，表示 key 的搬迁去向。</p><h3 id="map-的遍历"><a href="#map-的遍历" class="headerlink" title="map 的遍历"></a>map 的遍历</h3><p>本来 map 的遍历过程比较简单：遍历所有的 bucket 以及它后面挂的 overflow bucket，然后挨个遍历 bucket 中的所有 cell。每个 bucket 中包含 8 个 cell，从有 key 的 cell 中取出 key 和 value，这个过程就完成了。</p><p>但是，现实并没有这么简单。还记得前面讲过的扩容过程吗？扩容过程不是一个原子的操作，它每次最多只搬运 2 个 bucket，所以如果触发了扩容操作，那么在很长时间里，map 的状态都是处于一个中间态：有些 bucket 已经搬迁到新家，而有些 bucket 还待在老地方。</p><p>因此，遍历如果发生在扩容的过程中，就会涉及到遍历新老 bucket 的过程，这是难点所在。</p><p>我先写一个简单的代码样例，假装不知道遍历过程具体调用的是什么函数：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ageMp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    ageMp<span class="token punctuation">[</span><span class="token string">"qcrao"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token operator">:=</span> <span class="token keyword">range</span> ageMp <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> tool compile <span class="token operator">-</span>S main<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到汇编命令。这里就不逐行讲解了，可以去看之前的几篇文章，说得很详细。<br>关键的几行汇编代码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ......</span><span class="token number">0x0124</span> <span class="token function">00292</span> <span class="token punctuation">(</span>test16<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      CALL    runtime<span class="token punctuation">.</span><span class="token function">mapiterinit</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ......</span><span class="token number">0x01fb</span> <span class="token function">00507</span> <span class="token punctuation">(</span>test16<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      CALL    runtime<span class="token punctuation">.</span><span class="token function">mapiternext</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x0200</span> <span class="token function">00512</span> <span class="token punctuation">(</span>test16<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      MOVQ    <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_4<span class="token operator">+</span><span class="token function">160</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x0208</span> <span class="token function">00520</span> <span class="token punctuation">(</span>test16<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      TESTQ   AX<span class="token punctuation">,</span> AX<span class="token number">0x020b</span> <span class="token function">00523</span> <span class="token punctuation">(</span>test16<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      JNE     <span class="token number">302</span><span class="token comment" spellcheck="true">// ......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，关于 map 迭代，底层的函数调用关系一目了然。先是调用 <code>mapiterinit</code> 函数初始化迭代器，然后循环调用 <code>mapiternext</code> 函数进行 map 迭代。</p><p><img src="https://user-images.githubusercontent.com/7698088/57976471-ad2ebf00-7a13-11e9-8dd8-d7be54f96440.png" alt=""></p><p>迭代器的结构体定义：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> hiter <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// key 指针</span>    key         unsafe<span class="token punctuation">.</span>Pointer    <span class="token comment" spellcheck="true">// value 指针</span>    value       unsafe<span class="token punctuation">.</span>Pointer    <span class="token comment" spellcheck="true">// map 类型，包含如 key size 大小等</span>    t           <span class="token operator">*</span>maptype    <span class="token comment" spellcheck="true">// map header</span>    h           <span class="token operator">*</span>hmap    <span class="token comment" spellcheck="true">// 初始化时指向的 bucket</span>    buckets     unsafe<span class="token punctuation">.</span>Pointer    <span class="token comment" spellcheck="true">// 当前遍历到的 bmap</span>    bptr        <span class="token operator">*</span>bmap    overflow    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>bmap    <span class="token comment" spellcheck="true">// 起始遍历的 bucet 编号</span>    startBucket <span class="token builtin">uintptr</span>    <span class="token comment" spellcheck="true">// 遍历开始时 cell 的编号（每个 bucket 中有 8 个 cell）</span>    offset      <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">// 是否从头遍历了</span>    wrapped     <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// B 的大小</span>    B           <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">// 指示当前 cell 序号</span>    i           <span class="token builtin">uint8</span>    <span class="token comment" spellcheck="true">// 指向当前的 bucket</span>    bucket      <span class="token builtin">uintptr</span>    <span class="token comment" spellcheck="true">// 因为扩容，需要检查的 bucket</span>    checkBucket <span class="token builtin">uintptr</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mapiterinit</code> 就是对 hiter 结构体里的字段进行初始化赋值操作。<br>前面已经提到过，即使是对一个写死的 map 进行遍历，每次出来的结果也是无序的。下面我们就可以近距离地观察他们的实现了。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 生成随机数 r</span>r <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> h<span class="token punctuation">.</span>B <span class="token operator">></span> <span class="token number">31</span><span class="token operator">-</span>bucketCntBits <span class="token punctuation">{</span>    r <span class="token operator">+=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从哪个 bucket 开始遍历</span>it<span class="token punctuation">.</span>startBucket <span class="token operator">=</span> r <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>h<span class="token punctuation">.</span>B <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 从 bucket 的哪个 cell 开始遍历</span>it<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>r <span class="token operator">>></span> h<span class="token punctuation">.</span>B <span class="token operator">&amp;</span> <span class="token punctuation">(</span>bucketCnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，B = 2，那 uintptr(1)&lt;&lt;h.B - 1 结果就是 3，低 8 位为 0000 0011，将 r 与之相与，就可以得到一个 0~3 的 bucket 序号；bucketCnt - 1 等于 7，低 8 位为 0000 0111，将 r 右移 2 位后，与 7 相与，就可以得到一个 0~7 号的 cell。</p><p>于是，在 mapiternext 函数中就会从 it.startBucket 的 it.offset 号的 cell 开始遍历，取出其中的 key 和 value，直到又回到起点 bucket，完成遍历过程。</p><p>源码部分比较好看懂，尤其是理解了前面注释的几段代码后，再看这部分代码就没什么压力了。所以，接下来，我将通过图形化的方式讲解整个遍历过程，希望能够清晰易懂。</p><p>假设我们有下图所示的一个 map，起始时 B = 1，有两个 bucket，后来触发了扩容（这里不要深究扩容条件，只是一个设定），B 变成 2。并且， 1 号 bucket 中的内容搬迁到了新的 bucket，1 号裂变成 1 号和 3 号；0 号 bucket 暂未搬迁。老的 bucket 挂在在 <em>oldbuckets 指针上面，新的 bucket 则挂在 </em>buckets 指针上面。</p><p><img src="https://user-images.githubusercontent.com/7698088/57978113-f8a79400-7a38-11e9-8e27-3f3ba4fa557f.png" alt=""></p><p>这时，我们对此 map 进行遍历。假设经过初始化后，startBucket = 3，offset = 2。于是，遍历的起点将是 3 号 bucket 的 2 号 cell，下面这张图就是开始遍历时的状态：</p><p><img src="https://user-images.githubusercontent.com/7698088/57980268-a4fa7200-7a5b-11e9-9ad1-fb2b64fe3159.png" alt=""></p><p>标红的表示起始位置，bucket 遍历顺序为：3 -&gt; 0 -&gt; 1 -&gt; 2。<br>因为 3 号 bucket 对应老的 1 号 bucket，因此先检查老 1 号 bucket 是否已经被搬迁过。判断方法就是：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">evacuated</span><span class="token punctuation">(</span>b <span class="token operator">*</span>bmap<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    h <span class="token operator">:=</span> b<span class="token punctuation">.</span>tophash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> h <span class="token operator">></span> empty <span class="token operator">&amp;&amp;</span> h <span class="token operator">&lt;</span> minTopHash<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 b.tophash[0] 的值在标志值范围内，即在 (0,4) 区间里，说明已经被搬迁过了。</p><pre class="line-numbers language-go"><code class="language-go">empty <span class="token operator">=</span> <span class="token number">0</span>evacuatedEmpty <span class="token operator">=</span> <span class="token number">1</span>evacuatedX <span class="token operator">=</span> <span class="token number">2</span>evacuatedY <span class="token operator">=</span> <span class="token number">3</span>minTopHash <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本例中，老 1 号 bucket 已经被搬迁过了。所以它的 tophash[0] 值在 (0,4) 范围内，因此只用遍历新的 3 号 bucket。</p><p>依次遍历 3 号 bucket 的 cell，这时候会找到第一个非空的 key：元素 e。到这里，mapiternext 函数返回，这时我们的遍历结果仅有一个元素：</p><p><img src="https://user-images.githubusercontent.com/7698088/57980302-56010c80-7a5c-11e9-8263-c11ddcec2ecc.png" alt=""></p><p>由于返回的 key 不为空，所以会继续调用 mapiternext 函数。<br>继续从上次遍历到的地方往后遍历，从新 3 号 overflow bucket 中找到了元素 f 和 元素 g。<br>遍历结果集也因此壮大：</p><p><img src="https://user-images.githubusercontent.com/7698088/57980349-2d2d4700-7a5d-11e9-819a-a59964f70a7c.png" alt=""></p><p>新 3 号 bucket 遍历完之后，回到了新 0 号 bucket。0 号 bucket 对应老的 0 号 bucket，经检查，老 0 号 bucket 并未搬迁，因此对新 0 号 bucket 的遍历就改为遍历老 0 号 bucket。那是不是把老 0 号 bucket 中的所有 key 都取出来呢？</p><p>并没有这么简单，回忆一下，老 0 号 bucket 在搬迁后将裂变成 2 个 bucket：新 0 号、新 2 号。而我们此时正在遍历的只是新 0 号 bucket（注意，遍历都是遍历的 <code>*bucket</code>指针，也就是所谓的新 buckets）。所以，我们只会取出老 0 号 bucket 中那些在裂变之后，分配到新 0 号 bucket 中的那些 key。</p><p>因此，<code>lowbits == 00</code> 的将进入遍历结果集：</p><p><img src="https://user-images.githubusercontent.com/7698088/57980449-6fa35380-7a5e-11e9-9dbf-86332ea0e215.png" alt=""></p><p>和之前的流程一样，继续遍历新 1 号 bucket，发现老 1 号 bucket 已经搬迁，只用遍历新 1 号 bucket 中现有的元素就可以了。结果集变成：<br><img src="https://user-images.githubusercontent.com/7698088/57980487-e8a2ab00-7a5e-11e9-8e47-050437a099fc.png" alt=""></p><p>继续遍历新 2 号 bucket，它来自老 0 号 bucket，因此需要在老 0 号 bucket 中那些会裂变到新 2 号 bucket 中的 key，也就是 lowbit == 10 的那些 key。</p><p>这样，遍历结果集变成：</p><p><img src="https://user-images.githubusercontent.com/7698088/57980574-ae85d900-7a5f-11e9-8050-ae314a90ee05.png" alt=""></p><p>最后，继续遍历到新 3 号 bucket 时，发现所有的 bucket 都已经遍历完毕，整个迭代过程执行完毕。</p><p>顺便说一下，如果碰到 key 是 <code>math.NaN()</code> 这种的，处理方式类似。核心还是要看它被分裂后具体落入哪个 bucket。只不过只用看它 top hash 的最低位。如果 top hash 的最低位是 0 ，分配到 X part；如果是 1 ，则分配到 Y part。据此决定是否取出 key，放到遍历结果集里。</p><p>map 遍历的核心在于理解 2 倍扩容时，老 bucket 会分裂到 2 个新 bucket 中去。而遍历操作，会按照新 bucket 的序号顺序进行，碰到老 bucket 未搬迁的情况时，要在老 bucket 中找到将来要搬迁到新 bucket 来的 key。</p><h3 id="map-的赋值"><a href="#map-的赋值" class="headerlink" title="map 的赋值"></a>map 的赋值</h3><p>通过汇编语言可以看到，向 map 中插入或者修改 key，最终调用的是 mapassign 函数。</p><p>实际上插入或修改 key 的语法是一样的，只不过前者操作的 key 在 map 中不存在，而后者操作的 key 存在 map 中。</p><p>mapassign 有一个系列的函数，根据 key 类型的不同，编译器会将其优化为相应的“快速函数”。</p><pre class="line-numbers language-go"><code class="language-go">key 类型    插入<span class="token builtin">uint32</span>    <span class="token function">mapassign_fast32</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint32</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token builtin">uint64</span>    <span class="token function">mapassign_fast64</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint64</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span class="token builtin">string</span>    <span class="token function">mapassign_faststr</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> ky <span class="token builtin">string</span><span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们只用研究最一般的赋值函数 mapassign。</p><p>整体来看，流程非常得简单：对 key 计算 hash 值，根据 hash 值按照之前的流程，找到要赋值的位置（可能是插入新 key，也可能是更新老 key），对相应位置进行赋值。</p><p>源码大体和之前讲的类似，核心还是一个双层循环，外层遍历 bucket 和它的 overflow bucket，内层遍历整个 bucket 的各个 cell。限于篇幅，这部分代码的注释我也不展示了，有兴趣的可以去看，保证理解了这篇文章内容后，能够看懂。</p><p>我这里会针对这个过程提几点重要的。</p><p>函数首先会检查 map 的标志位 flags。如果 flags 的写标志位此时被置 1 了，说明有其他协程在执行“写”操作，进而导致程序 panic。这也说明了 map 对协程是不安全的。</p><p>通过前文我们知道扩容是渐进式的，如果 map 处在扩容的过程中，那么当 key 定位到了某个 bucket 后，需要确保这个 bucket 对应的老 bucket 完成了迁移过程。即老 bucket 里的 key 都要迁移到新的 bucket 中来（分裂到 2 个新 bucket），才能在新的 bucket 中进行插入或者更新的操作。</p><p>上面说的操作是在函数靠前的位置进行的，只有进行完了这个搬迁操作后，我们才能放心地在新 bucket 里定位 key 要安置的地址，再进行之后的操作。</p><p>现在到了定位 key 应该放置的位置了，所谓找准自己的位置很重要。准备两个指针，一个（inserti）指向 key 的 hash 值在 tophash 数组所处的位置，另一个(insertk)指向 cell 的位置（也就是 key 最终放置的地址），当然，对应 value 的位置就很容易定位出来了。这三者实际上都是关联的，在 tophash 数组中的索引位置决定了 key 在整个 bucket 中的位置（共 8 个 key），而 value 的位置需要“跨过” 8 个 key 的长度。</p><p>在循环的过程中，inserti 和 insertk 分别指向第一个找到的空闲的 cell。如果之后在 map 没有找到 key 的存在，也就是说原来 map 中没有此 key，这意味着插入新 key。那最终 key 的安置地址就是第一次发现的“空位”（tophash 是 empty）。</p><p>如果这个 bucket 的 8 个 key 都已经放置满了，那在跳出循环后，发现 inserti 和 insertk 都是空，这时候需要在 bucket 后面挂上 overflow bucket。当然，也有可能是在 overflow bucket 后面再挂上一个 overflow bucket。这就说明，太多 key hash 到了此 bucket。</p><p>在正式安置 key 之前，还要检查 map 的状态，看它是否需要进行扩容。如果满足扩容的条件，就主动触发一次扩容操作。</p><p>这之后，整个之前的查找定位 key 的过程，还得再重新走一次。因为扩容之后，key 的分布都发生了变化。</p><p>最后，会更新 map 相关的值，如果是插入新 key，map 的元素数量字段 count 值会加 1；在函数之初设置的 hashWriting 写标志出会清零。</p><p>另外，有一个重要的点要说一下。前面说的找到 key 的位置，进行赋值操作，实际上并不准确。我们看 mapassign 函数的原型就知道，函数并没有传入 value 值，所以赋值操作是什么时候执行的呢？</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">mapassign</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>答案还得从汇编语言中寻找。我直接揭晓答案，有兴趣可以私下去研究一下。mapassign 函数返回的指针就是指向的 key 所对应的 value 值位置，有了地址，就很好操作赋值了。</p><h3 id="map的删除"><a href="#map的删除" class="headerlink" title="map的删除"></a>map的删除</h3><p>写操作底层的执行函数是 mapdelete：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">mapdelete</span><span class="token punctuation">(</span>t <span class="token operator">*</span>maptype<span class="token punctuation">,</span> h <span class="token operator">*</span>hmap<span class="token punctuation">,</span> key unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据 key 类型的不同，删除操作会被优化成更具体的函数：</p><pre class="line-numbers language-go"><code class="language-go">key 类型    删除<span class="token builtin">uint32</span>    <span class="token function">mapdelete_fast32</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint32</span><span class="token punctuation">)</span><span class="token builtin">uint64</span>    <span class="token function">mapdelete_fast64</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> key <span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token builtin">string</span>    <span class="token function">mapdelete_faststr</span><span class="token punctuation">(</span>t maptype<span class="token punctuation">,</span> h hmap<span class="token punctuation">,</span> ky <span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，我们只关心 mapdelete 函数。它首先会检查 h.flags 标志，如果发现写标位是 1，直接 panic，因为这表明有其他协程同时在进行写操作。</p><p>计算 key 的哈希，找到落入的 bucket。检查此 map 如果正在扩容的过程中，直接触发一次搬迁操作。</p><p>删除操作同样是两层循环，核心还是找到 key 的具体位置。寻找过程都是类似的，在 bucket 中挨个 cell 寻找。</p><p>找到对应位置后，对 key 或者 value 进行“清零”操作：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 对 key 清零</span><span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectkey <span class="token punctuation">{</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">typedmemclr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>key<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对 value 清零</span><span class="token keyword">if</span> t<span class="token punctuation">.</span>indirectvalue <span class="token punctuation">{</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">typedmemclr</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，将 count 值减 1，将对应位置的 tophash 值置成 Empty。</p><p>这块源码同样比较简单，感兴起直接去看代码。</p><h2 id="map进阶"><a href="#map进阶" class="headerlink" title="map进阶"></a>map进阶</h2><h3 id="可以边遍历边删除吗"><a href="#可以边遍历边删除吗" class="headerlink" title="可以边遍历边删除吗"></a>可以边遍历边删除吗</h3><h3 id="key可以是float型吗？"><a href="#key可以是float型吗？" class="headerlink" title="key可以是float型吗？"></a>key可以是float型吗？</h3><p>从语法上看，是可以的。Go 语言中只要是可比较的类型都可以作为 key。除开 slice，map，functions 这几种类型，其他类型都是 OK 的。具体包括：布尔值、数字、字符串、指针、通道、接口类型、结构体、只包含上述类型的数组。这些类型的共同特征是支持 == 和 != 操作符，k1 == k2 时，可认为 k1 和 k2 是同一个 key。如果是结构体，则需要它们的字段值都相等，才被认为是相同的 key。</p><p>顺便说一句，任何类型都可以作为 value，包括 map 类型。<br>来看个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    m<span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    m<span class="token punctuation">[</span><span class="token number">2.4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    m<span class="token punctuation">[</span>math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>    m<span class="token punctuation">[</span>math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%v, %d] "</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\nk: %v, v: %d\n"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"k: %v, v: %d\n"</span><span class="token punctuation">,</span> <span class="token number">2.400000000001</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">2.400000000001</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"k: %v, v: %d\n"</span><span class="token punctuation">,</span> <span class="token number">2.4000000000000000000000001</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">2.4000000000000000000000001</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的输出：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>NaN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>NaN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> k<span class="token punctuation">:</span> NaN<span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">0</span>k<span class="token punctuation">:</span> <span class="token number">2.400000000001</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">0</span>k<span class="token punctuation">:</span> <span class="token number">2.4</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">2</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子中定义了一个 key 类型是 float 型的 map，并向其中插入了 4 个 key：1.4， 2.4， NAN，NAN。</p><p>打印的时候也打印出了 4 个 key，如果你知道 NAN != NAN，也就不奇怪了。因为他们比较的结果不相等，自然，在 map 看来就是两个不同的 key 了。</p><p>接着，我们查询了几个 key，发现 NAN 不存在，2.400000000001 也不存在，而 2.4000000000000000000000001 却存在。</p><p>有点诡异，不是吗？</p><p>接着，我通过汇编发现了如下的事实：</p><p>当用 float64 作为 key 的时候，先要将其转成 unit64 类型，再插入 key 中。</p><p>具体是通过 <code>Float64frombits</code> 函数完成：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Float64frombits returns the floating point number corresponding</span><span class="token comment" spellcheck="true">// the IEEE 754 binary representation b.</span><span class="token keyword">func</span> <span class="token function">Float64frombits</span><span class="token punctuation">(</span>b <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是将浮点数表示成 IEEE 754 规定的格式。如赋值语句：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">0x00bd</span> <span class="token function">00189</span> <span class="token punctuation">(</span>test18<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      LEAQ    <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">statictmp_0</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span> DX<span class="token number">0x00c4</span> <span class="token function">00196</span> <span class="token punctuation">(</span>test18<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      MOVQ    DX<span class="token punctuation">,</span> <span class="token function">16</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x00c9</span> <span class="token function">00201</span> <span class="token punctuation">(</span>test18<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      PCDATA  $<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">2</span><span class="token number">0x00c9</span> <span class="token function">00201</span> <span class="token punctuation">(</span>test18<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>      CALL    runtime<span class="token punctuation">.</span><span class="token function">mapassign</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>&quot;&quot;.statictmp_0(SB)</code> 变量是这样的：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token string">""</span><span class="token punctuation">.</span>statictmp_0 SRODATA size<span class="token operator">=</span><span class="token number">8</span>        <span class="token number">0x0000</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">03</span> <span class="token number">40</span><span class="token string">""</span><span class="token punctuation">.</span>statictmp_1 SRODATA size<span class="token operator">=</span><span class="token number">8</span>        <span class="token number">0x0000</span> ff 3b <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">03</span> <span class="token number">40</span><span class="token string">""</span><span class="token punctuation">.</span>statictmp_2 SRODATA size<span class="token operator">=</span><span class="token number">8</span>        <span class="token number">0x0000</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">33</span> <span class="token number">03</span> <span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再来输出点东西：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    m<span class="token punctuation">[</span><span class="token number">2.4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Float64bits</span><span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Float64bits</span><span class="token punctuation">(</span><span class="token number">2.400000000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Float64bits</span><span class="token punctuation">(</span><span class="token number">2.4000000000000000000000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token number">4612586738352864255</span><span class="token number">4612586738352862003</span><span class="token number">4612586738352862003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转成十六进制为：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">0x4003333333333333</span><span class="token number">0x4003333333333BFF</span><span class="token number">0x4003333333333333</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和前面的 <code>&quot;&quot;.statictmp_0</code> 比较一下，很清晰了吧。<code>2.4</code> 和 <code>2.4000000000000000000000001</code> 经过 <code>math.Float64bits()</code> 函数转换后的结果是一样的。自然，二者在 map 看来，就是同一个 key 了。</p><p>再来看一下 NAN（not a number）：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// NaN returns an IEEE 754 ``not-a-number'' value.</span><span class="token keyword">func</span> <span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Float64frombits</span><span class="token punctuation">(</span>uvnan<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>uvan 的定义为：</p><pre class="line-numbers language-go"><code class="language-go">uvnan    <span class="token operator">=</span> <span class="token number">0x7FF8000000000001</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NAN() 直接调用 <code>Float64frombits</code>，传入写死的 const 型变量 <code>0x7FF8000000000001</code>，得到 NAN 型值。既然，NAN 是从一个常量解析得来的，为什么插入 map 时，会被认为是不同的 key？</p><p>这是由类型的哈希函数决定的，例如，对于 64 位的浮点数，它的哈希函数如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f64hash</span><span class="token punctuation">(</span>p unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> h <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span> <span class="token punctuation">{</span>    f <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> c1 <span class="token operator">*</span> <span class="token punctuation">(</span>c0 <span class="token operator">^</span> h<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// +0, -0</span>    <span class="token keyword">case</span> f <span class="token operator">!=</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> c1 <span class="token operator">*</span> <span class="token punctuation">(</span>c0 <span class="token operator">^</span> h <span class="token operator">^</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">fastrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// any kind of NaN</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">memhash</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个 <code>case</code>，<code>f != f</code> 就是针对 <code>NAN</code>，这里会再加一个随机数。<br>这样，所有的谜题都解开了。<br>由于 NAN 的特性：</p><pre class="line-numbers language-go"><code class="language-go">NAN <span class="token operator">!=</span> NAN<span class="token function">hash</span><span class="token punctuation">(</span>NAN<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">hash</span><span class="token punctuation">(</span>NAN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此向 map 中查找的 key 为 NAN 时，什么也查不到；如果向其中增加了 4 次 NAN，遍历会得到 4 个 NAN。<br>最后说结论：float 型可以作为 key，但是由于精度的问题，会导致一些诡异的问题，慎用之。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在写作本文时，有些问题看遍了中文世界的博客都没能找到解答。当然，源码可以解答任何问题。但是，你不能一下子跳进源码的细节，你得先有一个整体的认识才好。</p><p>所以，我开始搜索英文相关讲源码的文章，没有太多这方面的。但是我发现了一篇质量很高的文章，放在了参考资料第一条，它带领读者一步步优化，最终实现了从 map 中随机取出一个 key。推荐你去阅读，非常精彩。尤其是你知道了 map 的底层遍历、扩容的具体过程后更是如此。</p><p>总结一下，Go 语言中，通过哈希查找表实现 map，用链表法解决哈希冲突。<br>通过 key 的哈希值将 key 散落到不同的桶中，每个桶中有 8 个 cell。哈希值的低位决定桶序号，高位标识同一个桶中的不同 key。</p><p>当向桶中添加了很多 key，造成元素过多，或者溢出桶太多，就会触发扩容。扩容分为等量扩容和 2 倍容量扩容。扩容后，原来一个 bucket 中的 key 一分为二，会被重新分配到两个桶中。</p><p>扩容过程是渐进的，主要是防止一次扩容需要搬迁的 key 数量过多，引发性能问题。触发扩容的时机是增加了新元素，bucket 搬迁的时机则发生在赋值、删除期间，每次最多搬迁两个 bucket。</p><p>查找、赋值、删除的一个很核心的内容是如何定位到 key 所在的位置，需要重点理解。一旦理解，关于 map 的源码就可以看懂了。<br>最后，如果文章对你有帮助，恳请你帮我分享一下，或者点一下在看，谢谢！<br>最后的最后，点击阅读原文，你可能会参与见证一个从零开始的千星项目。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【english 如何实现随机取一个map的key，非常精彩】<a href="https://lukechampine.com/hackmap.html" target="_blank" rel="noopener">https://lukechampine.com/hackmap.html</a></p><p>【map 的维基百科】<a href="https://en.wikipedia.org/wiki/Associative_array" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Associative_array</a></p><p>【sync.map 源码分析】<a href="https://github.com/Chasiny/Blog/blob/master/blog/go/sync.Map%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md" target="_blank" rel="noopener">https://github.com/Chasiny/Blog/blob/master/blog/go/sync.Map%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md</a></p><p>【各种 map 相关操作的流程图】<a href="https://www.jianshu.com/p/aa0d4808cbb8" target="_blank" rel="noopener">https://www.jianshu.com/p/aa0d4808cbb8</a></p><p>【map 源码分析】<a href="https://www.twblogs.net/a/5bd78d5d2b71777ac86b541f" target="_blank" rel="noopener">https://www.twblogs.net/a/5bd78d5d2b71777ac86b541f</a></p><p>【曹大关于map的文章 不用解释】<a href="https://github.com/cch123/golang-notes/blob/master/map.md" target="_blank" rel="noopener">https://github.com/cch123/golang-notes/blob/master/map.md</a></p><p>【english 有图】<a href="https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html" target="_blank" rel="noopener">https://www.ardanlabs.com/blog/2013/12/macro-view-of-map-internals-in-go.html</a></p><p>【english 对比了 java, c++ 的 map 实现】<a href="https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics" target="_blank" rel="noopener">https://dave.cheney.net/2018/05/29/how-the-go-runtime-implements-maps-efficiently-without-generics</a></p><p>【english 为什么 go map 对竞争敏感】<a href="https://dave.cheney.net/2015/12/07/are-go-maps-sensitive-to-data-races" target="_blank" rel="noopener">https://dave.cheney.net/2015/12/07/are-go-maps-sensitive-to-data-races</a></p><p>【golang blog map】<a href="https://blog.golang.org/go-maps-in-action" target="_blank" rel="noopener">https://blog.golang.org/go-maps-in-action</a></p><p>【randommap 开源代码】<a href="https://github.com/lukechampine/randmap" target="_blank" rel="noopener">https://github.com/lukechampine/randmap</a></p><p>【图不错】<a href="https://hacpai.com/article/1533916370874" target="_blank" rel="noopener">https://hacpai.com/article/1533916370874</a></p><p>【夜读issue】<a href="https://github.com/developer-learning/reading-go/issues/332" target="_blank" rel="noopener">https://github.com/developer-learning/reading-go/issues/332</a></p><p>【新发现的博客，很有深度】<a href="https://draveness.me/golang-hashmap" target="_blank" rel="noopener">https://draveness.me/golang-hashmap</a></p><p>【扩容过程+图】<a href="https://my.oschina.net/renhc/blog/2208417" target="_blank" rel="noopener">https://my.oschina.net/renhc/blog/2208417</a></p><p>【运算符】<a href="https://juejin.im/post/5c0e572fe51d4522ad6e59d5" target="_blank" rel="noopener">https://juejin.im/post/5c0e572fe51d4522ad6e59d5</a></p><p>【english】<a href="https://www.digitalocean.com/community/tutorials/understanding-maps-in-go" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/understanding-maps-in-go</a></p><p>【map 遍历 源码简单阐述】<a href="https://gocn.vip/article/1704" target="_blank" rel="noopener">https://gocn.vip/article/1704</a></p><p>【短文，同时遍历、删除key是可以的】<a href="https://cloud.tencent.com/developer/article/1065474" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1065474</a></p><p>【面向信仰编程，golang range】<a href="https://draveness.me/golang-for-range" target="_blank" rel="noopener">https://draveness.me/golang-for-range</a></p><p>【slice 和 map 作为参数的区别】<a href="https://stackoverflow.com/questions/47590444/slice-vs-map-to-be-used-in-parameter/47590531#47590531" target="_blank" rel="noopener">https://stackoverflow.com/questions/47590444/slice-vs-map-to-be-used-in-parameter/47590531#47590531</a></p><p>【Go官方博客关于 map】<a href="https://blog.golang.org/go-maps-in-action" target="_blank" rel="noopener">https://blog.golang.org/go-maps-in-action</a></p><p>【Go 语言可比较类型】<a href="https://golang.org/ref/spec#Comparison_operators" target="_blank" rel="noopener">https://golang.org/ref/spec#Comparison_operators</a></p><p>【key 类型】<a href="http://lanlingzi.cn/post/technical/2016/0904_go_map/" target="_blank" rel="noopener">http://lanlingzi.cn/post/technical/2016/0904_go_map/</a></p><p>【哈希函数性能比较】<a href="http://aras-p.info/blog/2016/08/09/More-Hash-Function-Tests/" target="_blank" rel="noopener">http://aras-p.info/blog/2016/08/09/More-Hash-Function-Tests/</a></p><p>【哈希函数选择，C++/Java 对比】<a href="https://studygolang.com/articles/15839" target="_blank" rel="noopener">https://studygolang.com/articles/15839</a></p><p>【slice 和 map 作为函数参数】<a href="https://stackoverflow.com/questions/47590444/slice-vs-map-to-be-used-in-parameter/47590531#47590531" target="_blank" rel="noopener">https://stackoverflow.com/questions/47590444/slice-vs-map-to-be-used-in-parameter/47590531#47590531</a></p><p>【煎鱼大佬博客 map1】<a href="https://github.com/EDDYCJY/blog/blob/master/golang/pkg/2019-03-04-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Go-map-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0.md" target="_blank" rel="noopener">https://github.com/EDDYCJY/blog/blob/master/golang/pkg/2019-03-04-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Go-map-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%AE%BF%E9%97%AE%E5%85%83%E7%B4%A0.md</a></p><p>【煎鱼大佬博客 map2】<a href="https://github.com/EDDYCJY/blog/blob/master/golang/pkg/2019-03-24-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Go-map-%E8%B5%8B%E5%80%BC%E5%92%8C%E6%89%A9%E5%AE%B9%E8%BF%81%E7%A7%BB.md" target="_blank" rel="noopener">https://github.com/EDDYCJY/blog/blob/master/golang/pkg/2019-03-24-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Go-map-%E8%B5%8B%E5%80%BC%E5%92%8C%E6%89%A9%E5%AE%B9%E8%BF%81%E7%A7%BB.md</a></p><p>【哈希函数的定义】<a href="http://zhangshuai.ren/2018/05/16/%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0Go%E8%AF%AD%E8%A8%80Map%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">http://zhangshuai.ren/2018/05/16/%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0Go%E8%AF%AD%E8%A8%80Map%E5%87%BD%E6%95%B0/</a></p><p>【如何比较两个 map 相等】<a href="https://golangbot.com/maps/" target="_blank" rel="noopener">https://golangbot.com/maps/</a></p><p>【NAN hash】<a href="https://research.swtch.com/randhash" target="_blank" rel="noopener">https://research.swtch.com/randhash</a></p><p>【并发安全阐述】<a href="http://zjykzk.github.io/post/cs/golang/map/" target="_blank" rel="noopener">http://zjykzk.github.io/post/cs/golang/map/</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Forward </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golnag在现实世界的并发错误【翻译】</title>
      <link href="/golang/understanding-real-world-concurrency-bugs-in-go/"/>
      <url>/golang/understanding-real-world-concurrency-bugs-in-go/</url>
      
        <content type="html"><![CDATA[<h1 id="了解Golang在现实中的并发错误"><a href="#了解Golang在现实中的并发错误" class="headerlink" title="了解Golang在现实中的并发错误"></a>了解Golang在现实中的并发错误</h1><p><a href="https://kyle.link/2019/05/19/golang/understanding-real-world-concurrency-bugs-in-go/" target="_blank" rel="noopener">本文地址</a><br><a href="https://blog.acolyer.org/2019/05/17/understanding-real-world-concurrency-bugs-in-go/" target="_blank" rel="noopener">原文地址</a></p><p>编程(或数据)模型的设计不仅使得某些问题更容易(或更难)解决，而且使得某些类别的bug更容易(或更难)创建、检测和随后修复。今天的论文选择研究围棋中的并发机制。在我们深入之前，停下来考虑一下你自己对围棋的看法可能会很有趣，其中很可能包括以下几点:</p><ul><li>Go的明确设计是为了使并发编程更容易，更不容易出错</li><li>Go使并发编程变得更容易，更不容易出错</li><li>Go程序大量使用通过通道传递的消息，这比共享内存同步更不容易出错</li><li>Go程序具有较少的并发错误</li><li>Go的内置死锁和数据竞争检测器将捕获任何(大多数？)错误确实会溜进代码中</li></ul><p>第一种说法是正确的。对于其余的陈述，你可以使用这项研究的数据来重新评估你对这些观点的坚持程度…</p><blockquote><p>我们对实时程序中的并发错误进行了首次系统研究。我们研究了六个流行的围棋软件[项目]，包括Docker、Kubernetes和gRPC。我们总共分析了171个并发错误，其中一半以上是由非传统的Go特定问题引起的。除了这些bug的根本原因之外，我们还研究了它们的修复，进行了复制它们的实验，并用两个公开可用的Go bug检测器对它们进行了评估。</p></blockquote><p>所研究的六个应用程序是Docker、Kubernetes等、CockroachDB、gRPC和BoltDB，所以这里有很多重要的现实世界围棋代码。</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-1.jpeg" alt="Table 1"></p><p>分析首先研究这些应用程序实际上是如何利用Go并发原语的，然后从它们的问题跟踪器中研究并发相关的错误。这些bug分为两个主要方面:观察到的行为(阻塞或非阻塞)，以及导致这种情况的并发原语的类型(共享内存或消息传递)。让我们从Go中主要并发机制的快速回顾开始。</p><h2 id="Go的并发特性"><a href="#Go的并发特性" class="headerlink" title="Go的并发特性"></a>Go的并发特性</h2><blockquote><p>Go的一个主要设计目标是改进传统的多线程编程语言，使并发编程更容易，更不容易出错。为此，Go将其多线程设计集中在两个原则上:1)使线程(称为goroutines)轻量级且易于创建；2)使用显式消息传递(通过通道)跨线程通信。</p></blockquote><p>Goroutines是轻量级用户级线程(“绿色”线程)。goroutine是通过在函数调用之前添加关键字go来创建的，包括添加到匿名函数中。匿名函数之前声明的局部变量可以在其中访问，并且可能是共享的。通道用于在goroutines之间发送数据和状态，可以是缓冲的或无缓冲的。当使用无缓冲信道时，一个goroutine将在发送(接收)时阻塞，直到另一个goroutine正在接收(发送)。select语句允许一个goroutine等待多个通道操作，如果一个以上的情况有效，Go随机选择一个。Go也有传统的同步原语，包括互斥体、条件变量和原子变量。</p><h2 id="Go并发的最佳实践"><a href="#Go并发的最佳实践" class="headerlink" title="Go并发的最佳实践"></a>Go并发的最佳实践</h2><p>这六个应用程序相对大量地使用goroutines，尤其是匿名函数。</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-2.jpeg" alt="Table 2"></p><p>一个特别有趣的比较可以在gRPC的例子中进行，它有一个C实现和一个Go实现。下表显示了在处理相同数量的请求时，在gRPC-Go中创建的路由数与gRPC-C中创建的路由数的比率。</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-3.jpeg" alt="Table 3"></p><p>在这个比较中，goroutines的生命周期比在C版本中创建的线程要短，但是创建的频率要高得多。这种更频繁地使用戈鲁丁语是围棋语言鼓励的。</p><p>如果我们全面考察所有应用程序中并发原语的使用，一个更令人惊讶的发现是共享内存同步操作仍然比消息传递使用得更频繁:</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-4.jpeg" alt="Table 4"></p><p>最常用消息传递原语是change，占所有用法的18.5%到43%。因此，我们有这样一种情况，即传统的共享内存通信仍然被大量使用，同时还有大量的消息传递原语。从bug的角度来看，这意味着我们拥有共享内存通信提供的所有令人兴奋的bug可能性，以及消息传递提供的所有bug可能性，而引起的bug是这两种风格的交互!</p><h2 id="Go并发BUG"><a href="#Go并发BUG" class="headerlink" title="Go并发BUG"></a>Go并发BUG</h2><p>作者搜索了GitHub应用程序的提交历史，以找到修复并发错误的提交(3，211)。从这171个样本中随机选择进行研究。</p><p>bug分为阻塞bug和非阻塞bug。当一个或多个goroutines在执行过程中无意中被卡住并且无法前进时，就会出现阻塞错误。这个定义是更广泛的死锁，可以包括没有循环等待的情况，而是等待其他goroutines没有提供的资源。85个bug是阻塞的，86个是非阻塞的。</p><p>bug还根据它们是与共享内存保护(105个bug)还是与消息传递(66个bug)相关，在第二维度进行分类。</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-5.jpeg" alt="Table 5"></p><h2 id="阻塞方面的BUG"><a href="#阻塞方面的BUG" class="headerlink" title="阻塞方面的BUG"></a>阻塞方面的BUG</h2><p>首先看看阻塞错误，其中42%与共享内存有关，58%与消息传递有关。回想一下，共享内存原语比消息传递原语使用得更广泛。</p><blockquote><p>与消息传递不太容易出错的普遍看法相反，在我们研究的Go应用程序中，错误的消息传递比错误的共享内存保护引起的阻塞错误更多。</p></blockquote><p>基于共享内存的bug包括所有常见的疑点，由于Go实现了RWMutex和Wait(见5.1.1)，出现了一些新的转折。</p><p>对于与消息传递相关的错误，其中许多是由于缺少通道上的发送或接收，或者关闭通道。</p><blockquote><p>所有由消息传递引起的阻塞错误都与Go的新消息传递语义(如通道)相关。它们可能很难检测，尤其是当消息传递操作与其他同步原语一起使用时。与普遍看法相反，消息传递比共享内存会导致更多的阻塞错误。</p></blockquote><p>调查这些bug的修复表明，一旦理解，修复就相当简单，修复的类型与bug原因相关联。这表明，在围棋中使用全自动或半自动工具来修复阻塞错误可能是一个有希望的方向。</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-7.jpeg" alt="Table 7"></p><p>Go的内置死锁检测器只能检测到研究中重现的21个阻塞错误中的两个。</p><h2 id="非阻塞方面BUG"><a href="#非阻塞方面BUG" class="headerlink" title="非阻塞方面BUG"></a>非阻塞方面BUG</h2><p>与消息传递相比，滥用共享内存原语导致的非阻塞错误更多。其中大约一半是由“传统的”共享内存错误模式造成的。还有几个错误是由于对Go语言特性缺乏理解造成的，特别是在goroutine中使用的匿名函数之前声明的局部变量的共享，以及WaitGroups的语义。</p><p><img src="https://s.gin.sh/blog/images/2019/golang-bugs-table-9.jpeg" alt="Table 9"></p><blockquote><p>为简化多线程编程而引入的新编程模型和新库本身可能会导致更多并发错误。</p></blockquote><p>虽然基于消息传递的非阻塞bug相对不太常见，“在一种语言中，消息传递的复杂设计会导致这些bug在与其他特定语言特性结合时尤其难以找到。</p><p>有趣的是，程序员修复由共享内存原语误用引起的错误时，更喜欢使用消息传递来完成。</p><p>Go的数据竞争检测器能够检测到研究中一半重现的非阻塞错误。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>令人惊讶的是，我们的研究表明，通过消息传递和共享内存一样容易产生并发错误，有时甚至更容易。</p></blockquote><p>程序员必须清楚地理解:</p><ul><li>使用匿名函数创建goroutine</li><li>缓冲通道与非缓冲通道的使用</li><li>使用select等待多通道操作的不确定性</li><li>正确使用特殊依赖时间</li></ul><blockquote><p>尽管这些特性都是为了简化多线程编程而设计的，但实际上，很难用它们编写正确的Go程序。</p></blockquote><p>很遗憾，我没有足够的空间来包含许多突出bug细节的说明性代码示例。如果你在围棋中积极发展，整篇论文很值得一读来研究它们。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Concurrency </tag>
            
            <tag> Translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Gin的Metrics中间件设计</title>
      <link href="/golang/the-gin-metrics-concept-and-usage-zh-cn/"/>
      <url>/golang/the-gin-metrics-concept-and-usage-zh-cn/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Gin的Metrics中间件设计"><a href="#基于Gin的Metrics中间件设计" class="headerlink" title="基于Gin的Metrics中间件设计"></a>基于Gin的Metrics中间件设计</h1><ul><li>项目地址 <a href="https://github.com/kylesliu/gin_metrics" target="_blank" rel="noopener">Gin Metrics</a></li></ul><p><img src="https://s.gin.sh/blog/images/2019/gin_exporter_v1.png" alt="gin_exporter_v1"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>现在针对Golang的的引用状态监控还比较少，决定开发一款针对Gin的一个Golang监控插件，可以非常容易的将引用的运行状监控起来，并且可以将</p></blockquote><blockquote><p>未完待续~~~~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Metrics </tag>
            
            <tag> Gin </tag>
            
            <tag> Grafana </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EXPLORING PROMETHEUS GO CLIENT METRICS</title>
      <link href="/golang/exploring-prometheus-go-client-metrics/"/>
      <url>/golang/exploring-prometheus-go-client-metrics/</url>
      
        <content type="html"><![CDATA[<h1 id="EXPLORING-PROMETHEUS-GO-CLIENT-METRICS"><a href="#EXPLORING-PROMETHEUS-GO-CLIENT-METRICS" class="headerlink" title="EXPLORING PROMETHEUS GO CLIENT METRICS"></a>EXPLORING PROMETHEUS GO CLIENT METRICS</h1><p><a href="https://povilasv.me/prometheus-go-metrics/" target="_blank" rel="noopener">https://povilasv.me/prometheus-go-metrics/</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Goruntime </tag>
            
            <tag> Metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Channel使用与简单的生产消费模型</title>
      <link href="/golang/golang-channel-shi-yong-yu-jian-dan-de-sheng-chan-xiao-fei-mo-xing/"/>
      <url>/golang/golang-channel-shi-yong-yu-jian-dan-de-sheng-chan-xiao-fei-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-Channel使用与简单的生产消费模型"><a href="#Golang-Channel使用与简单的生产消费模型" class="headerlink" title="Golang Channel使用与简单的生产消费模型"></a>Golang Channel使用与简单的生产消费模型</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Golang最亮的就是goruntime和channel的组合可以很容做好高并发，下面是一个简单的生产者和消费者模型适合入门学习。</p><p>channel 使用有特别多需要注意的地方下面是一些注意点。</p><p><img src="https://s.gin.sh/blog/images/2019/channel-tricks.png" alt="Channel Tricks"></p><h2 id="暴力关闭channel"><a href="#暴力关闭channel" class="headerlink" title="暴力关闭channel"></a>暴力关闭channel</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    jobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token comment" spellcheck="true">//    定时直接关闭channel</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//    无脑向channel发送数据【向已经关闭的channel发送数据会直接panic】</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            jobs <span class="token operator">&lt;-</span> i            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"produce:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//    在channel中读取数据</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"consume:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优雅关闭channel"><a href="#优雅关闭channel" class="headerlink" title="优雅关闭channel"></a>优雅关闭channel</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    jobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token comment" spellcheck="true">//    总时间限制</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>        timeout <span class="token operator">&lt;-</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//    生产</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//    时间用完停止channel</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>                <span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span>                <span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment" spellcheck="true">//    正常生产</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                jobs <span class="token operator">&lt;-</span> i                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"produce:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//    消费者</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"consume:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Goruntime </tag>
            
            <tag> Channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Elasticsearch To Storage Prometheus Data</title>
      <link href="/golang/use-elasticsearch-to-storage-prometheus-data/"/>
      <url>/golang/use-elasticsearch-to-storage-prometheus-data/</url>
      
        <content type="html"><![CDATA[<h1 id="Use-Elasticsearch-To-Storage-Prometheus-Data"><a href="#Use-Elasticsearch-To-Storage-Prometheus-Data" class="headerlink" title="Use Elasticsearch To Storage Prometheus Data"></a>Use Elasticsearch To Storage Prometheus Data</h1><ul><li>准备好Prometheus 与 Elasticsearch 环境</li></ul><ul><li><p>下载插件</p><pre><code>wget https://github.com/vvanholl/elasticsearch-prometheus-exporter/releases/download/7.3.0.0/prometheus-exporter-7.3.0.0.zip</code></pre></li><li><p>安装插件 &amp; 重启</p><pre><code>elasticsearch-plugin  install prometheus-exporter-7.3.0.0.jar service elasticsearch restart</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Goruntime </tag>
            
            <tag> Metrics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. Longest Substring Without Repeating Characters</title>
      <link href="/leetcode/0001-0100/0003.longest-substring-without-repeating-characters/"/>
      <url>/leetcode/0001-0100/0003.longest-substring-without-repeating-characters/</url>
      
        <content type="html"><![CDATA[<h1 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. Longest Substring Without Repeating Characters</a></h1><h2 id="英文题目"><a href="#英文题目" class="headerlink" title="英文题目"></a>英文题目</h2><p>Given a string, find the length of the longest substring without repeating characters.</p><p>Examples:<br>Given “abcabcbb”, the answer is “abc”, which the length is 3.<br>Given “bbbbb”, the answer is “b”, with the length of 1.<br>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给一个字符串，求最长的不重复子串。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>直接遍历，想到重复，利用MAP保存字符出现的记录并维护一个滑动窗口<br>同时，只要和子串的第一个重复就是算是重复的，所以只需要判断第一个就可以。可以建立一个256位大小的整型数，因为ASCII表共能表示256个字符。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//    维护一个滑动窗口依次向右扩张</span><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    res<span class="token punctuation">,</span> left <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    当前字符存在MAP中且位置位于滑动窗口内</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> left <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//    移动滑动窗口的做边界到当前字符上次出现的位置</span>            left <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//    当前字符并未出现，滑动窗口向右扩张</span>        m<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token operator">-</span>left<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">></span> y <span class="token punctuation">{</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span>    <span class="token keyword">return</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//    数组版本</span><span class="token keyword">func</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    allChar<span class="token punctuation">,</span> res<span class="token punctuation">,</span> left <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        allChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> allChar<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        allChar<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token operator">-</span>left<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">></span> y <span class="token punctuation">{</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span>    <span class="token keyword">return</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>时间复杂度：O(n).</li><li>空间复杂度：O(n).</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你同我一样热爱数据结构、算法、LeetCode，可以关注我 GitHub 上的 LeetCode 题解：<a href="https://github.com/kylesliu/awesome-golang-leetcode" target="_blank" rel="noopener">awesome-golang-leetcode</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. Add Two Numbers</title>
      <link href="/leetcode/0001-0100/0002.add-two-numbers/"/>
      <url>/leetcode/0001-0100/0002.add-two-numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a><a href="https://leetcode.com/problems/add-two-numbers" target="_blank" rel="noopener">2. Add Two Numbers</a></h1><h2 id="英文题目"><a href="#英文题目" class="headerlink" title="英文题目"></a>英文题目</h2><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example:</p><pre class="line-numbers language-go"><code class="language-go">Input<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span>Output<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">8</span>Explanation<span class="token punctuation">:</span> <span class="token number">342</span> <span class="token operator">+</span> <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>常考题目，链表相加。<br>有两个链表，链表节点分别代表数字的位数，求两个链表的和。例如:<br>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>代表的是:<br>342 + 465 = 807.</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>考察基本的线性表，按照十进制，把余数留到下一次个节点相加的时候就好了。<br>时间复杂度是o(max(m, n)).<br>非递归解法的时候要注意边界，只要有余数就要执行。<br>递归解法，可以只考虑两个节点相加，要进行两步，首先是节点相加，然后是相加的结果和余数相加。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> ListNode <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Val  <span class="token builtin">int</span>    Next <span class="token operator">*</span>ListNode<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>l1 <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> l2 <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    node <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> Next<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>    n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> tmp <span class="token operator">:=</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> node    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> n2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        sum <span class="token operator">/=</span> <span class="token number">10</span>        <span class="token keyword">if</span> n1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> n1<span class="token punctuation">.</span>Val            n1 <span class="token operator">=</span> n1<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        <span class="token keyword">if</span> n2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> n2<span class="token punctuation">.</span>Val            n2 <span class="token operator">=</span> n2<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        tmp<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">}</span>        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    <span class="token keyword">if</span> sum<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        tmp<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Val<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>时间复杂度：O(n2)。2次百里循环所以时间复杂度是O(n2)。</li><li>空间复杂度：O(1)</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你同我一样热爱数据结构、算法、LeetCode，可以关注我 GitHub 上的 LeetCode 题解：<a href="https://github.com/kylesliu/awesome-golang-leetcode" target="_blank" rel="noopener">awesome-golang-leetcode</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. Two Sum</title>
      <link href="/leetcode/0001-0100/0001.two-sum/"/>
      <url>/leetcode/0001-0100/0001.two-sum/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.com/problems/two-sum" target="_blank" rel="noopener">1. Two Sum</a></h1><h2 id="英文题目"><a href="#英文题目" class="headerlink" title="英文题目"></a>英文题目</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>Example:</p><pre class="line-numbers language-go"><code class="language-go">Given nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>Because nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个数组和一个数，求解相加等于这个数的数组下标。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>2次循环暴力破解</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> v<span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>时间复杂度：O(n2)。2次百里循环所以时间复杂度是O(n2)。</li><li>空间复杂度：O(1)</li></ul><h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>利用HASHMAP,全部操作都在一层循环中完成。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TwoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>        sub <span class="token operator">:=</span> target <span class="token operator">-</span> v        <span class="token comment" spellcheck="true">// MAP中存在满足要求的数直接返回</span>        <span class="token keyword">if</span> j<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>sub<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>j<span class="token punctuation">,</span> i<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果当前元素在MAP中不存在则将其PUSH到MAP</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Complexity Analysis</strong></p><ul><li>时间复杂度：O(n)。利用HASHMAP将时间复杂度降低一个数量级。</li><li>空间复杂度：O(1)</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你同我一样热爱数据结构、算法、LeetCode，可以关注我 GitHub 上的 LeetCode 题解：<a href="https://github.com/kylesliu/awesome-golang-leetcode" target="_blank" rel="noopener">awesome-golang-leetcode</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 常见面试题</title>
      <link href="/golang/golang-interview-question/"/>
      <url>/golang/golang-interview-question/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-常见面试题"><a href="#Golang-常见面试题" class="headerlink" title="Golang 常见面试题"></a>Golang 常见面试题</h1><h2 id="1-数组和切片的区别"><a href="#1-数组和切片的区别" class="headerlink" title="1.数组和切片的区别"></a>1.数组和切片的区别</h2><h2 id="2-map中的元素是否有序，hash冲突怎么解决"><a href="#2-map中的元素是否有序，hash冲突怎么解决" class="headerlink" title="2.map中的元素是否有序，hash冲突怎么解决"></a>2.map中的元素是否有序，hash冲突怎么解决</h2><p>map中是无序的。<a href="https://blog.csdn.net/porsche_gt3rs/article/details/79445707" target="_blank" rel="noopener">解决方法</a></p><h2 id="3-channel使用完需要关闭吗"><a href="#3-channel使用完需要关闭吗" class="headerlink" title="3.channel使用完需要关闭吗"></a>3.channel使用完需要关闭吗</h2><p>可以关闭，但是没有必要</p><h2 id="4-控制gorontime的数量由哪些"><a href="#4-控制gorontime的数量由哪些" class="headerlink" title="4.控制gorontime的数量由哪些"></a>4.控制gorontime的数量由哪些</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">func</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    wg <span class="token operator">=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>       wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token keyword">go</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等待所有goroutine退出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> gpool<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">type</span> pool <span class="token keyword">struct</span> <span class="token punctuation">{</span>    queue <span class="token keyword">chan</span> <span class="token builtin">int</span>    wg    <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>pool <span class="token punctuation">{</span>    <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>pool<span class="token punctuation">{</span>        queue<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>        wg<span class="token punctuation">:</span>    <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pool<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>delta <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> delta<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>queue <span class="token operator">&lt;-</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">></span> delta<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>        <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>queue    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pool<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>queue    p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>pool<span class="token punctuation">)</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-context是什么"><a href="#5-context是什么" class="headerlink" title="5.context是什么"></a>5.context是什么</h2><h2 id="6-如何优雅的退出携程"><a href="#6-如何优雅的退出携程" class="headerlink" title="6.如何优雅的退出携程"></a>6.如何优雅的退出携程</h2><h2 id="7-垃圾回收算法"><a href="#7-垃圾回收算法" class="headerlink" title="7.垃圾回收算法"></a>7.垃圾回收算法</h2><h2 id="8-MPG模型"><a href="#8-MPG模型" class="headerlink" title="8.MPG模型"></a>8.MPG模型</h2><h2 id="9-进程，线程，携程"><a href="#9-进程，线程，携程" class="headerlink" title="9.进程，线程，携程"></a>9.进程，线程，携程</h2><h2 id="10-通过参数传递切片，是值传递还是引用传递。被传递参数的方法一定会修改切片元素吗？"><a href="#10-通过参数传递切片，是值传递还是引用传递。被传递参数的方法一定会修改切片元素吗？" class="headerlink" title="10.通过参数传递切片，是值传递还是引用传递。被传递参数的方法一定会修改切片元素吗？"></a>10.通过参数传递切片，是值传递还是引用传递。被传递参数的方法一定会修改切片元素吗？</h2>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Goruntime </tag>
            
            <tag> Channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubeadm快速安装Kubernetes集群</title>
      <link href="/kubernetes/kubeadmin-kuai-su-an-zhuang-kubernates-ji-qun/"/>
      <url>/kubernetes/kubeadmin-kuai-su-an-zhuang-kubernates-ji-qun/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubeadm快速安装Kubernetes集群"><a href="#Kubeadm快速安装Kubernetes集群" class="headerlink" title="Kubeadm快速安装Kubernetes集群"></a>Kubeadm快速安装Kubernetes集群</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><blockquote><p>注意：本文采用的是Google Cloud的主机，跳过了GFW个限制。在国内需要设置各种源才能根据本文步骤正常使用。</p></blockquote><ul><li>准备主机</li></ul><table><thead><tr><th style="text-align:center">主机</th><th style="text-align:center">配置</th><th style="text-align:center">作用</th><th style="text-align:center">IP</th></tr></thead><tbody><tr><td style="text-align:center">kubernetes-master1</td><td style="text-align:center">Centos7,2核,8G内存,40G硬盘</td><td style="text-align:center">集群master节点</td><td style="text-align:center">34.73.166.205(<code>外</code>)/10.142.0.8(<code>内</code>)</td></tr><tr><td style="text-align:center">kubernetes-node1</td><td style="text-align:center">Centos7,2核,8G内存,40G硬盘</td><td style="text-align:center">集群node节点</td><td style="text-align:center">35.243.255.127(<code>外</code>)/10.142.0.9(<code>内</code>)</td></tr><tr><td style="text-align:center">kubernetes-node2</td><td style="text-align:center">Centos7,2核,8G内存,40G硬盘</td><td style="text-align:center">集群node节点</td><td style="text-align:center">34.74.128.163(<code>外</code>)/10.142.0.10(<code>内</code>)</td></tr><tr><td style="text-align:center">kubernetes-node3</td><td style="text-align:center">Centos7,2核,8G内存,40G硬盘</td><td style="text-align:center">集群node节点</td><td style="text-align:center">34.73.24.211(<code>外</code>)/10.142.0.11(<code>内</code>)</td></tr></tbody></table><h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h2><h3 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h3><ul><li>卸载原来的Docker</li></ul><pre class="line-numbers language-sh"><code class="language-sh">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装相关依赖</li></ul><pre class="line-numbers language-sh"><code class="language-sh">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 && \yum install -y --nogpgcheck cri-o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>添加镜像</li></ul><pre class="line-numbers language-sh"><code class="language-sh">yum-config-manager --add-repo=https://cbs.centos.org/repos/paas7-crio-311-candidate/x86_64/os/ && \sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加配置</li></ul><pre class="line-numbers language-sh"><code class="language-sh">mkdir -p /etc/systemd/system/docker.service.d && \sudo yum makecache fast && \sudo yum -y install docker-ce && \mkdir -p /etc/docker && cat <<EOF> /etc/docker/daemon.json{  "exec-opts": ["native.cgroupdriver=systemd"],  "log-driver": "json-file",  "log-opts": {    "max-size": "100m"  },  "storage-driver": "overlay2",  "storage-opts": [    "overlay2.override_kernel_check=true"  ]}EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置Docker服务</li></ul><pre class="line-numbers language-sh"><code class="language-sh">sudo systemctl start docker sudo systemctl enable docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sh"><code class="language-sh">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-enginesudo yum install -y yum-utils device-mapper-persistent-data lvm2 && \yum install -y --nogpgcheck cri-o && \yum-config-manager --add-repo=https://cbs.centos.org/repos/paas7-crio-311-candidate/x86_64/os/ && \sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo && \mkdir -p /etc/systemd/system/docker.service.d && \sudo yum makecache fast && \sudo yum -y install docker-ce && \mkdir -p /etc/docker && cat <<EOF> /etc/docker/daemon.json{  "exec-opts": ["native.cgroupdriver=systemd"],  "log-driver": "json-file",  "log-opts": {    "max-size": "100m"  },  "storage-driver": "overlay2",  "storage-opts": [    "overlay2.override_kernel_check=true"  ]}EOFsudo systemctl start docker sudo systemctl enable docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh"><code class="language-sh">#关闭防火墙systemctl stop firewalld#禁止防火墙开机启动systemctl disable firewalld#检查selinuxgetenforceDisabled#端口检查#关闭防火墙systemctl disable firewalldsystemctl stop firewalldsystemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h3><pre class="line-numbers language-sh"><code class="language-sh">cat <<EOF > /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpgexclude=kube*EOFsetenforce 0sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/configyum install -y kubelet kubeadm kubectl --disableexcludes=kubernetessystemctl enable --now kubeletcat <<EOF > kubeadm.yamlapiVersion: kubeadm.k8s.io/v1beta1kind: InitConfigurationcontrollerManager:  horizontal-pod-autoscaler-use-rest-clients: "true"  horizontal-pod-autoscaler-sync-period: "10s"  node-monitor-grace-period: "10s"apiServer:  runtime-config: "api/all=true"kubernetesVersion: "v1.14.1"EOFkubeadm init --config kubeadm.yamlmkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/configkubeadm join 10.142.0.8:6443 --token fif16e.z8wmqmyml2alnnxh \    --discovery-token-ca-cert-hash sha256:3a98b9a304e77b9741ce02e43075c8f2b6df82cdcbe7f8590f760bf6657f4319  --ignore-preflight-errors=allkubectl get nodekubectl describe node kubernetes-masterkubectl get pods -n kube-systemkubectl apply -f https://git.io/weave-kube-1.6kubectl get pods -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-开始安装"><a href="#3-开始安装" class="headerlink" title="3.开始安装"></a>3.开始安装</h2><ul><li>在master 获取Node加入的token<pre class="line-numbers language-shel"><code class="language-shel">kubeadm token create --print-join-command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>获取Dashbord的token</p><pre class="line-numbers language-shell"><code class="language-shell">kubectl get secretkubectl describe secret default-token-pqb9h kubectl -n kube-system get secret admin-token-whj4t -o jsonpath={.data.token}|base64 -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>admin-token.yml<br><code>`</code>yml<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1beta1<br>metadata:<br>name: admin<br>annotations:<br>  rbac.authorization.kubernetes.io/autoupdate: “true”<br>roleRef:<br>kind: ClusterRole<br>name: cluster-admin<br>apiGroup: rbac.authorization.k8s.io<br>subjects:</p></li></ul><ul><li>kind: ServiceAccount<br>name: admin<br>namespace: kube-system</li></ul><hr><p>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: admin<br>  namespace: kube-system<br>  labels:<br>    kubernetes.io/cluster-service: “true”<br>    addonmanager.kubernetes.io/mode: Reconcile<br><code>`</code></p><p><code>`</code>shell<br>kubectl create -f admin-token.yml<br>kubectl get secret -n kube-system | grep admin<br>kubectl describe secret/$(kubectl get secret -nkube-system |grep admin|awk ‘{print $1}’) -nkube-system</p><p><code></code></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Kubeadm </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu编译bitcoin源码</title>
      <link href="/linux/compile-bitcoin-source-code-in-ubuntu/"/>
      <url>/linux/compile-bitcoin-source-code-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="在Ubuntu编译bitcoin源码"><a href="#在Ubuntu编译bitcoin源码" class="headerlink" title="在Ubuntu编译bitcoin源码"></a>在Ubuntu编译bitcoin源码</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><pre class="line-numbers language-shell"><code class="language-shell">unubtu 18.06 2核 8G内存  香港节点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class="line-numbers language-shell"><code class="language-shell">apt-get updatesudo apt-get install -y build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3sudo apt-get install -y libboost-all-dev gitsudo apt-get install -y libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler//    注意这个包最新的是5.3sudo apt-get install -y libdb5.3++-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul><li>Clone 源代码</li></ul><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/bitcoin/bitcoin.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 Berkeley DB</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cd bitcoin./contrib/install_db4.sh `pwd`//    将DB的环境变量配置到/etc/profileexport BDB_PREFIX='/root/bitcoin/db4'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置</li></ul><pre class="line-numbers language-shell"><code class="language-shell">./autogen.sh./configure --with-incompatible-bdb make && make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>编译完成</li></ul><pre class="line-numbers language-shell"><code class="language-shell">---------------------------------------------------------------------- /bin/mkdir -p '/usr/local/bin'  /bin/bash ../libtool --preserve-dup-deps  --mode=install /usr/bin/install -c bitcoind bitcoin-cli bitcoin-tx bitcoin-wallet test/test_bitcoin bench/bench_bitcoin qt/bitcoin-qt qt/test/test_bitcoin-qt '/usr/local/bin'libtool: install: /usr/bin/install -c bitcoind /usr/local/bin/bitcoindlibtool: install: /usr/bin/install -c bitcoin-cli /usr/local/bin/bitcoin-clilibtool: install: /usr/bin/install -c bitcoin-tx /usr/local/bin/bitcoin-txlibtool: install: /usr/bin/install -c bitcoin-wallet /usr/local/bin/bitcoin-walletlibtool: install: /usr/bin/install -c test/test_bitcoin /usr/local/bin/test_bitcoinlibtool: install: /usr/bin/install -c bench/bench_bitcoin /usr/local/bin/bench_bitcoinlibtool: install: /usr/bin/install -c qt/bitcoin-qt /usr/local/bin/bitcoin-qtlibtool: install: /usr/bin/install -c qt/test/test_bitcoin-qt /usr/local/bin/test_bitcoin-qt /bin/mkdir -p '/usr/local/include' /usr/bin/install -c -m 644 script/bitcoinconsensus.h '/usr/local/include'make[3]: Leaving directory '/root/bitcoin/src'make[2]: Leaving directory '/root/bitcoin/src'make[1]: Leaving directory '/root/bitcoin/src'Making install in doc/manmake[1]: Entering directory '/root/bitcoin/doc/man'make[2]: Entering directory '/root/bitcoin/doc/man'make[2]: Nothing to be done for 'install-exec-am'. /bin/mkdir -p '/usr/local/share/man/man1' /usr/bin/install -c -m 644 bitcoind.1 bitcoin-qt.1 bitcoin-cli.1 bitcoin-tx.1 bitcoin-wallet.1 '/usr/local/share/man/man1'make[2]: Leaving directory '/root/bitcoin/doc/man'make[1]: Leaving directory '/root/bitcoin/doc/man'make[1]: Entering directory '/root/bitcoin'make[2]: Entering directory '/root/bitcoin'make[2]: Nothing to be done for 'install-exec-am'. /bin/mkdir -p '/usr/local/lib/pkgconfig' /usr/bin/install -c -m 644 libbitcoinconsensus.pc '/usr/local/lib/pkgconfig'make[2]: Leaving directory '/root/bitcoin'make[1]: Leaving directory '/root/bitcoin'root@iZj6c47i94k3xwfh4xzee9Z:~/bitcoin#  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s.gin.sh/blog/images/2019/bitcoin_install.png" alt="Install_Success"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Bitcoin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux日常检查命令</title>
      <link href="/linux/linux-daily-inspection-command/"/>
      <url>/linux/linux-daily-inspection-command/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux日常检查命令"><a href="#Linux日常检查命令" class="headerlink" title="Linux日常检查命令"></a>Linux日常检查命令</h1><h2 id="查看系统参数"><a href="#查看系统参数" class="headerlink" title="查看系统参数"></a>查看系统参数</h2><h3 id="基本参数详解"><a href="#基本参数详解" class="headerlink" title="基本参数详解"></a>基本参数详解</h3><ul><li>系统基本性能配置</li></ul><pre class="line-numbers language-shell"><code class="language-shell">root@info:~# sysctl -pvm.swappiness = 0net.ipv4.neigh.default.gc_stale_time = 120net.ipv4.conf.all.rp_filter = 0net.ipv4.conf.default.rp_filter = 0net.ipv4.conf.default.arp_announce = 2net.ipv4.conf.lo.arp_announce = 2net.ipv4.conf.all.arp_announce = 2net.ipv4.tcp_max_tw_buckets = 5000net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 1024net.ipv4.tcp_synack_retries = 2net.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv6.conf.lo.disable_ipv6 = 1net.ipv6.conf.eth0.disable_ipv6 = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件描述符</li></ul><pre class="line-numbers language-shell"><code class="language-shell">1. 什么是文件描述符？   内核利用文件描述符来访问文件, 打开现存文件或新建文件（建立）时，内核会返回一个文件描述符，读写文件也需要使用文件描述符来指定待读写的文件。所有执行I/O操作(包括网络socket操作)的系统调用都通过文件描述符2. 最大文件描述符介绍   1. 系统最大文件描述符限制   sysctl -a | grep fs.file-max （查看系统最大描述符）   echo "fs.file-max=1610270" >> /etc/sysctl.conf（修改最大描述符）   sysctl -p（立即生效）   2. 用户级最大文件描述限制   ulimit -n （查看用户最大描述符）   echo "* hard nofile 65535" >> /etc/security/limits.conf    echo "* soft nofile 65535" >> /etc/security/limits.conf*代表所有用户，支持具体用户（优先级高，不受*影响）。文件修改即生效，退出或打开新终端执行ulimit -n即看到修改效果         3. 具体某个进程（PID）最大描述符通过cat /proc/PID/limits  | grep "Max open files"  Limit         Soft Limit Hard Limit  Units Max open files  65536      65536      files     进程最大描述符受限与系统／用户级，以及进程本身相关代码程序限制，比如下面Golang代码将进程打开的最大描述符限制为10 var rLimit syscall.RlimitrLimit.Cur = 10if err := syscall.Setrlimit(syscall.RLIMIT_NOFILE, &rLimit); err != nil {    panic(err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3><ul><li><p>netstat 查看TCP状态<br><code>`</code>shell<br>netstat -tan|awk ‘$1~/tcp/{print $NF}’|sort|uniq -c|sort -nr</p><p>  98 ESTABLISHED<br>  90 TIME_WAIT<br>  17 LISTEN<br>  2 CLOSE_WAIT</p></li></ul><pre><code>- ss -s 查看TCP状态```shellss -sTotal: 262 (kernel 369)TCP:   211 (estab 98, closed 94, orphaned 0, synrecv 0, timewait 94/0), ports 0Transport Total     IP        IPv6*         369       -         -        RAW       0         0         0        UDP       4         3         1        TCP       117       93        24       INET      121       96        25       FRAG      0 </code></pre><ul><li>通过lsof 查看具体进程</li></ul><pre><code>lsof  -p 25542</code></pre><ul><li>strace 查看系统调研<br><code>`</code><br>strace -f -p 29083 -T -tt -o /root/strace_29083.log</li></ul><p>-tt 在每行输出的前面，显示毫秒级别的时间<br>-T 显示每次系统调用所花费的时间<br>-v 对于某些相关调用，把完整的环境变量，文件stat结构等打出来。<br>-f 跟踪目标进程，以及目标进程创建的所有子进程<br>-e 控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称<br>-o 把strace的输出单独写到指定的文件<br>-s 当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是32个字节<br>-p 指定要跟踪的进程pid, 要同时跟踪多个pid, 重复多次-p选项即可。/tmp/qtime2.log<br>tomcate多线程应用，我们需要追踪子进程运行情况，所以-f，其它参数大家看<br>解析应该可以理解</p><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMP学习之Apache添加SSL证书</title>
      <link href="/linux/lamp-xue-xi-zhi-apache-tian-jia-ssl-zheng-shu/"/>
      <url>/linux/lamp-xue-xi-zhi-apache-tian-jia-ssl-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="LAMP学习之Apache添加SSL证书"><a href="#LAMP学习之Apache添加SSL证书" class="headerlink" title="LAMP学习之Apache添加SSL证书"></a>LAMP学习之Apache添加SSL证书</h2><h2 id="环境装备"><a href="#环境装备" class="headerlink" title="环境装备"></a>环境装备</h2><ul><li>已经安装好了的一套Lamp环境，和</li><li>阅读过Httpd所有官方文档的的自信。</li></ul><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="1-下载证书"><a href="#1-下载证书" class="headerlink" title="1.下载证书"></a>1.下载证书</h3><blockquote><p>进入阿里云域名管理，再点击右边的SSL</p></blockquote><p><img src="http://oss.anonycurse.cn/article/images/20181016/mYcEkWLm1bhlJeFDGxXcsBsci3tMKWLhNFEvhBRs.png" alt="进入SSL" title="进入SSL"></p><blockquote><p>申请完证书后记得点击左上角返回列表下载证书<br><img src="http://oss.anonycurse.cn/article/images/20181016/LA9MaQ3IqD4QMrB5OhAhPxXPG1PUYssGOfOh5qcn.png" alt="申请SSL" title="申请SSL"></p></blockquote><p><img src="http://oss.anonycurse.cn/article/images/20181016/W9fdbI03VOMYjSJszyHRM0bGlwKA9jT4ukwV2jkZ.png" alt="下载证书" title="下载证书"></p><p><img src="http://oss.anonycurse.cn/article/images/20181016/muxi4oUZfjctSdoYw4CiLr9z2eRbBzv6uuksYZCR.png" alt="下载证书2" title="下载证书2"></p><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><blockquote><p>我在网上看见有人把SSL证书直接放在项目里面，对于这种举动我感觉还是有点小怕，<br>最后我觉得证书放在在apache 的conf目录下</p></blockquote><p><img src="http://oss.anonycurse.cn/article/images/20181016/1njDCGjbCdHEEuBHLTpxbZHshGTQuuCNRuu1TNbQ.png" alt="证书路径" title="证书路径"></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul><li>1.httpd.conf</li></ul><pre class="line-numbers language-apache"><code class="language-apache">#1. 开启必要的moduleLoadModule socache_shmcb_module modules/mod_socache_shmcb.soLoadModule ssl_module modules/mod_ssl.so#2.开启SSL配置文件Include conf/extra/httpd-ssl.conf#3.导入外部主机配置文件#注意，我安装Apache的时候是给每个网站添加一个配置文件，所以会有一个vhosts专门存放网站主机配置文件# Virtual hostsInclude conf/vhosts/*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>conf/extra/httpd-ssl.conf<blockquote><p>这个配置文件和httpd.conf有点类型，存放了一些关于HTTPS的配置，包括一些全局配置和一个默认的虚拟主机配置，这个我喜欢删掉默认想虚拟主机，只保留一些全局配置就好</p></blockquote></li></ul><pre class="line-numbers language-apache"><code class="language-apache">Listen 443SSLCipherSuite HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUMSSLHonorCipherOrder onSSLProtocol all -SSLv2 -SSLv3SSLProxyProtocol all -SSLv3SSLPassPhraseDialog  builtinSSLSessionCache        "shmcb:/web/bin/apache/logs/ssl_scache(512000)"SSLSessionCacheTimeout  300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>conf/vhosts/<a href="http://www.angexinjia.com.conf" target="_blank" rel="noopener">www.angexinjia.com.conf</a></li></ul><pre class="line-numbers language-apache"><code class="language-apache">#默认HTTP主机<VirtualHost *:80>    DocumentRoot "/web/www/www.anonycurse.com/public"    ServerName www.anonycurse.com    ServerAlias www.anonycurse.com www.anonycurse.com#    ErrorLog logs/www.anonycurse.com.error.log    CustomLog logs/www.anonycurse.com.access.log common# Laravel 项目配置【开启HTTPS后可以注释掉】#    <Directory "/web/www/www.anonycurse.com/public">#        AllowOverride All#        Require all granted#        DirectoryIndex index.php#    </Directory># 开启后HTTP跳转HTTPS配置    RewriteEngine on    RewriteCond   %{HTTPS} !=on    RewriteRule   ^(.*)  https://www.anonycurse.com$1 [R=permanent,L]</VirtualHost><VirtualHost *:443>    DocumentRoot "/web/www/www.anonycurse.com/public"#  因为是HTTPS单域名所以不需要太多Alias        ServerName www.anonycurse.com    ServerAlias www.anonycurse.com    ErrorLog logs/www.anonycurse.com.ssl.error.log    CustomLog logs/www.anonycurse.com.access.ssl.log common#    HTTPS Laravel 配置    <Directory "/web/www/www.anonycurse.com/public">        AllowOverride All        Require all granted        DirectoryIndex index.php        SSLOptions +StdEnvVars    </Directory>#    证书配置    SSLEngine on    SSLCertificateFile /web/bin/apache/conf/ssl-key/www.anonycurse.com/public.pem    SSLCertificateKeyFile /web/bin/apache/conf/ssl-key/www.anonycurse.com/1541114560394.key    SSLCertificateChainFile /web/bin/apache/conf/ssl-key/www.anonycurse.com/chain.pem    <FilesMatch "\.(cgi|shtml|phtml|php)$">        SSLOptions +StdEnvVars    </FilesMatch>    BrowserMatch "MSIE [2-5]" \         nokeepalive ssl-unclean-shutdown \         downgrade-1.0 force-response-1.0    CustomLog "/web/bin/apache/logs/ssl_request_log" \          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"</VirtualHost><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Apache </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置文件详解</title>
      <link href="/linux/nginx-pei-zhi-wen-jian-xiang-jie/"/>
      <url>/linux/nginx-pei-zhi-wen-jian-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx配置文件详解"><a href="#Nginx配置文件详解" class="headerlink" title="Nginx配置文件详解"></a>Nginx配置文件详解</h1><pre><code># 运行用户user    www;# 启动进程,通常设置成和cpu的数量相等,或设置为autoworker_processes    1;# 设置全局错误日志存储位置# error_log     /var/wwwlogs/error.log;# error_log     /var/wwwlogs/error.log  notice;# error_log     /var/wwwlogs/error.log  info;# 设置pid文件存储位置# pid   /var/wwwlogs/nginx.pid;# 工作模式及连接数上限events {    # epoll是多路复用IO(I/O Multiplexing)中的一种方式    use   epoll;     # 单个后台worker process进程的最大并发链接数        worker_connections  1024;    # 最大客户连接数，由于浏览器默认使用两个并发连接，注意：此值不是一个nginx参数！！！！！！！！！！！    # 作为普通HTTP服务器    # max_clients = worker_processes * worker_connections / 2    # 作为反向代理服务器    # max_clients = worker_processes * worker_connections / 4}http {    # 设定mime类型,类型由mime.type文件定义    include         mime.types;    default_type    application/octet-stream;    # 设定日志格式    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39; &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39; &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    # 日志存储路径与格式    access_log  /var/wwwlogs/access.log  main;    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，    # 对于普通应用，必须设为 on,    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，    # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.    sendfile        on;    # tcp_nopush    on;    # 连接超时时间    keepalive_timeout   60;    tcp_nodelay         on;    # 开启gzip压缩    gzip                on;    gzip_min_length     1k;    gzip_buffers        4 16k;    gzip_http_version   1.0;    gzip_comp_level     2;    gzip_types          text/plain application/x-javascript text/css application/xml;    gzip_vary           on;    # 设定请求缓冲    client_header_buffer_size    128k;    large_client_header_buffers  4 128k;    # 设定虚拟主机配置    server {        # 监听80端口        listen    80;        # 定义域名 www.test.com 多个使用空格隔开        server_name  www.test.com;        # 默认网站根目录位置        root html;        # 定义首页索引文件的名称        index index.php index.html index.htm;        # 设定本虚拟主机的访问日志        access_log /var/wwwlogs/nginx.access.log    main;        # 默认请求        location / {            # 定义首页索引文件的名称            index   index.php index.html index.htm;        }        # 定义错误提示页面        error_page  500 502 503 504 /50x.html;        location = /50x.html {        }        # 静态文件，nginx自己处理        location ~ ^/(images|javascript|js|css|flash|media|static)/ {            # 过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。            expires 30d;        }        # PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.        location ~ .php$ {            fastcgi_pass    127.0.0.1:9000;            fastcgi_index   index.php;            fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;            include         fastcgi_params;        }        # 禁止访问 .tpl 文件        location ~ /.tpl {            deny    all;        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解密Go语言之Slice</title>
      <link href="/golang/depth-decrypting-the-slice-of-the-go-language/"/>
      <url>/golang/depth-decrypting-the-slice-of-the-go-language/</url>
      
        <content type="html"><![CDATA[<h1 id="深度解密Go语言之Slice"><a href="#深度解密Go语言之Slice" class="headerlink" title="深度解密Go语言之Slice"></a>深度解密Go语言之Slice</h1><p><a href="https://www.cnblogs.com/qcrao-2018/p/10631989.html" target="_blank" rel="noopener">原文地址</a><br><a href="">源码地址</a></p><p>Go 语言的 <code>slice</code> 很好用，不过也有一些坑。<code>slice</code> 是 Go 语言一个很重要的数据结构。网上已经有很多文章写过了，似乎没必要再写。但是每个人看问题的视角不同，写出来的东西自然也不一样。我这篇会从更底层的汇编语言去解读它。而且在我写这篇文章的过程中，发现绝大部分文章都存在一些问题，文章里会讲到，这里先不展开。</p><p>我希望本文可以终结这个话题，下次再有人想和你讨论 <code>slice</code>，直接把这篇文章的链接丢过去就行了。</p><h2 id="当我们在说-slice-时，到底在说什么"><a href="#当我们在说-slice-时，到底在说什么" class="headerlink" title="当我们在说 slice 时，到底在说什么"></a>当我们在说 slice 时，到底在说什么</h2><p>slice 翻译成中文就是切片，它和数组（array）很类似，可以用下标的方式进行访问，如果越界，就会产生 panic。但是它比数组更灵活，可以自动地进行扩容。<br>了解 slice 的本质，最简单的方法就是看它的源代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// runtime/slice.go</span><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>    array unsafe<span class="token punctuation">.</span>Pointer <span class="token comment" spellcheck="true">// 元素指针</span>    <span class="token builtin">len</span>   <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 长度 </span>    <span class="token builtin">cap</span>   <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 容量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到了吗，slice 共有三个属性：</p><ul><li><code>指针:</code>指向底层数组；</li><li><code>长度:</code>表示切片可用元素的个数，也就是说使用下标对 slice 的元素进行访问时，下标不能超过 slice 的长度；</li><li><code>容量:</code>底层数组的元素个数，容量 &gt;= 长度。在底层数组不进行扩容的情况下，容量也是 slice 可以扩张的最大限度。</li></ul><p><img src="https://user-images.githubusercontent.com/7698088/55270142-876c2000-52d6-11e9-99e5-2e921fc2d430.png" alt=""></p><p>注意，底层数组是可以被多个 slice 同时指向的，因此对一个 slice 的元素进行操作是有可能影响到其他 slice 的。</p><h2 id="slice-的创建"><a href="#slice-的创建" class="headerlink" title="slice 的创建"></a>slice 的创建</h2><p>创建 slice 的方式有以下几种：</p><pre class="line-numbers language-go"><code class="language-go">序号    方式    代码示例<span class="token number">1</span>    直接声明    <span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token number">2</span>    <span class="token builtin">new</span>    slice <span class="token operator">:=</span> <span class="token operator">*</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token number">3</span>    字面量    slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token number">4</span>    <span class="token builtin">make</span>    slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token number">5</span>    从切片或数组“截取”    slice <span class="token operator">:=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> 或 slice <span class="token operator">:=</span> sourceSlice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接声明"><a href="#直接声明" class="headerlink" title="直接声明"></a>直接声明</h3><p>第一种创建出来的 slice 其实是一个 nil slice。它的长度和容量都为0。和nil比较的结果为true。</p><p>这里比较混淆的是empty slice，它的长度和容量也都为0，但是所有的空切片的数据指针都指向同一个地址 0xc42003bda0。空切片和 nil 比较的结果为false。</p><p>它们的内部结构如下图：</p><p><img src="https://user-images.githubusercontent.com/7698088/54864985-ac720780-4d99-11e9-8386-68ef68880c8d.png" alt=""></p><pre class="line-numbers language-go"><code class="language-go">创建方式    <span class="token boolean">nil</span>切片    空切片方式一    <span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>方式二    <span class="token keyword">var</span> s4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>长度    <span class="token number">0</span>    <span class="token number">0</span>容量    <span class="token number">0</span>    <span class="token number">0</span>和 <span class="token boolean">nil</span> 比较    <span class="token boolean">true</span>    <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>nil</code> 切片和空切片很相似，长度和容量都是0，官方建议尽量使用 <code>nil</code> 切片。</p><p>关于<code>nil slice</code>和<code>empty slice</code>的探索可以参考公众号“码洞”作者老钱写的一篇文章《深度解析 Go 语言中「切片」的三种特殊状态》，地址附在了参考资料部分。</p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>比较简单，直接用<code>初始化表达式</code>创建。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token number">9</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>唯一值得注意的是上面的代码例子中使用了索引号，直接赋值，这样，其他未注明的元素则默认 0 值。</p><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>make函数需要传入三个参数：切片类型，长度，容量。当然，容量可以不传，默认和长度相等。</p><p>上篇文章《走进Go的底层》中，我们学到了汇编这个工具，这次我们再次请出汇编来更深入地看看<code>slice</code>。如果没看过上篇文章，建议先回去看完，再继续阅读本文效果更佳。</p><p>先来一小段玩具代码，使用 <code>make</code> 关键字创建 <code>slice</code>：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 长度为5，容量为10</span>    slice<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 索引为2的元素赋值为2</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行如下命令，得到 Go 汇编代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> tool compile <span class="token operator">-</span>S main<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token number">0x0000</span> <span class="token function">00000</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>TEXT    <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span> $<span class="token number">96</span><span class="token operator">-</span><span class="token number">0</span><span class="token number">0x0000</span> <span class="token function">00000</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">MOVQ</span>    <span class="token punctuation">(</span>TLS<span class="token punctuation">)</span><span class="token punctuation">,</span> CX<span class="token number">0x0009</span> <span class="token function">00009</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>CMPQ    SP<span class="token punctuation">,</span> <span class="token function">16</span><span class="token punctuation">(</span>CX<span class="token punctuation">)</span><span class="token number">0x000d</span> <span class="token function">00013</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>JLS     <span class="token number">228</span><span class="token number">0x0013</span> <span class="token function">00019</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>SUBQ    $<span class="token number">96</span><span class="token punctuation">,</span> SP<span class="token number">0x0017</span> <span class="token function">00023</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>MOVQ    BP<span class="token punctuation">,</span> <span class="token function">88</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x001c</span> <span class="token function">00028</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>LEAQ    <span class="token function">88</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> BP<span class="token number">0x0021</span> <span class="token function">00033</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>FUNCDATA    $<span class="token number">0</span><span class="token punctuation">,</span> gclocals·<span class="token function">69c1753bd5f81501d95132d08af04464</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x0021</span> <span class="token function">00033</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>FUNCDATA    $<span class="token number">1</span><span class="token punctuation">,</span> gclocals·<span class="token function">57cc5e9a024203768cbab1c731570886</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x0021</span> <span class="token function">00033</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>LEAQ    <span class="token keyword">type</span><span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x0028</span> <span class="token function">00040</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>MOVQ    AX<span class="token punctuation">,</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x002c</span> <span class="token function">00044</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">8</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x0035</span> <span class="token function">00053</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">10</span><span class="token punctuation">,</span> <span class="token function">16</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x003e</span> <span class="token function">00062</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>PCDATA  $<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">0</span><span class="token number">0x003e</span> <span class="token function">00062</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>CALL    runtime<span class="token punctuation">.</span><span class="token function">makeslice</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x0043</span> <span class="token function">00067</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>MOVQ    <span class="token function">24</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x0048</span> <span class="token function">00072</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>MOVQ    <span class="token function">32</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> CX<span class="token number">0x004d</span> <span class="token function">00077</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">)</span>MOVQ    <span class="token function">40</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> DX<span class="token number">0x0052</span> <span class="token function">00082</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>CMPQ    CX<span class="token punctuation">,</span> $<span class="token number">2</span><span class="token number">0x0056</span> <span class="token function">00086</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>JLS     <span class="token number">221</span><span class="token number">0x005c</span> <span class="token function">00092</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">16</span><span class="token punctuation">(</span>AX<span class="token punctuation">)</span><span class="token number">0x0064</span> <span class="token function">00100</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    AX<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_2<span class="token operator">+</span><span class="token function">64</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x0069</span> <span class="token function">00105</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    CX<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_2<span class="token operator">+</span><span class="token function">72</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x006e</span> <span class="token function">00110</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    DX<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_2<span class="token operator">+</span><span class="token function">80</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x0073</span> <span class="token function">00115</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">48</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x007c</span> <span class="token function">00124</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">56</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x0085</span> <span class="token function">00133</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>LEAQ    <span class="token keyword">type</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x008c</span> <span class="token function">00140</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    AX<span class="token punctuation">,</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x0090</span> <span class="token function">00144</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>LEAQ    <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_2<span class="token operator">+</span><span class="token function">64</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x0095</span> <span class="token function">00149</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    AX<span class="token punctuation">,</span> <span class="token function">8</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x009a</span> <span class="token function">00154</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>PCDATA  $<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">1</span><span class="token number">0x009a</span> <span class="token function">00154</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>CALL    runtime<span class="token punctuation">.</span><span class="token function">convT2Eslice</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x009f</span> <span class="token function">00159</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    <span class="token function">16</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x00a4</span> <span class="token function">00164</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    <span class="token function">24</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> CX<span class="token number">0x00a9</span> <span class="token function">00169</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    AX<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">48</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x00ae</span> <span class="token function">00174</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    CX<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">56</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x00b3</span> <span class="token function">00179</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>LEAQ    <span class="token string">""</span><span class="token punctuation">.</span><span class="token punctuation">.</span>autotmp_1<span class="token operator">+</span><span class="token function">48</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> AX<span class="token number">0x00b8</span> <span class="token function">00184</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    AX<span class="token punctuation">,</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x00bc</span> <span class="token function">00188</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">8</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x00c5</span> <span class="token function">00197</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>MOVQ    $<span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">16</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x00ce</span> <span class="token function">00206</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>PCDATA  $<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">1</span><span class="token number">0x00ce</span> <span class="token function">00206</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">)</span>CALL    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x00d3</span> <span class="token function">00211</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>MOVQ    <span class="token function">88</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> BP<span class="token number">0x00d8</span> <span class="token function">00216</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>ADDQ    $<span class="token number">96</span><span class="token punctuation">,</span> SP<span class="token number">0x00dc</span> <span class="token function">00220</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>RET<span class="token number">0x00dd</span> <span class="token function">00221</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>PCDATA  $<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">0</span><span class="token number">0x00dd</span> <span class="token function">00221</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>CALL    runtime<span class="token punctuation">.</span><span class="token function">panicindex</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x00e2</span> <span class="token function">00226</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>UNDEF<span class="token number">0x00e4</span> <span class="token function">00228</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>NOP<span class="token number">0x00e4</span> <span class="token function">00228</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>PCDATA  $<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token operator">-</span><span class="token number">1</span><span class="token number">0x00e4</span> <span class="token function">00228</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>CALL    runtime<span class="token punctuation">.</span><span class="token function">morestack_noctxt</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span class="token number">0x00e9</span> <span class="token function">00233</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>JMP     <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先说明一下，Go 语言汇编 FUNCDATA 和 PCDATA 是编译器产生的，用于保存一些和垃圾收集相关的信息，我们先不用 care。</p><p>以上汇编代码行数比较多，没关系，因为命令都比较简单，而且我们的 Go 源码也足够简单，没有理由看不明白。</p><p>我们先从上到下扫一眼，看到几个关键函数：</p><pre class="line-numbers language-go"><code class="language-go">CALL    runtime<span class="token punctuation">.</span><span class="token function">makeslice</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>CALL    runtime<span class="token punctuation">.</span><span class="token function">convT2Eslice</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>CALL    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>CALL    runtime<span class="token punctuation">.</span><span class="token function">morestack_noctxt</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go">序号    功能<span class="token number">1</span>    创建slice<span class="token number">2</span>    类型转换<span class="token number">3</span>    打印函数<span class="token number">4</span>    栈空间扩容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1是创建 <code>slice</code> 相关的；<br>2是类型转换；调用 <code>fmt.Println</code>需要将 <code>slice</code> 作一个转换；<br>3是打印语句；<br>4是栈空间扩容函数，在函数开始处，会检查当前栈空间是否足够，不够的话需要调用它来进行扩容。暂时可以忽略。</p><p>调用了函数就会涉及到参数传递，Go 的参数传递都是通过 栈空间完成的。接下来，我们详细分析这整个过程。</p><pre class="line-numbers language-go"><code class="language-go">行数    作用<span class="token number">1</span>    main函数定义，栈帧大小为 96B<span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span>    判断栈是否需要进行扩容，如果需要则跳到 <span class="token number">228</span>，这里会调用 runtime<span class="token punctuation">.</span><span class="token function">morestack_noctxt</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span> 进行栈扩容操作。具体细节后续还会有文章来讲<span class="token number">5</span><span class="token operator">-</span><span class="token number">9</span>    将 caller BP 压栈，具体细节后面会讲到<span class="token number">10</span><span class="token operator">-</span><span class="token number">15</span>    调用 runtime<span class="token punctuation">.</span><span class="token function">makeslice</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span> 函数及准备工作。<span class="token operator">*</span>_type表示的是 <span class="token builtin">int</span>，也就是 slice 元素的类型。这里对应的源码是第<span class="token number">6</span>行，也就是调用 <span class="token builtin">make</span> 创建 slice 的那一行。<span class="token number">5</span> 和 <span class="token number">10</span> 分别代表长度和容量，函数参数会在栈顶准备好，之后执行函数调用命令 CALL，进入到被调用函数的栈帧，就会按顺序从 caller 的栈顶取函数参数<span class="token number">16</span><span class="token operator">-</span><span class="token number">18</span>    接收 makeslice的返回值，通过 move 移动到寄存器中<span class="token number">19</span><span class="token operator">-</span><span class="token number">21</span>    给数组索引值为 <span class="token number">2</span> 的元素赋上值 <span class="token number">2</span>，因为是 <span class="token builtin">int</span> 型的 slice，元素大小为<span class="token number">8</span>字节，所以 MOVQ $<span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">16</span><span class="token punctuation">(</span>AX<span class="token punctuation">)</span> 此命令就是将 <span class="token number">2</span> 搬到索引为 <span class="token number">2</span> 的位置。这里还会对索引值的大小进行检查，如果越界，则会跳转到 <span class="token number">221</span>，执行 <span class="token builtin">panic</span> 函数<span class="token number">22</span><span class="token operator">-</span><span class="token number">26</span>    分别通过寄存器 AX，CX，DX 将 makeslice 的返回值 move 到内存的其他位置，也称为局部变量，这样就构造出了 slice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://user-images.githubusercontent.com/7698088/54982728-5fcf3c00-4fe6-11e9-819b-9c5b45cc93bf.png" alt=""></p><p>左边是栈上的数据，右边是堆上的数据。array 指向 slice 的底层数据，被分配到堆上了。注意，栈上的地址是从高向低增长；堆则从低向高增长。栈左边的数字表示对应的汇编代码的行数，栈右边箭头则表示栈地址。（48）SP、（56）SP 表示的内容接着往下看。</p><p>注意，在图中，栈地址是从下往上增长，所以 SP 表示的是图中 *_type 所在的位置，其它的依此类推。</p><pre class="line-numbers language-go"><code class="language-go">行数    作用<span class="token number">27</span><span class="token operator">-</span><span class="token number">32</span>    准备调用 runtime<span class="token punctuation">.</span><span class="token function">convT2Eslice</span><span class="token punctuation">(</span>SB<span class="token punctuation">)</span>的函数参数<span class="token number">33</span><span class="token operator">-</span><span class="token number">36</span>    接收返回值，通过AX，CX寄存器 move 到<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>SP、（<span class="token number">56</span>）SP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>convT2Eslice 的函数声明如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">convT2Eslice</span><span class="token punctuation">(</span>t <span class="token operator">*</span>_type<span class="token punctuation">,</span> elem unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">)</span> <span class="token punctuation">(</span>e eface<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数是指针 <code>*_type</code>，<code>_type是</code>一个表示类型的结构体，这里传入的就是 <code>slice</code>的类型 <code>[]int</code>；第二个参数则是元素的指针，这里传入的就是 <code>slice</code> 底层数组的首地址。</p><p>返回值 eface 的结构体定义如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> eface <span class="token keyword">struct</span> <span class="token punctuation">{</span>    _type <span class="token operator">*</span>_type    data  unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于我们会调用 <code>fmt.Println(slice)</code>，看下函数原型：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Println 接收 interface 类型，因此我们需要将 <code>slice</code> 转换成 <code>interface</code> 类型。由于 <code>slice</code> 没有方法，是个<code>空 interface</code>。因此会调用 <code>convT2Eslice</code> 完成这一转换过程。`</p><p><code>convT2Eslice</code> 函数返回的是类型指针和数据地址。源码就不贴了，大体流程是：调用 <code>mallocgc</code> 分配一块内存，把数据 <code>copy</code>进到新的内存，然后返回这块内存的地址，<code>*_type</code> 则直接返回传入的参数。</p><p><img src="https://user-images.githubusercontent.com/7698088/55271648-2d298a00-52eb-11e9-9dd0-e1bcc1fe33d0.png" alt=""></p><p><code>32(SP)</code> 和 <code>40(SP)</code> 其实是 <code>makeslice</code> 函数的返回值，这里可以忽略。</p><p>还剩 <code>fmt.Println(slice)</code> 最后一个函数调用了，我们继续。</p><pre class="line-numbers language-go"><code class="language-go">行数    作用<span class="token number">37</span><span class="token operator">-</span><span class="token number">40</span>    准备 Println 函数参数。共<span class="token number">3</span>个参数，第一个是类型地址，还有两个 <span class="token number">1</span>，这块暂时还不知道为什么要传，有了解的同学可以在文章后面留言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以调用 <code>fmt.Println(slice)</code> 时，实际是传入了一个 <code>slice</code>类型的<code>eface</code>地址。这样，<code>Println</code>就可以访问类型中的数据，最终给“打印”出来。</p><p><img src="https://user-images.githubusercontent.com/7698088/55271702-1f283900-52ec-11e9-9d3f-d8eb754ef23c.png" alt=""></p><p>最后，我们看下 main 函数栈帧的开始和收尾部分。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token number">0x0013</span> <span class="token function">00019</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>SUBQ    $<span class="token number">96</span><span class="token punctuation">,</span> SP<span class="token number">0x0017</span> <span class="token function">00023</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>MOVQ    BP<span class="token punctuation">,</span> <span class="token function">88</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token number">0x001c</span> <span class="token function">00028</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>LEAQ    <span class="token function">88</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> BP…………………………<span class="token number">0x00d3</span> <span class="token function">00211</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>MOVQ    <span class="token function">88</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">,</span> BP<span class="token number">0x00d8</span> <span class="token function">00216</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">)</span>ADDQ    $<span class="token number">96</span><span class="token punctuation">,</span> SPRET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BP</code>可以理解为保存了当前函数栈帧栈底的地址，SP则保存栈顶的地址。</p><p>初始，<code>BP</code> 和 <code>SP</code> 分别有一个初始状态。</p><p>main 函数执行的时候，先根据 <code>main</code> 函数栈帧大小确定 <code>SP</code> 的新指向，使得 <code>main</code> 函数栈帧大小达到 <code>96B</code>。之后把老的 <code>BP</code> 保存到 <code>main</code> 函数栈帧的底部，并使 <code>BP</code> 寄存器重新指向新的栈底，也就是 <code>main</code> 函数栈帧的栈底。</p><p>最后，当 <code>main</code> 函数执行完毕，把它栈底的 <code>BP</code> 给回弹回到 <code>BP</code> 寄存器，恢复调用前的初始状态。一切都像是没有发生一样，完美的现场。<br><img src="https://user-images.githubusercontent.com/7698088/54874022-24821100-4e1e-11e9-805b-408c29b3c1c4.png" alt=""><br>这部分，又详细地分析了一遍函数调用的过程。一方面，让大家复习一下上一篇文章讲的内容；另一方面，向大家展示如何找到 Go 中的一个函数背后真实调用了哪些函数。像例子中，我们就看到了 <code>make</code> 函数背后，实际上是调用了 <code>makeslice</code> 函数；还有一点，让大家对汇编不那么“惧怕”，可以轻松地分析一些东西。</p><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p>截取也是比较常见的一种创建 slice 的方法，可以从数组或者 slice 直接截取，当然需要指定起止索引位置。</p><p>基于已有 slice 创建新 slice 对象，被称为 <code>reslice</code>。新 slice 和老 slice 共用底层数组，新老 slice 对底层数组的更改都会影响到彼此。基于数组创建的新 slice 对象也是同样的效果：对数组或 slice 元素作的更改都会影响到彼此。</p><p>值得注意的是，新老 slice 或者新 slice 老数组互相影响的前提是两者共用底层数组，如果因为执行 <code>append</code> 操作使得新 slice 底层数组扩容，移动到了新的位置，两者就不会相互影响了。所以，<code>问题的关键在于两者是否会共用底层数组</code>。</p><p>截取操作采用如下方式：</p><pre class="line-numbers language-go"><code class="language-go"> data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span> slice <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// data[low, high, max]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对 <code>data</code> 使用3个索引值，截取出新的 <code>slice</code>。这里 <code>data</code> 可以是数组或者 <code>slice</code>。<code>low</code> 是最低索引值，这里是闭区间，也就是说第一个元素是 <code>data</code> 位于 <code>low</code> 索引处的元素；而 <code>high</code> 和 <code>max</code> 则是开区间，表示最后一个元素只能是索引 <code>high-1</code> 处的元素，而最大容量则只能是索引 <code>max-1</code> 处的元素。</p><pre class="line-numbers language-go"><code class="language-go">max <span class="token operator">>=</span> high <span class="token operator">>=</span> low<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当 <code>high == low</code>时，新 <code>slice</code> 为空。</p><p>还有一点，<code>high</code> 和 <code>max</code> 必须在老数组或者老 <code>slice</code> 的容量<code>（cap）</code>范围内。</p><p>来看一个例子，来自雨痕大佬《Go学习笔记》第四版，P43页，参考资料里有开源书籍地址。这里我会进行扩展，并会作详细说明：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>    s1 <span class="token operator">:=</span> slice<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    s2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看下代码运行的结果：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">100</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">20</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">100</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们来走一遍代码，初始状态如下：</p><pre class="line-numbers language-go"><code class="language-go">slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>s1 <span class="token operator">:=</span> slice<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>s2 <span class="token operator">:=</span> s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>s1</code> 从 <code>slice</code> 索引2（闭区间）到索引5（开区间，元素真正取到索引4），长度为3，容量默认到数组结尾，为8。<br><code>s2</code> 从 <code>s1</code> 的索引2（闭区间）到索引6（开区间，元素真正取到索引5），容量到索引7（开区间，真正到索引6），为5。</p><p><img src="https://user-images.githubusercontent.com/7698088/54960948-c5490b80-4f99-11e9-8772-66d102caae8e.png" alt=""></p><p>接着，向 <code>s2</code> 尾部追加一个元素 <code>100</code>：</p><pre class="line-numbers language-go"><code class="language-go">s2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>s2</code> 容量刚好够，直接追加。不过，这会修改原始数组对应位置的元素。这一改动，数组和 <code>s1</code> 都可以看得到。</p><p><img src="https://user-images.githubusercontent.com/7698088/54960896-8ca93200-4f99-11e9-86de-df4d85cca135.png" alt=""></p><p>再次向 <code>s2</code> 追加元素200：</p><pre class="line-numbers language-go"><code class="language-go">s2 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时，<code>s2</code> 的容量不够用，该扩容了。于是，<code>s2</code> 另起炉灶，将原来的元素复制新的位置，扩大自己的容量。并且为了应对未来可能的 <code>append</code> 带来的再一次扩容，<code>s2</code> 会在此次扩容的时候多留一些 <code>buffer</code>，将新的容量将扩大为原始容量的2倍，也就是10了。</p><p><img src="https://user-images.githubusercontent.com/7698088/54961368-4654d280-4f9b-11e9-9b00-de96c6eedea9.png" alt=""></p><p>最后，修改 <code>s1</code> 索引为2位置的元素：</p><pre class="line-numbers language-go"><code class="language-go">s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这次只会影响原始数组相应位置的元素。它影响不到 <code>s2</code> 了，人家已经远走高飞了。</p><p><img src="https://user-images.githubusercontent.com/7698088/54961330-29200400-4f9b-11e9-88d0-a29308a818ae.png" alt=""></p><p>再提一点，打印 s1 的时候，只会打印出 s1 长度以内的元素。所以，只会打印出3个元素，虽然它的底层数组不止3个元素。<br>至于，我们想在汇编层面看看到底它们是如何共享底层数组的，限于篇幅，这里不再展开。感兴趣的同学可以在公众号后台回复：切片截取。<br>我会给你详细分析函数调用关系，对共享底层数组的行为也会一目了然。二维码见文章底部。</p><h2 id="slice-和数组的区别在哪"><a href="#slice-和数组的区别在哪" class="headerlink" title="slice 和数组的区别在哪"></a>slice 和数组的区别在哪</h2><p>slice 的底层数据是数组，slice 是对数组的封装，它描述一个数组的片段。两者都可以通过下标来访问单个元素。</p><p>数组是定长的，长度定义好之后，不能再更改。在 Go 中，数组是不常见的，因为其长度是类型的一部分，限制了它的表达能力，比如 [3]int 和 [4]int 就是不同的类型。</p><p>而切片则非常灵活，它可以动态地扩容。切片的类型和长度无关。</p><h2 id="append-到底做了什么"><a href="#append-到底做了什么" class="headerlink" title="append 到底做了什么"></a>append 到底做了什么</h2><p>先来看看 <code>append</code> 函数的原型：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">append</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span>Type<span class="token punctuation">,</span> elems <span class="token operator">...</span>Type<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>append</code> 函数的参数长度可变，因此可以追加多个值到 slice 中，还可以用 <code>...</code> 传入 slice，直接追加一个切片。</p><pre class="line-numbers language-go"><code class="language-go">slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> elem1<span class="token punctuation">,</span> elem2<span class="token punctuation">)</span>slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> anotherSlice<span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>append函数返回值是一个新的slice，Go编译器不允许调用了 <code>append</code> 函数后不使用返回值。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> elem1<span class="token punctuation">,</span> elem2<span class="token punctuation">)</span><span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> anotherSlice<span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以上面的用法是错的，不能编译通过。</p><p>使用 append 可以向 slice 追加元素，实际上是往底层数组添加元素。但是底层数组的长度是固定的，如果索引 <code>len-1</code> 所指向的元素已经是底层数组的最后一个元素，就没法再添加了。</p><p>这时，<code>slice</code> 会迁移到新的内存位置，新底层数组的长度也会增加，这样就可以放置新增的元素。同时，为了应对未来可能再次发生的 <code>append</code> 操作，新的底层数组的长度，也就是新 <code>slice</code> 的容量是留了一定的 <code>buffer</code> 的。否则，每次添加元素的时候，都会发生迁移，成本太高。</p><p>新 <code>slice</code> 预留的 <code>buffer</code> 大小是有一定规律的。网上大多数的文章都是这样描述的：</p><blockquote><p>当原 slice 容量小于 <code>1024</code>的时候，新 slice 容量变成原来的 <code>2</code> 倍；原 slice 容量超过 <code>1024</code>，新 slice 容量变成原来的<code>1.25</code>倍。</p></blockquote><p>我在这里先说结论：以上描述是错误的。<br>为了说明上面的规律是错误的，我写了一小段玩具代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    oldCap <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        newCap <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">if</span> newCap <span class="token operator">!=</span> oldCap <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%d -> %4d] cap = %-4d  |  after append %-4d  cap = %-4d\n"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">,</span> oldCap<span class="token punctuation">,</span> i<span class="token punctuation">,</span> newCap<span class="token punctuation">)</span>            oldCap <span class="token operator">=</span> newCap        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我先创建了一个空的 <code>slice</code>，然后，在一个循环里不断往里面 <code>append</code> 新的元素。然后记录容量的变化，并且每当容量发生变化的时候，记录下老的容量，以及添加完元素之后的容量，同时记下此时 <code>slice</code> 里的元素。这样，我就可以观察，新老 <code>slice</code> 的容量变化情况，从而找出规律。</p><p>运行结果：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>   <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">0</span>     <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">0</span>     <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1</span>   <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>    <span class="token number">0</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1</span>     <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">1</span>     <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">2</span>   <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>    <span class="token number">1</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">2</span>     <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">2</span>     <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">4</span>   <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>    <span class="token number">3</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">4</span>     <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">4</span>     <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">8</span>   <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>    <span class="token number">7</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">8</span>     <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">8</span>     <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">16</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>   <span class="token number">15</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">16</span>    <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">16</span>    <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">32</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>   <span class="token number">31</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">32</span>    <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">32</span>    <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">64</span>  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>   <span class="token number">63</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">64</span>    <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">64</span>    <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">128</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>  <span class="token number">127</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">128</span>   <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">128</span>   <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">256</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>  <span class="token number">255</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">256</span>   <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">256</span>   <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">512</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span>  <span class="token number">511</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">512</span>   <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">512</span>   <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1023</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1024</span>  <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">1024</span>  <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1280</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1279</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1280</span>  <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">1280</span>  <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1696</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1695</span><span class="token punctuation">]</span> <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">1696</span>  <span class="token operator">|</span>  after <span class="token builtin">append</span> <span class="token number">1696</span>  <span class="token builtin">cap</span> <span class="token operator">=</span> <span class="token number">2304</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在老 slice 容量小于<code>1024</code>的时候，新 slice 的容量的确是老 slice 的<code>2</code>倍。目前还算正确。</p><p>但是，当老 slice 容量大于等于 <code>1024</code> 的时候，情况就有变化了。当向 slice 中添加元素 <code>1280</code> 的时候，老 slice 的容量为 <code>1280</code>，之后变成了 <code>1696</code>，两者并不是 <code>1.25</code> 倍的关系（1696/1280=1.325）。添加完 <code>1696</code> 后，新的容量 <code>2304</code> 当然也不是 1696 的 <code>1.25</code> 倍。</p><p>可见，现在网上各种文章中的扩容策略并不正确。我们直接搬出源码：源码面前，了无秘密。</p><p>从前面汇编代码我们也看到了，向 slice 追加元素的时候，若容量不够，会调用 growslice 函数，所以我们直接看它的代码。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// go 1.9.5 src/runtime/slice.go:82</span><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ……</span>    newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>    doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap    <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">></span> doublecap <span class="token punctuation">{</span>        newcap <span class="token operator">=</span> <span class="token builtin">cap</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>            newcap <span class="token operator">=</span> doublecap        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>                newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ……</span>    capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> ptrSize<span class="token punctuation">)</span>    newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> ptrSize<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到了吗？如果只看前半部分，现在网上各种文章里说的 newcap 的规律是对的。现实是，后半部分还对 newcap 作了一个内存对齐，这个和内存分配策略相关。进行内存对齐之后，新 slice 的容量是要 大于等于 老 slice 容量的 2倍或者1.25倍。</p><p>之后，向 Go 内存管理器申请内存，将老 slice 中的数据复制过去，并且将 append 的元素添加到新的底层数组中。</p><p>最后，向 growslice 函数调用者返回一个新的 slice，这个 slice 的长度并没有变化，而容量却增大了。</p><p>关于 append，我们最后来看一个例子，来源于参考资料部分的【Golang Slice的扩容规则】。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d, cap=%d"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果是：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果按网上各种文章中总结的那样：小于原 slice 长度小于 1024 的时候，容量每次增加 1 倍。添加元素 4 的时候，容量变为4；添加元素 5 的时候不变；添加元素 6 的时候容量增加 1 倍，变成 8。</p><p>那上面代码的运行结果就是：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是错误的！我们来仔细看看，为什么会这样，再次搬出代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// go 1.9.5 src/runtime/slice.go:82</span><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ……</span>    newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>    doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap    <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">></span> doublecap <span class="token punctuation">{</span>        newcap <span class="token operator">=</span> <span class="token builtin">cap</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ……</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ……</span>    capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> ptrSize<span class="token punctuation">)</span>    newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> ptrSize<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数的参数依次是 元素的类型，老的 slice，新 slice 最小求的容量。</p><p>例子中 s 原来只有 2 个元素，len 和 cap 都为 2，append 了三个元素后，长度变为 3，容量最小要变成 5，即调用 growslice 函数时，传入的第三个参数应该为 5。即 cap=5。而一方面，doublecap 是原 slice容量的 2 倍，等于 4。满足第一个 if 条件，所以 newcap 变成了 5。</p><p>接着调用了 roundupsize 函数，传入 40。（代码中ptrSize是指一个指针的大小，在64位机上是8）</p><p>我们再看内存对齐，搬出 roundupsize 函数的代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// src/runtime/msize.go:13</span><span class="token keyword">func</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>size <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> size <span class="token operator">&lt;</span> _MaxSmallSize <span class="token punctuation">{</span>        <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> smallSizeMax<span class="token number">-8</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>class_to_size<span class="token punctuation">[</span>size_to_class8<span class="token punctuation">[</span><span class="token punctuation">(</span>size<span class="token operator">+</span>smallSizeDiv<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>smallSizeDiv<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//……</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//……</span><span class="token punctuation">}</span><span class="token keyword">const</span> _MaxSmallSize <span class="token operator">=</span> <span class="token number">32768</span><span class="token keyword">const</span> smallSizeMax <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">const</span> smallSizeDiv <span class="token operator">=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显，我们最终将返回这个式子的结果：</p><pre class="line-numbers language-go"><code class="language-go">class_to_size<span class="token punctuation">[</span>size_to_class8<span class="token punctuation">[</span><span class="token punctuation">(</span>size<span class="token operator">+</span>smallSizeDiv<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>smallSizeDiv<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是 Go 源码中有关内存分配的两个 slice。class_to_size通过 spanClass获取 span划分的 object大小。而 size_to_class8 表示通过 size 获取它的 spanClass。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> size_to_class8 <span class="token operator">=</span> <span class="token punctuation">[</span>smallSizeMax<span class="token operator">/</span>smallSizeDiv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token keyword">var</span> class_to_size <span class="token operator">=</span> <span class="token punctuation">[</span>_NumSizeClasses<span class="token punctuation">]</span><span class="token builtin">uint16</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">288</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">352</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">416</span><span class="token punctuation">,</span> <span class="token number">448</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">576</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">704</span><span class="token punctuation">,</span> <span class="token number">768</span><span class="token punctuation">,</span> <span class="token number">896</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1152</span><span class="token punctuation">,</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token number">1408</span><span class="token punctuation">,</span> <span class="token number">1536</span><span class="token punctuation">,</span> <span class="token number">1792</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">2304</span><span class="token punctuation">,</span> <span class="token number">2688</span><span class="token punctuation">,</span> <span class="token number">3072</span><span class="token punctuation">,</span> <span class="token number">3200</span><span class="token punctuation">,</span> <span class="token number">3456</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4864</span><span class="token punctuation">,</span> <span class="token number">5376</span><span class="token punctuation">,</span> <span class="token number">6144</span><span class="token punctuation">,</span> <span class="token number">6528</span><span class="token punctuation">,</span> <span class="token number">6784</span><span class="token punctuation">,</span> <span class="token number">6912</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token number">9472</span><span class="token punctuation">,</span> <span class="token number">9728</span><span class="token punctuation">,</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token number">10880</span><span class="token punctuation">,</span> <span class="token number">12288</span><span class="token punctuation">,</span> <span class="token number">13568</span><span class="token punctuation">,</span> <span class="token number">14336</span><span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">,</span> <span class="token number">18432</span><span class="token punctuation">,</span> <span class="token number">19072</span><span class="token punctuation">,</span> <span class="token number">20480</span><span class="token punctuation">,</span> <span class="token number">21760</span><span class="token punctuation">,</span> <span class="token number">24576</span><span class="token punctuation">,</span> <span class="token number">27264</span><span class="token punctuation">,</span> <span class="token number">28672</span><span class="token punctuation">,</span> <span class="token number">32768</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们传进去的 size 等于 40。所以 (size+smallSizeDiv-1)/smallSizeDiv = 5；获取 size_to_class8 数组中索引为 5 的元素为 4；获取 class_to_size 中索引为 4 的元素为 48。</p><p>最终，新的 slice 的容量为 6：</p><pre class="line-numbers language-go"><code class="language-go">newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> ptrSize<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至于，上面的两个魔法数组的由来，暂时就不展开了。</p><h2 id="为什么-nil-slice-可以直接-append"><a href="#为什么-nil-slice-可以直接-append" class="headerlink" title="为什么 nil slice 可以直接 append"></a>为什么 nil slice 可以直接 append</h2><p>其实 nil slice 或者 empty slice 都是可以通过调用 append 函数来获得底层数组的扩容。最终都是调用 mallocgc 来向 Go 的内存管理器申请到一块内存，然后再赋给原来的nil slice 或 empty slice，然后摇身一变，成为“真正”的 slice 了。</p><h2 id="传-slice-和-slice-指针有什么区别"><a href="#传-slice-和-slice-指针有什么区别" class="headerlink" title="传 slice 和 slice 指针有什么区别"></a>传 slice 和 slice 指针有什么区别</h2><p>前面我们说到，slice 其实是一个结构体，包含了三个成员：len, cap, array。分别表示切片长度，容量，底层数据的地址。</p><p>当 slice 作为函数参数时，就是一个普通的结构体。其实很好理解：若直接传 slice，在调用者看来，实参 slice 并不会被函数中的操作改变；若传的是 slice 的指针，在调用者看来，是会被改变原 slice 的。</p><p>值的注意的是，不管传的是 slice 还是 slice 指针，如果改变了 slice 底层数组的数据，会反应到实参 slice 的底层数据。为什么能改变底层数组的数据？很好理解：底层数据在 slice 结构体里是一个指针，仅管 slice 结构体自身不会被改变，也就是说底层数据地址不会被改变。 但是通过指向底层数据的指针，可以改变切片的底层数据，没有问题。</p><p>通过 slice 的 array 字段就可以拿到数组的地址。在代码里，是直接通过类似 s[i]=10 这种操作改变 slice 底层数组元素值。</p><p>另外，啰嗦一句，Go 语言的函数参数传递，只有值传递，没有引用传递。后面会再写一篇相关的文章，敬请期待。</p><p>再来看一个年幼无知的代码片段：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// i只是一个副本，不能改变s中元素的值</span>    <span class="token comment" spellcheck="true">/*for _, i := range s {        i++    }    */</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行一下，程序输出：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>果真改变了原始 slice 的底层数据。这里传递的是一个 slice 的副本，在 f 函数中，s 只是 main 函数中 s 的一个拷贝。在f 函数内部，对 s 的作用并不会改变外层 main 函数的 s。</p><p>要想真的改变外层 slice，只有将返回的新的 slice 赋值到原始 slice，或者向函数传递一个指向 slice 的指针。我们再来看一个例子：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">myAppend</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里 s 虽然改变了，但并不会影响外层函数的 s</span>    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">myAppendPtr</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 会改变外层 s 本身</span>    <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>    newS <span class="token operator">:=</span> <span class="token function">myAppend</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>newS<span class="token punctuation">)</span>    s <span class="token operator">=</span> newS    <span class="token function">myAppendPtr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">100</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>myAppend 函数里，虽然改变了 s，但它只是一个值传递，并不会影响外层的 s，因此第一行打印出来的结果仍然是 [1 1 1]。</p><p>而 newS 是一个新的 slice，它是基于 s 得到的。因此它打印的是追加了一个 100 之后的结果： [1 1 1 100]。</p><p>最后，将 newS 赋值给了 s，s 这时才真正变成了一个新的slice。之后，再给 myAppendPtr 函数传入一个 s 指针，这回它真的被改变了：[1 1 1 100 100]。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，关于 slice 的部分就讲完了，不知大家有没有看过瘾。我们最后来总结一下：</p><ul><li>切片是对底层数组的一个抽象，描述了它的一个片段。</li><li>切片实际上是一个结构体，它有三个字段：长度，容量，底层数据的地址。</li><li>多个切片可能共享同一个底层数组，这种情况下，对其中一个切片或者底层数组的更改，会影响到其他切片。</li><li>append 函数会在切片容量不够的情况下，调用 growslice 函数获取所需要的内存，这称为扩容，扩容会改变元素原来的位置。</li><li>扩容策略并不是简单的扩为原切片容量的 2 倍或 1.25 倍，还有内存对齐的操作。扩容后的容量 &gt;= 原容量的 2 倍或 1.25 倍。</li><li>当直接用切片作为函数参数时，可以改变切片的元素，不能改变切片本身；想要改变切片本身，可以将改变后的切片返回，函数调用者接收改变后的切片或者将切片指针作为函数参数。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【码洞《深度解析 Go 语言中「切片」的三种特殊状态》】<a href="https://juejin.im/post/5bea58df6fb9a049f153bca8" target="_blank" rel="noopener">https://juejin.im/post/5bea58df6fb9a049f153bca8</a><br>【老钱 数组】<a href="https://juejin.im/post/5be53bc251882516c15af2e0" target="_blank" rel="noopener">https://juejin.im/post/5be53bc251882516c15af2e0</a><br>【老钱 切片】<a href="https://juejin.im/post/5be8e0b1f265da614d08b45a" target="_blank" rel="noopener">https://juejin.im/post/5be8e0b1f265da614d08b45a</a><br>【golang interface源码】<a href="https://i6448038.github.io/2018/10/01/Golang-interface/" target="_blank" rel="noopener">https://i6448038.github.io/2018/10/01/Golang-interface/</a><br>【golang interface源码】<a href="http://legendtkl.com/2017/07/01/golang-interface-implement/" target="_blank" rel="noopener">http://legendtkl.com/2017/07/01/golang-interface-implement/</a><br>【interface】<a href="https://www.jishuwen.com/d/2C9z#tuit" target="_blank" rel="noopener">https://www.jishuwen.com/d/2C9z#tuit</a><br>【雨痕开源Go学习笔记】<a href="https://github.com/qyuhen/book" target="_blank" rel="noopener">https://github.com/qyuhen/book</a><br>【slice 图很漂亮】<a href="https://halfrost.com/go_slice/" target="_blank" rel="noopener">https://halfrost.com/go_slice/</a><br>【Golang Slice的扩容规则】<a href="https://jodezer.github.io/2017/05/golangSlice%E7%9A%84%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99" target="_blank" rel="noopener">https://jodezer.github.io/2017/05/golangSlice%E7%9A%84%E6%89%A9%E5%AE%B9%E8%A7%84%E5%88%99</a><br>【slice作为参数】<a href="https://www.cnblogs.com/fwdqxl/p/9317769.html" target="_blank" rel="noopener">https://www.cnblogs.com/fwdqxl/p/9317769.html</a><br>【源码】<a href="https://ictar.xyz/2018/10/25/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-go-slice/" target="_blank" rel="noopener">https://ictar.xyz/2018/10/25/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-go-slice/</a><br>【append机制 译文】<a href="https://brantou.github.io/2017/05/24/go-array-slice-string/" target="_blank" rel="noopener">https://brantou.github.io/2017/05/24/go-array-slice-string/</a><br>【slice 汇编】<a href="http://xargin.com/go-slice/" target="_blank" rel="noopener">http://xargin.com/go-slice/</a><br>【slice tricks】<a href="https://colobu.com/2017/03/22/Slice-Tricks/" target="_blank" rel="noopener">https://colobu.com/2017/03/22/Slice-Tricks/</a><br>【有图】<a href="https://i6448038.github.io/2018/08/11/array-and-slice-principle/" target="_blank" rel="noopener">https://i6448038.github.io/2018/08/11/array-and-slice-principle/</a><br>【slice的本质】<a href="https://www.flysnow.org/2018/12/21/golang-sliceheader.html" target="_blank" rel="noopener">https://www.flysnow.org/2018/12/21/golang-sliceheader.html</a><br>【slice使用技巧】<a href="https://blog.thinkeridea.com/201901/go/slice_de_yi_xie_shi_yong_ji_qiao.html" target="_blank" rel="noopener">https://blog.thinkeridea.com/201901/go/slice_de_yi_xie_shi_yong_ji_qiao.html</a><br>【slice/array、内存增长】<a href="https://blog.thinkeridea.com/201901/go/shen_ru_pou_xi_slice_he_array.html" target="_blank" rel="noopener">https://blog.thinkeridea.com/201901/go/shen_ru_pou_xi_slice_he_array.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Forward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode股票买卖6题分析</title>
      <link href="/algorithm/leetcode-buy-and-sell-stock-summary/"/>
      <url>/algorithm/leetcode-buy-and-sell-stock-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode股票买卖6题分析"><a href="#Leetcode股票买卖6题分析" class="headerlink" title="Leetcode股票买卖6题分析"></a>Leetcode股票买卖6题分析</h1><blockquote><p>Leetcode 上关于股票买卖的题目分析</p></blockquote><h2 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a>121. Best Time to Buy and Sell Stock</h2><ul><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">Leetcode 题目地址</a></li><li><a href="https://github.com/kylesliu/awesome-golang-leetcode/tree/master/src/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Code</a></li></ul><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设你有一个数组，其中第i个元素表示第i天某个股票的价格。<br>如果您只允许完成至多一笔交易（即买入一只股票并卖出一只股票），则设计一种算法以找到最大利润。<br>必须先购买股票再出售股票。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-go"><code class="language-go">Example <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">5</span>解释<span class="token punctuation">:</span> 在第二天买<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> ，在第五天卖 <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 利润 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">.</span>Example <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">0</span>解释<span class="token punctuation">:</span> 这个例子中没有完成交易。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解1：暴力算法"><a href="#题解1：暴力算法" class="headerlink" title="题解1：暴力算法"></a>题解1：暴力算法</h3><blockquote><p>思路：暴力2次循环找出解</p></blockquote><blockquote><p>复杂度</p></blockquote><ul><li>时间复杂度：O(n^2)</li><li>可能复杂度：O(1)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit1</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    maxprofit <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            profit <span class="token operator">:=</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> profit <span class="token operator">></span> maxprofit <span class="token punctuation">{</span>                maxprofit <span class="token operator">=</span> profit            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxprofit<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解2：贪心算法"><a href="#题解2：贪心算法" class="headerlink" title="题解2：贪心算法"></a>题解2：贪心算法</h3><blockquote><p>思路：利用贪心法的含义是选当前最优。遍历一次，更新当前最低价格和最高利润。</p></blockquote><blockquote><p>复杂度</p></blockquote><ul><li>时间复杂度：O(n)</li><li>可能复杂度：O(1)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    profit<span class="token punctuation">,</span> low <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    当前收益</span>        profit <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>profit<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>low<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//    记录最小单价</span>        low <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> profit<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="122. Best Time to Buy and Sell Stock II"></a>122. Best Time to Buy and Sell Stock II</h2><ul><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">Leetcode 题目地址</a></li><li><a href="https://github.com/kylesliu/awesome-golang-leetcode/tree/master/src/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Code</a></li></ul><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设你有一个数组，其中第i个元素表示第i天某个股票的价格。<br>设计一种算法以找到最大利润，可以完成任意多次交易，但必须先购买股票再出售股票，不能同时多次交易。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-go"><code class="language-go">Example <span class="token number">1</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">7</span>解释<span class="token punctuation">:</span> 第二天买<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>，第三天卖<span class="token punctuation">(</span>price<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>，利润为<span class="token number">4</span><span class="token punctuation">;</span>第四天买<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>，第五天卖<span class="token punctuation">(</span>price<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>，利润为<span class="token number">3</span>。Example <span class="token number">2</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">4</span>解释<span class="token punctuation">:</span> 第一天买<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>，第五天卖<span class="token punctuation">(</span>price<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>，利润为<span class="token number">4</span>。Example <span class="token number">3</span><span class="token punctuation">:</span>输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出<span class="token punctuation">:</span> <span class="token number">0</span>解释<span class="token punctuation">:</span> 这个例子中没有完成交易。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解1：贪心算法"><a href="#题解1：贪心算法" class="headerlink" title="题解1：贪心算法"></a>题解1：贪心算法</h3><blockquote><p>思路：一次循环分别记录最大利润</p></blockquote><blockquote><p>复杂度</p></blockquote><ul><li>时间复杂度：O(n)</li><li>可能复杂度：O(1)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    profit <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            profit <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> profit<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解2：动态规划"><a href="#题解2：动态规划" class="headerlink" title="题解2：动态规划"></a>题解2：动态规划</h3><blockquote><p>思路：利用一个N行2列的数组表示每天出售、卖出、的收益。</p></blockquote><ul><li><code>dp[i][0]</code>表示第i天未出售股票的利润</li><li><code>dp[i][1]</code>表示第i天出售股票的利润</li><li>状态转移<ul><li>出售股票或者不做任何操作 -&gt; <code>dp[i][0] = max(dp[i-1][1]+price[i],dp[i-1][0])</code></li><li>买入股票或者不做任何操作 -&gt; <code>dp[i][1] = max(dp[i-1][0])-price[i],dp[i-1][1])</code></li></ul></li><li><code>dp[0][0]=0,dp[0][1]=INT_MIN</code></li></ul><blockquote><p>复杂度 </p></blockquote><ul><li>时间复杂度：O(n)</li><li>可能复杂度：O(n)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit2</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化DP</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>    dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        dp <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>MinInt32    profit_max <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        profit_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>profit_max<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        profit_max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>profit_max<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> profit_max<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="123-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="123. Best Time to Buy and Sell Stock III"></a>123. Best Time to Buy and Sell Stock III</h2><ul><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">Leetcode 题目地址</a></li><li><a href="https://github.com/kylesliu/awesome-golang-leetcode/tree/master/src/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Code</a></li></ul><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个数组，第 ii 个元素表示第 ii 天股票的价格。<br>你最多可以交易两次。<br>请设计一个算法，求最大收益。</p><p><strong>注意：</strong>必须先买再卖，且每天只能买或者卖一次。</p><h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-go"><code class="language-go">Example <span class="token number">1</span><span class="token punctuation">:</span>输入：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token number">6</span>解释：一共交易两次：第<span class="token number">4</span>天买（价格是<span class="token number">0</span>），第<span class="token number">6</span>天卖（价格是<span class="token number">3</span>），收益<span class="token number">3</span>；第<span class="token number">7</span>天卖（价格是<span class="token number">1</span>），第<span class="token number">8</span>天卖（价格是<span class="token number">4</span>），收益<span class="token number">3</span>；总共收益<span class="token number">6</span>。Example <span class="token number">2</span><span class="token punctuation">:</span>输入：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>输出：<span class="token number">4</span>解释：一共交易一次：第<span class="token number">1</span>天买（价格是<span class="token number">1</span>），第<span class="token number">5</span>天卖（价格是<span class="token number">5</span>），收益<span class="token number">4</span>。注意不能第<span class="token number">1</span>天买第<span class="token number">3</span>天卖，然后第<span class="token number">3</span>天买第<span class="token number">5</span>天卖，因为每天只能进行买或者卖一种操作。Example <span class="token number">3</span><span class="token punctuation">:</span>输入：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">0</span>解释：不做任何交易，收益<span class="token number">0</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解1：动态规划"><a href="#题解1：动态规划" class="headerlink" title="题解1：动态规划"></a>题解1：动态规划</h3><blockquote><p>思路：在整个区间的每一点切开， 然后分别计算左子区间和右子区间的最大值，然后再用O(n)时间找到整个区间的最大值。</p></blockquote><ul><li>遍历一遍数组，求<code>[0,i−1][0,i−1</code>]区间的最大利润<code>f(i)</code>，具体做法是找当前最低价格<code>low</code>，判断是要以<code>low</code>买入当天卖出，还是不动</li><li>从后往前遍历，求<code>[i,n−1][i,n−1]</code>区间的最大利润<code>g(i)</code>，具体做法是找当前最高价格<code>high</code>，判断是要当天买入以<code>high</code>卖出，还是不动</li><li>遍历，求最大利润<code>max(f(i)+g(i))</code></li></ul><blockquote><p>复杂度 </p></blockquote><ul><li>时间复杂度：O(n)</li><li>可能复杂度：O(n)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    g<span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span>    ans<span class="token punctuation">,</span> n<span class="token punctuation">,</span> low <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        low <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>low<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    high <span class="token operator">:=</span> prices<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>        high <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>high<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> high<span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="188-Best-Time-to-Buy-and-Sell-Stock-IV"><a href="#188-Best-Time-to-Buy-and-Sell-Stock-IV" class="headerlink" title="188. Best Time to Buy and Sell Stock IV"></a>188. Best Time to Buy and Sell Stock IV</h2><ul><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/" target="_blank" rel="noopener">Leetcode 题目地址</a></li><li><a href="https://github.com/kylesliu/awesome-golang-leetcode/tree/master/src/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Code</a></li></ul><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设你有一个数组，其中第 ii 个元素表示第 ii 天某个股票的价格。<br>设计一种算法以找到最大利润，可以完成最多 k 次交易，但必须先购买股票再出售股票，不能同时多次交易。</p><h3 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-go"><code class="language-go">Example <span class="token number">1</span><span class="token punctuation">:</span>Input<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token punctuation">:</span> <span class="token number">2</span>解释<span class="token punctuation">:</span> 第一天买入<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>，第二天售出 <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 利润 <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>Example <span class="token number">2</span><span class="token punctuation">:</span>Input<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token punctuation">:</span> <span class="token number">7</span>解释<span class="token punctuation">:</span> 第二天买入<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>，第三天卖出 <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 利润 <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">.</span>        接着第五天买入<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>，第六天卖出<span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 利润 <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解1：动态规划-1"><a href="#题解1：动态规划-1" class="headerlink" title="题解1：动态规划"></a>题解1：动态规划</h3><blockquote><p>思路</p></blockquote><blockquote><p>复杂度 </p></blockquote><ul><li>时间复杂度：O(n)</li><li>可能复杂度：O(n)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="309. Best Time to Buy and Sell Stock with Cooldown"></a>309. Best Time to Buy and Sell Stock with Cooldown</h2><ul><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/" target="_blank" rel="noopener">Leetcode 题目地址</a></li><li><a href="https://github.com/kylesliu/awesome-golang-leetcode/tree/master/src/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Code</a></li></ul><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>你有一个数组，第 i 个元素是第 i 天股票的价格。<br>设计一个算法求最大利润。你可以进行任意次交易，即多次买入和卖出股票，但有如下限制：</p><ul><li>不能同时进行多笔交易，即再次买入股票时，必须已经卖掉现有的股票。</li><li>在卖掉股票后，在下一天不能买入股票，即冷却一天。</li></ul><h3 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-go"><code class="language-go">Input<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token punctuation">:</span> <span class="token number">3</span> 解释<span class="token punctuation">:</span> 交易顺序为 <span class="token operator">=</span> <span class="token punctuation">[</span>买入<span class="token punctuation">,</span> 卖出<span class="token punctuation">,</span> 冷却<span class="token punctuation">,</span> 买入<span class="token punctuation">,</span> 卖出<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解1：动态规划-2"><a href="#题解1：动态规划-2" class="headerlink" title="题解1：动态规划"></a>题解1：动态规划</h3><blockquote><p>思路</p></blockquote><blockquote><p>复杂度 </p></blockquote><ul><li>时间复杂度：O(n)</li><li>可能复杂度：O(n)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-fee"><a href="#714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-fee" class="headerlink" title="714. Best Time to Buy and Sell Stock with Transaction fee"></a>714. Best Time to Buy and Sell Stock with Transaction fee</h2><ul><li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" target="_blank" rel="noopener">Leetcode 题目地址</a></li><li><a href="https://github.com/kylesliu/awesome-golang-leetcode/tree/master/src/0121.Best-Time-to-Buy-and-Sell-Stock" target="_blank" rel="noopener">Code</a></li></ul><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一组某一stock在每一天的价格，买卖次数不限，每次买入必须在卖出之后，且每次卖出时都需要fee的手续费，求解最大的收益。</p><h3 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-go"><code class="language-go">Input<span class="token punctuation">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fee <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token punctuation">:</span> <span class="token number">8</span>Explanation<span class="token punctuation">:</span> The maximum profit can be achieved by<span class="token punctuation">:</span>Buying at prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>Selling at prices<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>Buying at prices<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>Selling at prices<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>The total profit <span class="token function">is</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解1：动态规划-3"><a href="#题解1：动态规划-3" class="headerlink" title="题解1：动态规划"></a>题解1：动态规划</h3><blockquote><p>思路</p></blockquote><blockquote><p>复杂度 </p></blockquote><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><blockquote><p>Code</p></blockquote><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> fee <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    cash<span class="token punctuation">,</span> hold <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        cash <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>cash<span class="token punctuation">,</span> hold<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>fee<span class="token punctuation">)</span>        hold <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>hold<span class="token punctuation">,</span> cash<span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cash<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统面试笔记</title>
      <link href="/interview/operating-system-interview-notes/"/>
      <url>/interview/operating-system-interview-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络面试笔记"><a href="#计算机网络面试笔记" class="headerlink" title="计算机网络面试笔记"></a>计算机网络面试笔记</h1><p>操作系统是管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程和线程有什么区别？"><a href="#进程和线程有什么区别？" class="headerlink" title="进程和线程有什么区别？"></a>进程和线程有什么区别？</h3><ul><li>进程（Process）是系统进行资源分配和调度的基本单位，线程（Thread）是CPU调度和分派的基本单位；</li><li>线程依赖于进程而存在，一个进程至少有一个线程；</li><li>进程有自己的独立地址空间，线程共享所属进程的地址空间；</li><li>进程是拥有系统资源的一个独立单位，而线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈)，和其他线程共享本进程的相关资源如内存、I/O、cpu等；</li><li>在进程切换时，涉及到整个当前进程CPU环境的保存环境的设置以及新被调度运行的CPU环境的设置，而线程切换只需保存和设置少量的寄存器的内容，并不涉及存储器管理方面的操作，可见，进程切换的开销远大于线程切换的开销；</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量等数据，而进程之间的通信需要以进程间通信(IPC)的方式进行；</li><li>多线程程序只要有一个线程崩溃，整个程序就崩溃了，但多进程程序中一个进程崩溃并不会对其它进程造成影响，因为进程有自己的独立地址空间，因此多进程更加健壮</li></ul><p>进程操作代码实现，可以参考：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064" target="_blank" rel="noopener">多进程 - 廖雪峰的官方网站</a></p><h4 id="同一进程中的线程可以共享哪些数据？"><a href="#同一进程中的线程可以共享哪些数据？" class="headerlink" title="同一进程中的线程可以共享哪些数据？"></a>同一进程中的线程可以共享哪些数据？</h4><ul><li>进程代码段</li><li>进程的公有数据（全局变量、静态变量…）</li><li>进程打开的文件描述符</li><li>进程的当前目录</li><li>信号处理器/信号处理函数：对收到的信号的处理方式</li><li>进程ID与进程组ID</li></ul><h5 id="线程独占哪些资源？"><a href="#线程独占哪些资源？" class="headerlink" title="线程独占哪些资源？"></a>线程独占哪些资源？</h5><ul><li>线程ID</li><li>一组寄存器的值</li><li>线程自身的栈（堆是共享的）</li><li>错误返回码：线程可能会产生不同的错误返回码，一个线程的错误返回码不应该被其它线程修改；</li><li>信号掩码/信号屏蔽字(Signal mask)：表示是否屏蔽/阻塞相应的信号（SIGKILL,SIGSTOP除外）</li></ul><h3 id="进程间通信有哪些方式？"><a href="#进程间通信有哪些方式？" class="headerlink" title="进程间通信有哪些方式？"></a>进程间通信有哪些方式？</h3><ul><li>1.管道(Pipe)<ul><li>管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道；</li><li>一个进程向管道中写的内容被管道另一端的进程读出。写入的内容每次都添加在管道缓冲区的末尾，并且每次都是从缓冲区的头部读出数据；</li><li>只能用于父子进程或者兄弟进程之间(具有亲缘关系的进程)</li></ul></li><li>2.命名管道</li><li>3.消息队列</li><li>4.信号(Signal)</li><li>5.共享内存</li><li>6.信号量(Semaphore)：初始化操作、P操作、V操作；P操作：信号量-1，检测是否小于0，小于则进程进入阻塞状态；V操作：信号量+1，若小于等于0，则从队列中唤醒一个等待的进程进入就绪态</li><li>7.套接字(Socket)</li></ul><p><img src="https://s.gin.sh/blog/interview/PV_Operatating_Question.png" alt="PV 操作"></p><h3 id="进程同步问题"><a href="#进程同步问题" class="headerlink" title="进程同步问题"></a>进程同步问题</h3><blockquote><p>进程的同步是目的，而进程间通信是实现进程同步的手段</p></blockquote><h4 id="管程-Monitor"><a href="#管程-Monitor" class="headerlink" title="管程 Monitor"></a>管程 Monitor</h4><p>管程将共享变量以及对这些共享变量的操作封装起来，形成一个具有一定接口的功能模块，这样只能通过管程提供的某个过程才能访问管程中的资源。进程只能互斥地使用管程，使用完之后必须释放管程并唤醒入口等待队列中的进程。</p><p>当一个进程试图进入管程时，在<strong>入口等待队列</strong>等待。若P进程唤醒了Q进程，则Q进程先执行，P在<strong>紧急等待队列</strong>中等待。（<strong>HOARE管程</strong>）</p><p>wait操作：执行wait操作的进程进入条件变量链末尾，唤醒紧急等待队列或者入口队列中的进程；signal操作：唤醒条件变量链中的进程，自己进入紧急等待队列，若条件变量链为空，则继续执行。（<strong>HOARE管程</strong>）</p><p><strong>MESA管程</strong>：将HOARE中的signal换成了notify（或者broadcast通知所有满足条件的），进行通知而不是立马交换管程的使用权，在合适的时候，条件队列首位的进程可以进入，进入之前必须用while检查条件是否合适。优点：没有额外的进程切换</p><h4 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h4><blockquote><p>问题描述：使用一个缓冲区来存放数据，只有缓冲区没有满，生产者才可以写入数据；只有缓冲区不为空，消费者才可以读出数据</p></blockquote><pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token function">P</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">P</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生产者进行生产</span>    <span class="token function">V</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">V</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">do</span><span class="token punctuation">{</span>       <span class="token function">P</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">P</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消费者进行消费</span>       <span class="token function">V</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">V</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h4><p>。。。</p><h4 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h4><p>。。。</p><h4 id="临界区的概念？"><a href="#临界区的概念？" class="headerlink" title="临界区的概念？"></a>临界区的概念？</h4><p>各个进程中对临界资源（互斥资源/共享变量，一次只能给一个进程使用）进行操作的程序片段</p><h4 id="同步与互斥的概念？"><a href="#同步与互斥的概念？" class="headerlink" title="同步与互斥的概念？"></a>同步与互斥的概念？</h4><p>同步：多个进程因为合作而使得进程的执行有一定的先后顺序。比如某个进程需要另一个进程提供的消息，获得消息之前进入阻塞态；<br>互斥：多个进程在同一时刻只有一个进程能进入临界区</p><h4 id="并发、并行、异步的区别？"><a href="#并发、并行、异步的区别？" class="headerlink" title="并发、并行、异步的区别？"></a>并发、并行、异步的区别？</h4><p>并发：在一个时间段中同时有多个程序在运行，但其实任一时刻，只有一个程序在CPU上运行，宏观上的并发是通过不断的切换实现的；<br>多线程：并发运行的一段代码。是实现异步的手段<br>并行（和串行相比）：在多CPU系统中，多个程序无论宏观还是微观上都是同时执行的<br>异步（和同步相比）：同步是顺序执行，异步是在等待某个资源的时候继续做自己的事</p><h3 id="进程有哪几种状态？"><a href="#进程有哪几种状态？" class="headerlink" title="进程有哪几种状态？"></a>进程有哪几种状态？</h3><ul><li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源</li><li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数</li><li>阻塞状态： 进程等待某种条件，在条件满足之前无法执行</li></ul><p><img src="https://s.gin.sh/blog/interview/Process_status.png" alt="进程状态转换"></p><h3 id="进程调度策略有哪些？"><a href="#进程调度策略有哪些？" class="headerlink" title="进程调度策略有哪些？"></a>进程调度策略有哪些？</h3><p>1.<strong>批处理系统</strong>：</p><p><code>先来先服务</code> <code>first-come first-serverd</code>（FCFS） 按照请求的顺序进行调度。非抢占式，开销小，无饥饿问题，响应时间不确定（可能很慢）；对短进程不利，对IO密集型进程不利。</p><p><code>最短作业优先 shortest job first</code>（SJF）按估计运行时间最短的顺序进行调度。非抢占式，吞吐量高，开销可能较大，可能导致饥饿问题；对短进程提供好的响应时间，对长进程不利。</p><p><code>最短剩余时间优先 shortest remaining time next</code>（SRTN）按剩余运行时间的顺序进行调度。(最短作业优先的抢占式版本)。吞吐量高，开销可能较大，提供好的响应时间；可能导致饥饿问题，对长进程不利。</p><p><code>最高响应比优先 Highest Response Ratio Next</code>（HRRN）响应比 = 1+ 等待时间/处理时间。同时考虑了等待时间的长短和估计需要的执行时间长短，很好的平衡了长短进程。非抢占，吞吐量高，开销可能较大，提供好的响应时间，无饥饿问题。</p><p>2.<strong>交互式系统</strong><br>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><p><code>时间片轮转 Round Robin</code> 将所有就绪进程按 FCFS 的原则排成一个队列，用完时间片的进程排到队列最后。抢占式（时间片用完时），开销小，无饥饿问题，为短进程提供好的响应时间；若时间片小，进程切换频繁，吞吐量低；若时间片太长，实时性得不到保证。</p><p><code>优先级调度算法</code> 为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p><p><code>多级反馈队列调度算法 Multilevel Feedback Queue</code><br>设置多个就绪队列1、2、3…，优先级递减，时间片递增。只有等到优先级更高的队列为空时才会调度当前队列中的进程。如果进程用完了当前队列的时间片还未执行完，则会被移到下一队列。</p><p>抢占式（时间片用完时），开销可能较大，对IO型进程有利，可能会出现饥饿问题。</p><h4 id="什么叫优先级反转？如何解决？"><a href="#什么叫优先级反转？如何解决？" class="headerlink" title="什么叫优先级反转？如何解决？"></a>什么叫优先级反转？如何解决？</h4><p>高优先级的进程等待被一个低优先级进程占用的资源时，就会出现优先级反转，即优先级较低的进程比优先级较高的进程先执行。</p><p><strong>解决方法：</strong></p><ul><li><code>优先级天花板</code> (Priority Ceiling)：当任务申请某资源时，把该任务的优先级提升到可访问这个资源的所有任务中的最高优先级，这个优先级称为该资源的优先级天花板。简单易行。</li><li><code>优先级继承</code> (Priority Inheritance)：当任务A申请共享资源S时，如果S正在被任务C使用，通过比较任务C与自身的优先级，如发现任务C的优先级小于自身的优先级，则将任务C的优先级提升到自身的优先级，任务C释放资源S后，再恢复任务C的原优先级。</li></ul><h3 id="什么是僵尸进程？"><a href="#什么是僵尸进程？" class="headerlink" title="什么是僵尸进程？"></a>什么是僵尸进程？</h3><p>一个子进程结束后，它的父进程并没有等待它（调用wait或者waitpid），那么这个子进程将成为一个僵尸进程。僵尸进程是一个已经死亡的进程，但是并没有真正被销毁。它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程表中保留一个位置，记载该进程的进程ID、终止状态以及资源利用信息(CPU时间，内存使用量等等)供父进程收集，除此之外，僵尸进程不再占有任何内存空间。这个僵尸进程可能会一直留在系统中直到系统重启。</p><p>危害：占用进程号，而系统所能使用的进程号是有限的；占用内存。</p><p>以下情况不会产生僵尸进程：</p><ul><li>该进程的父进程先结束了。每个进程结束的时候，系统都会扫描是否存在子进程，如果有则用Init进程接管，成为该进程的父进程，并且会调用wait等待其结束。</li><li>父进程调用wait或者waitpid等待子进程结束（需要每隔一段时间查询子进程是否结束）。wait系统调用会使父进程暂停执行，直到它的一个子进程结束为止。waitpid则可以加入<code>WNOHANG</code>(wait-no-hang)选项，如果没有发现结束的子进程，就会立即返回，不会将调用waitpid的进程阻塞。同时，waitpid还可以选择是等待任一子进程（同wait），还是等待指定pid的子进程，还是等待同一进程组下的任一子进程，还是等待组ID等于pid的任一子进程；</li><li>子进程结束时，系统会产生<code>SIGCHLD</code>(signal-child)信号，可以注册一个信号处理函数，在该函数中调用waitpid，等待所有结束的子进程（注意：一般都需要循环调用waitpid，因为在信号处理函数开始执行之前，可能已经有多个子进程结束了，而信号处理函数只执行一次，所以要循环调用将所有结束的子进程回收）；</li><li>也可以用<code>signal(SIGCLD, SIG_IGN)</code>(signal-ignore)通知内核，表示忽略<code>SIGCHLD</code>信号，那么子进程结束后，内核会进行回收。</li></ul><h3 id="什么是孤儿进程？"><a href="#什么是孤儿进程？" class="headerlink" title="什么是孤儿进程？"></a>什么是孤儿进程？</h3><p>一个父进程已经结束了，但是它的子进程还在运行，那么这些子进程将成为孤儿进程。孤儿进程会被Init（进程ID为1）接管，当这些孤儿进程结束时由Init完成状态收集工作。</p><h3 id="线程同步有哪些方式？"><a href="#线程同步有哪些方式？" class="headerlink" title="线程同步有哪些方式？"></a>线程同步有哪些方式？</h3><blockquote><p>为什么需要线程同步：线程有时候会和其他线程共享一些资源，比如内存、数据库等。当多个线程同时读写同一份共享资源的时候，可能会发生冲突。因此需要线程的同步，多个线程按顺序访问资源。</p></blockquote><ul><li><strong>互斥量</strong> Mutex：互斥量是内核对象，只有拥有互斥对象的线程才有访问互斥资源的权限。因为互斥对象只有一个，所以可以保证互斥资源不会被多个线程同时访问；当前拥有互斥对象的线程处理完任务后必须将互斥对象交出，以便其他线程访问该资源；</li><li><strong>信号量</strong> Semaphore：信号量是内核对象，它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。信号量对象保存了<strong>最大资源计数</strong>和<strong>当前可用资源计数</strong>，每增加一个线程对共享资源的访问，当前可用资源计数就减1，只要当前可用资源计数大于0，就可以发出信号量信号，如果为0，则将线程放入一个队列中等待。线程处理完共享资源后，应在离开的同时通过<code>ReleaseSemaphore</code>函数将当前可用资源数加1。如果信号量的取值只能为0或1，那么信号量就成为了互斥量；</li><li><strong>事件</strong> Event：允许一个线程在处理完一个任务后，主动唤醒另外一个线程执行任务。事件分为手动重置事件和自动重置事件。手动重置事件被设置为激发状态后，会唤醒所有等待的线程，而且一直保持为激发状态，直到程序重新把它设置为未激发状态。自动重置事件被设置为激发状态后，会唤醒<strong>一个</strong>等待中的线程，然后自动恢复为未激发状态。</li><li><strong>临界区</strong> Critical Section：任意时刻只允许一个线程对临界资源进行访问。拥有临界区对象的线程可以访问该临界资源，其它试图访问该资源的线程将被挂起，直到临界区对象被释放。</li></ul><h5 id="互斥量和临界区有什么区别？"><a href="#互斥量和临界区有什么区别？" class="headerlink" title="互斥量和临界区有什么区别？"></a>互斥量和临界区有什么区别？</h5><p>互斥量是可以命名的，可以用于不同进程之间的同步；而临界区只能用于同一进程中线程的同步。创建互斥量需要的资源更多，因此临界区的优势是速度快，节省资源。</p><h3 id="什么是IO多路复用？怎么实现？"><a href="#什么是IO多路复用？怎么实现？" class="headerlink" title="什么是IO多路复用？怎么实现？"></a>什么是IO多路复用？怎么实现？</h3><p>IO多路复用（IO Multiplexing）是指单个进程/线程就可以同时处理多个IO请求。</p><p>实现原理：用户将想要监视的文件描述符（File Descriptor）添加到select/poll/epoll函数中，由内核监视，函数阻塞。一旦有文件描述符就绪（读就绪或写就绪），或者超时（设置timeout），函数就会返回，然后该进程可以进行相应的读/写操作。</p><h4 id="select-poll-epoll三者的区别？"><a href="#select-poll-epoll三者的区别？" class="headerlink" title="select/poll/epoll三者的区别？"></a>select/poll/epoll三者的区别？</h4><ul><li><code>select</code>：将文件描述符放入一个集合中，调用select时，将这个集合从用户空间拷贝到内核空间（缺点1：每次都要复制，<strong>开销大</strong>），由内核根据就绪状态修改该集合的内容。（缺点2）<strong>集合大小有限制</strong>，32位机默认是1024（64位：2048）；采用水平触发机制。select函数返回后，需要通过遍历这个集合，找到就绪的文件描述符（缺点3：<strong>轮询的方式效率较低</strong>），当文件描述符的数量增加时，效率会线性下降；</li><li><code>poll</code>：和select几乎没有区别，区别在于文件描述符的存储方式不同，poll采用链表的方式存储，没有最大存储数量的限制；</li><li><code>epoll</code>：通过内核和用户空间共享内存，避免了不断复制的问题；支持的同时连接数上限很高（1G左右的内存支持10W左右的连接数）；文件描述符就绪时，采用回调机制，避免了轮询（回调函数将就绪的描述符添加到一个链表中，执行epoll_wait时，返回这个链表）；支持水平触发和边缘触发，采用边缘触发机制时，只有活跃的描述符才会触发回调函数。</li></ul><p>总结，区别主要在于：</p><ul><li>一个线程/进程所能打开的最大连接数</li><li>文件描述符传递方式（是否复制）</li><li>水平触发 or 边缘触发</li></ul><h4 id="什么时候使用select-poll，什么时候使用epoll？"><a href="#什么时候使用select-poll，什么时候使用epoll？" class="headerlink" title="什么时候使用select/poll，什么时候使用epoll？"></a>什么时候使用select/poll，什么时候使用epoll？</h4><p>当连接数较多并且有很多的不活跃连接时，epoll的效率比其它两者高很多；但是当连接数较少并且都十分活跃的情况下，由于epoll需要很多回调，因此性能可能低于其它两者。</p><h4 id="什么是文件描述符？"><a href="#什么是文件描述符？" class="headerlink" title="什么是文件描述符？"></a>什么是文件描述符？</h4><p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。</p><p>内核通过文件描述符来访问文件。文件描述符指向一个文件。</p><h4 id="什么是水平触发？什么是边缘触发？"><a href="#什么是水平触发？什么是边缘触发？" class="headerlink" title="什么是水平触发？什么是边缘触发？"></a>什么是水平触发？什么是边缘触发？</h4><ul><li>水平触发（LT，Level Trigger）模式下，只要一个文件描述符就绪，就会触发通知，如果用户程序没有一次性把数据读写完，下次还会通知；</li><li>边缘触发（ET，Edge Trigger）模式下，当描述符从未就绪变为就绪时通知一次，之后不会再通知，直到再次从未就绪变为就绪（缓冲区从不可读/写变为可读/写）。</li><li>区别：边缘触发效率更高，减少了被重复触发的次数，函数不会返回大量用户程序可能不需要的文件描述符。</li><li>为什么边缘触发一定要用非阻塞（non-block）IO：避免由于一个描述符的阻塞读/阻塞写操作让处理其它描述符的任务出现饥饿状态。</li></ul><h4 id="有哪些常见的IO模型？"><a href="#有哪些常见的IO模型？" class="headerlink" title="有哪些常见的IO模型？"></a>有哪些常见的IO模型？</h4><ul><li>同步阻塞IO（Blocking IO）：用户线程发起IO读/写操作之后，线程阻塞，直到可以开始处理数据；对CPU资源的利用率不够；</li><li>同步非阻塞IO（Non-blocking IO）：发起IO请求之后可以立即返回，如果没有就绪的数据，需要不断地发起IO请求直到数据就绪；不断重复请求消耗了大量的CPU资源；</li><li>IO多路复用</li><li>异步IO（Asynchronous IO）：用户线程发出IO请求之后，继续执行，由内核进行数据的读取并放在用户指定的缓冲区内，在IO完成之后通知用户线程直接使用。</li></ul><h3 id="什么是用户态和内核态？"><a href="#什么是用户态和内核态？" class="headerlink" title="什么是用户态和内核态？"></a>什么是用户态和内核态？</h3><p>为了限制不同程序的访问能力，防止一些程序访问其它程序的内存数据，CPU划分了用户态和内核态两个权限等级。</p><ul><li>用户态只能受限地访问内存，且不允许访问外围设备，没有占用CPU的能力，CPU资源可以被其它程序获取；</li><li>内核态可以访问内存所有数据以及外围设备，也可以进行程序的切换。</li></ul><p>所有用户程序都运行在用户态，但有时需要进行一些内核态的操作，比如从硬盘或者键盘读数据，这时就需要进行系统调用，使用<strong>陷阱指令</strong>，CPU切换到内核态，执行相应的服务，再切换为用户态并返回系统调用的结果。</p><h5 id="为什么要分用户态和内核态？"><a href="#为什么要分用户态和内核态？" class="headerlink" title="为什么要分用户态和内核态？"></a>为什么要分用户态和内核态？</h5><p>（我自己的见解：）</p><ul><li>安全性：防止用户程序恶意或者不小心破坏系统/内存/硬件资源；</li><li>封装性：用户程序不需要实现更加底层的代码；</li><li>利于调度：如果多个用户程序都在等待键盘输入，这时就需要进行调度；统一交给操作系统调度更加方便。</li></ul><h5 id="如何从用户态切换到内核态？"><a href="#如何从用户态切换到内核态？" class="headerlink" title="如何从用户态切换到内核态？"></a>如何从用户态切换到内核态？</h5><ul><li>系统调用：比如读取命令行输入。本质上还是通过中断实现</li><li>用户程序发生异常时：比如缺页异常</li><li>外围设备的中断：外围设备完成用户请求的操作之后，会向CPU发出中断信号，这时CPU会转去处理对应的中断处理程序</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h3><p>在两个或者多个并发进程中，每个进程持有某种资源而又等待其它进程释放它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁(deadlock)。</p><h3 id="死锁产生的必要条件？"><a href="#死锁产生的必要条件？" class="headerlink" title="死锁产生的必要条件？"></a>死锁产生的必要条件？</h3><ul><li><strong>互斥</strong>：一个资源一次只能被一个进程使用；</li><li><strong>占有并等待</strong>：一个进程至少占有一个资源，并在等待另一个被其它进程占用的资源；</li><li><strong>非抢占</strong>：已经分配给一个进程的资源不能被强制性抢占，只能由进程完成任务之后自愿释放；</li><li><strong>循环等待</strong>：若干进程之间形成一种头尾相接的环形等待资源关系，该环路中的每个进程都在等待下一个进程所占有的资源。</li></ul><h3 id="死锁有哪些处理方法？"><a href="#死锁有哪些处理方法？" class="headerlink" title="死锁有哪些处理方法？"></a>死锁有哪些处理方法？</h3><p><strong>鸵鸟策略</strong><br>直接忽略死锁。因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p><p><strong>死锁预防</strong></p><p>基本思想是破坏形成死锁的四个必要条件：</p><ul><li>破坏互斥条件：允许某些资源同时被多个进程访问。但是有些资源本身并不具有这种属性，因此这种方案实用性有限；</li><li>破坏占有并等待条件：<ul><li>实行资源预先分配策略（当一个进程开始运行之前，必须一次性向系统申请它所需要的全部资源，否则不运行）；</li><li>或者只允许进程在没有占用资源的时候才能申请资源（申请资源前先释放占有的资源）；</li><li>缺点：很多时候无法预知一个进程所需的全部资源；同时，会降低资源利用率，降低系统的并发性；</li></ul></li><li>破坏非抢占条件：允许进程强行抢占被其它进程占有的资源。会降低系统性能；</li><li>破坏循环等待条件：对所有资源统一编号，所有进程对资源的请求必须按照序号递增的顺序提出，即只有占有了编号较小的资源才能申请编号较大的资源。这样避免了占有大号资源的进程去申请小号资源。</li></ul><p><strong>死锁避免</strong><br><code>银行家算法</code></p><p>动态地检测资源分配状态，以确保系统处于安全状态，只有处于安全状态时才会进行资源的分配。所谓安全状态是指：即使所有进程突然请求需要的所有资源，也能存在某种对进程的资源分配顺序，使得每一个进程运行完毕。</p><p><strong>死锁解除</strong><br>如何检测死锁：检测有向图是否存在环；或者使用类似死锁避免的检测算法。</p><p><strong>死锁解除的方法:</strong></p><ul><li>利用抢占：挂起某些进程，并抢占它的资源。但应防止某些进程被长时间挂起而处于饥饿状态；</li><li>利用回滚：让某些进程回退到足以解除死锁的地步，进程回退时自愿释放资源。要求系统保持进程的历史信息，设置还原点；</li><li>利用杀死进程：强制杀死某些进程直到死锁解除为止，可以按照优先级进行。</li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="分页和分段有什么区别？"><a href="#分页和分段有什么区别？" class="headerlink" title="分页和分段有什么区别？"></a>分页和分段有什么区别？</h3><ul><li>页式存储：用户空间划分为大小相等的部分称为页（page），内存空间划分为同样大小的区域称为页框，分配时以页为单位，按进程需要的页数分配，逻辑上相邻的页物理上不一定相邻；</li><li>段式存储：用户进程地址空间按照自身逻辑关系划分为若干个段（segment）（如代码段，数据段，堆栈段），内存空间被动态划分为长度不同的区域，分配时以段为单位，每段在内存中占据连续空间，各段可以不相邻；</li><li>段页式存储：用户进程先按段划分，段内再按页划分，内存划分和分配按页。</li></ul><p>区别：</p><ul><li>目的不同：分页的目的是管理内存，用于虚拟内存以获得更大的地址空间；分段的目的是满足用户的需要，使程序和数据可以被划分为逻辑上独立的地址空间；</li><li>大小不同：段的大小不固定，由其所完成的功能决定；页的大小固定，由系统决定；</li><li>地址空间维度不同：分段是二维地址空间（段号+段内偏移），分页是一维地址空间（每个进程一个页表/多级页表，通过一个逻辑地址就能找到对应的物理地址）；</li><li>分段便于信息的保护和共享；分页的共享收到限制；</li><li>碎片：分段没有内碎片，但会产生外碎片；分页没有外碎片，但会产生内碎片（一个页填不满）</li></ul><h3 id="什么是虚拟内存？"><a href="#什么是虚拟内存？" class="headerlink" title="什么是虚拟内存？"></a>什么是虚拟内存？</h3><p>每个程序都拥有自己的地址空间，这个地址空间被分成大小相等的页，这些页被映射到物理内存；但不需要所有的页都在物理内存中，当程序引用到不在物理内存中的页时，由操作系统将缺失的部分装入物理内存。这样，对于程序来说，逻辑上似乎有很大的内存空间，只是实际上有一部分是存储在磁盘上，因此叫做虚拟内存。</p><p>虚拟内存的优点是让程序可以获得更多的可用内存。</p><h4 id="如何进行地址空间到物理内存的映射？"><a href="#如何进行地址空间到物理内存的映射？" class="headerlink" title="如何进行地址空间到物理内存的映射？"></a>如何进行地址空间到物理内存的映射？</h4><p><strong>内存管理单元</strong>（MMU）管理着逻辑地址和物理地址的转换，其中的页表（Page table）存储着页（逻辑地址）和页框（物理内存空间）的映射表，页表中还包含包含有效位（是在内存还是磁盘）、访问位（是否被访问过）、修改位（内存中是否被修改过）、保护位（只读还是可读写）。逻辑地址：页号+页内地址（偏移）；每个进程一个页表，放在内存，页表起始地址在PCB/寄存器中。</p><h3 id="有哪些页面置换算法？"><a href="#有哪些页面置换算法？" class="headerlink" title="有哪些页面置换算法？"></a>有哪些页面置换算法？</h3><ul><li><strong>最佳页面置换算法</strong>OPT（Optimal replacement algorithm）：置换以后不需要或者最远的将来才需要的页面，是一种理论上的算法，是最优策略；</li><li><strong>先进先出</strong>FIFO：置换在内存中驻留时间最长的页面。缺点：有可能将那些经常被访问的页面也被换出，从而使缺页率升高；</li><li><strong>第二次机会算法</strong>SCR：按FIFO选择某一页面，若其访问位为1，给第二次机会，并将访问位置0；</li><li><strong>时钟算法</strong> Clock：SCR中需要将页面在链表中移动（第二次机会的时候要将这个页面从链表头移到链表尾），时钟算法使用环形链表，再使用一个指针指向最老的页面，避免了移动页面的开销；</li><li><strong>最近未使用算法</strong>NRU（Not Recently Used）：检查访问位R、修改位M，优先置换R=M=0，其次是（R=0, M=1）；</li><li><strong>最近最少使用算法</strong>LRU（Least Recently Used）：置换出未使用时间最长的一页；实现方式：维护时间戳，或者维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。</li><li><strong>最不经常使用算法</strong>NFU：置换出访问次数最少的页面</li></ul><h4 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h4><ul><li>时间上：最近被访问的页在不久的将来还会被访问；</li><li>空间上：内存中被访问的页周围的页也很可能被访问。</li></ul><h4 id="什么是颠簸现象"><a href="#什么是颠簸现象" class="headerlink" title="什么是颠簸现象"></a>什么是颠簸现象</h4><p>颠簸本质上是指频繁的页调度行为。进程发生缺页中断时必须置换某一页。然而，其他所有的页都在使用，它置换一个页，但又立刻再次需要这个页。因此会不断产生缺页中断，导致整个系统的效率急剧下降，这种现象称为颠簸。内存颠簸的解决策略包括：</p><ul><li>修改页面置换算法；</li><li>降低同时运行的程序的数量；</li><li>终止该进程或增加物理内存容量。</li></ul><h2 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h2><p>过程：磁头（找到对应的盘面）；磁道（一个盘面上的同心圆环，寻道时间）；扇区（旋转时间）。为减小寻道时间的调度算法：</p><ul><li>先来先服务</li><li>最短寻道时间优先</li><li>电梯算法：电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/c1015f5ffa74" target="_blank" rel="noopener">进程间通信IPC – 简书</a></li><li><a href="https://blog.csdn.net/justloveyou_/article/details/78304294" target="_blank" rel="noopener">面试/笔试第二弹 —— 操作系统面试问题集锦 - CSDN博客</a></li><li><a href="https://segmentfault.com/a/1190000018970361" target="_blank" rel="noopener">线程同步与并发 - - SegmentFault</a></li><li><a href="http://baijiahao.baidu.com/s?id=1641172494287388070&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">彻底搞懂epoll高效运行的原理</a></li><li><a href="https://www.cnblogs.com/lirong21/p/4213028.html" target="_blank" rel="noopener">用户态与内核态的切换</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络面试笔记</title>
      <link href="/interview/computer-network-interview-notes/"/>
      <url>/interview/computer-network-interview-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络面试笔记"><a href="#计算机网络面试笔记" class="headerlink" title="计算机网络面试笔记"></a>计算机网络面试笔记</h1><h2 id="传输层：TCP-和-UDP"><a href="#传输层：TCP-和-UDP" class="headerlink" title="传输层：TCP 和 UDP"></a>传输层：TCP 和 UDP</h2><h3 id="什么是三次握手？"><a href="#什么是三次握手？" class="headerlink" title="什么是三次握手？"></a>什么是三次握手？</h3><p><img src="https://s.gin.sh/blog/interview/TCP_establishes_a_connection.png" alt="TCP 三次握手"></p><ul><li>第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状态；</li><li>第二次握手：Server收到Client的SYN=1之后，知道客户端请求建立连接，将自己的SYN置1，ACK置1，产生一个acknowledge number=sequence number+1，并随机产生一个自己的初始序列- 号，发送给客户端；进入SYN_RCVD状态；</li><li>第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将自己的ACK置为1，产生一个acknowledge number=服务器发的序列号+1，发送给服务器；进入ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入ESTABLISHED状态；完成三次握手，连接建立。</li></ul><h4 id="TCP建立连接可以两次握手吗？为什么"><a href="#TCP建立连接可以两次握手吗？为什么" class="headerlink" title="TCP建立连接可以两次握手吗？为什么?"></a>TCP建立连接可以两次握手吗？为什么?</h4><p>不可以。可能会出现以下情况：已失效的连接请求报文段又传到了服务器端。</p><blockquote><p>client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。</p></blockquote><h4 id="可以采用四次握手吗？为什么？"><a href="#可以采用四次握手吗？为什么？" class="headerlink" title="可以采用四次握手吗？为什么？"></a>可以采用四次握手吗？为什么？</h4><p>可以。但是会降低传输的效率。</p><blockquote><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p></blockquote><h4 id="第三次握手中，如果客户端的ACK未送达服务器，会怎样？"><a href="#第三次握手中，如果客户端的ACK未送达服务器，会怎样？" class="headerlink" title="第三次握手中，如果客户端的ACK未送达服务器，会怎样？"></a>第三次握手中，如果客户端的ACK未送达服务器，会怎样？</h4><p>由于Server没有收到ACK确认，因此会重发之前的SYN+ACK（默认重发五次，之后自动关闭连接），Client收到后会重新传ACK给Server。</p><blockquote><p>如果Client向服务器发送数据，服务器会以RST包响应。</p></blockquote><h4 id="如果已经建立了连接，但客户端出现了故障怎么办？"><a href="#如果已经建立了连接，但客户端出现了故障怎么办？" class="headerlink" title="如果已经建立了连接，但客户端出现了故障怎么办？"></a>如果已经建立了连接，但客户端出现了故障怎么办？</h4><p>服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h4 id="初始序列号是什么？"><a href="#初始序列号是什么？" class="headerlink" title="初始序列号是什么？"></a>初始序列号是什么？</h4><p>TCP连接的一方A，随机选择一个32位的序列号（Sequence Number）作为发送数据的初始序列号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行编号：1001、1002…三次握手时，把这个初始序列号传送给另一方B，以便在传输数据时，B可以确认什么样的数据编号是合法的；同时在进行数据传输时，A还可以确认B收到的每一个字节，如果A收到了B的确认编号（acknowledge number）是2001，就说明编号为1001-2000的数据已经被B成功接受。</p><h3 id="什么是四次挥手？"><a href="#什么是四次挥手？" class="headerlink" title="什么是四次挥手？"></a>什么是四次挥手？</h3><p><img src="https://s.gin.sh/blog/interview/TCP_disconnect.png" alt="TCP 四次挥手"></p><ul><li>第一次挥手：Client将FIN置为1，发送一个序列号seq给Server；进入FIN_WAIT_1状态；</li><li>第二次挥手：Server收到FIN之后，发送一个ACK=1，acknowledge number=收到的序列号+1；进入CLOSE_WAIT状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。</li><li>第三次挥手：Server将FIN置1，发送一个序列号给Client；进入LAST_ACK状态；</li><li>第四次挥手：Client收到服务器的FIN后，进入TIME_WAIT状态；接着将ACK置1，发送一个acknowledge number=序列号+1给服务器；服务器收到后，确认acknowledge number后，变为CLOSED状态，不再向客户端发送数据。客户端等待2*MSL（报文段最长寿命）时间后，也进入CLOSED状态。完成四次挥手。</li></ul><h4 id="为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE-WAIT状态意义是什么）？"><a href="#为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE-WAIT状态意义是什么）？" class="headerlink" title="为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE_WAIT状态意义是什么）？"></a>为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE_WAIT状态意义是什么）？</h4><p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复ACK，表示接收到了断开连接的请求。等到数据发完之后再发FIN，断开服务器到客户端的数据传送。</p><h4 id="如果第二次挥手时服务器的ACK没有送达客户端，会怎样？"><a href="#如果第二次挥手时服务器的ACK没有送达客户端，会怎样？" class="headerlink" title="如果第二次挥手时服务器的ACK没有送达客户端，会怎样？"></a>如果第二次挥手时服务器的ACK没有送达客户端，会怎样？</h4><p>客户端没有收到ACK确认，会重新发送FIN请求。</p><h4 id="客户端TIME-WAIT状态的意义是什么？"><a href="#客户端TIME-WAIT状态的意义是什么？" class="headerlink" title="客户端TIME_WAIT状态的意义是什么？"></a>客户端TIME_WAIT状态的意义是什么？</h4><p>第四次挥手时，客户端发送给服务器的ACK有可能丢失，TIME_WAIT状态就是用来重发可能丢失的ACK报文。如果Server没有收到ACK，就会重发FIN，如果Client在2*MSL的时间内收到了FIN，就会重新发送ACK并再次等待2MSL，防止Server没有收到ACK而不断重发FIN。</p><blockquote><p><code>MSL</code>(Maximum Segment Lifetime)，指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p></blockquote><h3 id="TCP-如何实现流量控制？"><a href="#TCP-如何实现流量控制？" class="headerlink" title="TCP 如何实现流量控制？"></a>TCP 如何实现流量控制？</h3><p><img src="https://s.gin.sh/blog/interview/TCP_message.png" alt="TCP 报文格式"></p><p>使用滑动窗口协议实现流量控制。防止发送方发送速率太快，接收方缓存区不够导致溢出。接收方会维护一个接收窗口 receiver window（窗口大小单位是字节），接受窗口的大小是根据自己的资源情况动态调整的，在返回ACK时将接受窗口大小放在TCP报文中的窗口字段告知发送方。发送窗口的大小不能超过接受窗口的大小，只有当发送方发送并收到确认之后，才能将发送窗口右移。</p><p>发送窗口的上限为接受窗口和拥塞窗口中的较小值。接受窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。</p><h4 id="什么是零窗口（接收窗口为0时会怎样）？"><a href="#什么是零窗口（接收窗口为0时会怎样）？" class="headerlink" title="什么是零窗口（接收窗口为0时会怎样）？"></a>什么是零窗口（接收窗口为0时会怎样）？</h4><p>如果接收方没有能力接收数据，就会将接收窗口设置为0，这时发送方必须暂停发送数据，但是会启动一个持续计时器(persistence timer)，到期后发送一个大小为1字节的探测数据包，以查看接收窗口状态。如果接收方能够接收数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。</p><h3 id="TCP-的拥塞控制是怎么实现的？"><a href="#TCP-的拥塞控制是怎么实现的？" class="headerlink" title="TCP 的拥塞控制是怎么实现的？"></a>TCP 的拥塞控制是怎么实现的？</h3><p><img src="https://s.gin.sh/blog/interview/TCP_congestion_control.png" alt="TCP 报文格式"></p><p>拥塞控制主要由四个算法组成：<code>慢启动</code>（Slow Start）、<code>拥塞避免</code>（Congestion voidance）、<code>快重传</code> （Fast Retransmit）、<code>快恢复</code>（Fast Recovery）</p><h4 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h4><p><img src="https://s.gin.sh/blog/interview/TCP_Fast_Retransmit.png" alt="TCP 报文格式"></p><p>刚开始发送数据时，先把拥塞窗口（congestion window）设置为一个最大报文段MSS的数值，每收到一个新的确认报文之后，就把拥塞窗口加1个MSS。这样每经过一个传输轮次（或者说是每经过一个往返时间RTT），拥塞窗口的大小就会加倍</p><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><p>当拥塞窗口的大小达到慢开始门限(slow start threshold)时，开始执行拥塞避免算法，拥塞窗口大小不再指数增加，而是线性增加，即每经过一个传输轮次只增加1MSS.</p><blockquote><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。（<code>这是不使用快重传的情况</code>）</p></blockquote><h4 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h4><p><img src="https://s.gin.sh/blog/interview/TCP_Slow_Start.png" alt="TCP 报文格式"></p><p>快重传要求接收方在收到一个失序的报文段后就立即发出<code>重复确认</code>（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p><h4 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h4><p>当发送方连续收到三个重复确认时，就把慢开始门限减半，然后执行拥塞避免算法。不执行慢开始算法的原因：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。<br>也有的快重传是把开始时的拥塞窗口cwnd值再增大一点，即等于 ssthresh + 3*MSS 。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络的资源而是停留在接收方的缓存中。可见现在网络中减少了三个分组。因此可以适当把拥塞窗口扩大些</p><h3 id="TCP-与-UDP-的区别"><a href="#TCP-与-UDP-的区别" class="headerlink" title="TCP 与 UDP 的区别"></a>TCP 与 UDP 的区别</h3><p>&emsp;1.TCP 是面向连接的，UDP 是无连接的；</p><h4 id="什么叫无连接？"><a href="#什么叫无连接？" class="headerlink" title="什么叫无连接？"></a>什么叫无连接？</h4><p>UDP发送数据之前不需要建立连接<br>&emsp;2.TCP是可靠的，UDP不可靠；</p><h4 id="什么叫不可靠？"><a href="#什么叫不可靠？" class="headerlink" title="什么叫不可靠？"></a>什么叫不可靠？</h4><p>UDP接收方收到报文后，不需要给出任何确认<br>&emsp;3.TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多；<br>&emsp;4.TCP是面向字节流的，UDP是面向报文的；</p><h4 id="什么意思？"><a href="#什么意思？" class="headerlink" title="什么意思？"></a>什么意思？</h4><p>&emsp;5.TCP有拥塞控制机制，UDP没有。网络出现的拥塞不会使源主机的发送速率降低，这对某些实时应用是很重要的，比如媒体通信，游戏；<br>&emsp;6.TCP首部开销（20字节）比UDP首部开销（8字节）要大<br>&emsp;7.UDP 的主机不需要维持复杂的连接状态表</p><h4 id="什么时候选择TCP，什么时候选UDP？"><a href="#什么时候选择TCP，什么时候选UDP？" class="headerlink" title="什么时候选择TCP，什么时候选UDP？"></a>什么时候选择TCP，什么时候选UDP？</h4><p>对某些实时性要求比较高的情况，选择UDP，比如游戏，媒体通信，实时视频流（直播），即使出现传输错误也可以容忍；其它大部分情况下，HTTP都是用TCP，因为要求传输的内容可靠，不出现丢失</p><h4 id="HTTP可以使用UDP吗？"><a href="#HTTP可以使用UDP吗？" class="headerlink" title="HTTP可以使用UDP吗？"></a>HTTP可以使用UDP吗？</h4><p>HTTP不可以使用UDP，HTTP需要基于可靠的传输协议，而UDP不可靠</p><h4 id="面向连接和无连接的区别"><a href="#面向连接和无连接的区别" class="headerlink" title="面向连接和无连接的区别"></a>面向连接和无连接的区别</h4><p>无连接的网络服务（数据报服务）– 面向连接的网络服务（虚电路服务）</p><p>虚电路服务：首先建立连接，所有的数据包经过相同的路径，服务质量有较好的保证；</p><p>数据报服务：每个数据包含目的地址，数据路由相互独立（路径可能变化）；网络尽最大努力交付数据，但不保证不丢失、不保证先后顺序、不保证在时限内交付；网络发生拥塞时，可能会将一些分组丢弃；</p><p><img src="https://s.gin.sh/blog/interview/Compare_data_messages_and_virtual_messages.png" alt="Compare_data_messages_and_virtual_messages"></p><h3 id="TCP-如何保证传输的可靠性"><a href="#TCP-如何保证传输的可靠性" class="headerlink" title="TCP 如何保证传输的可靠性"></a>TCP 如何保证传输的可靠性</h3><ul><li>1.数据包校验</li><li>2.对失序数据包重新排序（TCP报文具有序列号）</li><li>3.丢弃重复数据</li><li>4.应答机制：接收方收到数据之后，会发送一个确认（通常延迟几分之一秒）；</li><li>5.超时重发：发送方发出数据之后，启动一个定时器，超时未收到接收方的确认，则重新发送这个数据；</li><li>6.流量控制：确保接收端能够接收发送方的数据而不会缓冲区溢出</li></ul><h3 id="什么是-TCP-粘包？"><a href="#什么是-TCP-粘包？" class="headerlink" title="什么是 TCP 粘包？"></a>什么是 TCP 粘包？</h3><p>TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包，从接收端缓冲区来看，后一包数据的头紧接着前一包数据的尾。</p><p>如果发送方发送的多组数据本来就是同一块数据的不同部分，比如说一个文件被分成多个部分发送，这时当然不需要处理粘包现象；如果多个分组毫不相干，甚至是并列关系，那么这个时候就一定要处理粘包现象了</p><blockquote><p>出现粘包的原因：</p></blockquote><ul><li>发送方：默认使用<strong>Nagle算法</strong>（主要作用：减少网络中报文段的数量），将多次间隔较小、数据量较小的数据，合并成一个数据量大的数据块，进行发送；</li><li>接收方：TCP将接收到的数据包保存在<strong>接收缓存</strong>里，然后应用程序主动从缓存读取收到的分组。如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。</li></ul><h5 id="如何解决粘包问题？"><a href="#如何解决粘包问题？" class="headerlink" title="如何解决粘包问题？"></a>如何解决粘包问题？</h5><ul><li>发送方：关闭Nagle算法；</li><li>接收方：在应用层进行处理。将所有数据全部读完之后，再进行分组。分组的方法可以通过规定开始符和结束符的方法；也可以在每组数据前加上数据长度。</li></ul><h2 id="应用层：HTTP-和-HTTPS"><a href="#应用层：HTTP-和-HTTPS" class="headerlink" title="应用层：HTTP 和 HTTPS"></a>应用层：HTTP 和 HTTPS</h2><h3 id="HTTP-和-HTTPS-有什么区别？"><a href="#HTTP-和-HTTPS-有什么区别？" class="headerlink" title="HTTP 和 HTTPS 有什么区别？"></a>HTTP 和 HTTPS 有什么区别？</h3><ul><li>1.端口不同：HTTP使用的是80端口，HTTPS使用443端口；</li><li>2.HTTP（超文本传输协议）信息是明文传输，HTTPS运行在SSL(Secure Socket Layer)之上，添加了加密和认证机制，更加安全；</li><li>3.HTTPS由于加密解密会带来更大的CPU和内存开销；</li><li>4.HTTPS通信需要证书，一般需要向证书颁发机构（CA）购买</li></ul><h4 id="HTTPS-的连接过程？"><a href="#HTTPS-的连接过程？" class="headerlink" title="HTTPS 的连接过程？"></a>HTTPS 的连接过程？</h4><ul><li>1.客户端向服务器发送请求，同时发送客户端支持的一套加密规则（包括对称加密、非对称加密、摘要算法）；</li><li>2.服务器从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，<strong>加密公钥</strong>（用于非对称加密），以及证书的颁发机构等信息（证书中的私钥只能用于服务器端进行解密）；</li><li>3.客户端验证服务器的合法性，包括：证书是否过期，CA 是否可靠，发行者证书的公钥能否正确解开服务器证书的“发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配；</li><li>4.如果证书受信任，或者用户接收了不受信任的证书，浏览器会生成一个<strong>随机密钥</strong>（用于对称算法），并用服务器提供的公钥加密（采用非对称算法对密钥加密）；使用Hash算法对握手消息进行<strong>摘要</strong>计算，并对摘要使用之前产生的密钥加密（对称算法）；将加密后的随机密钥和摘要一起发送给服务器；</li><li>5.服务器使用自己的私钥解密，得到对称加密的密钥，用这个密钥解密出Hash摘要值，并验证握手消息是否一致；如果一致，服务器使用对称加密的密钥加密握手消息发给浏览器；</li><li>6.浏览器解密并验证摘要，若一致，则握手结束。之后的数据传送都使用对称加密的密钥进行加密</li></ul><blockquote><p>总结：非对称加密算法用于在握手过程中加密生成的密码；对称加密算法用于对真正传输的数据进行加密；HASH算法用于验证数据的完整性。</p></blockquote><h3 id="GET与POST的区别？"><a href="#GET与POST的区别？" class="headerlink" title="GET与POST的区别？"></a>GET与POST的区别？</h3><ul><li>1.GET是幂等的，即读取同一个资源，总是得到相同的数据，POST不是幂等的；</li><li>2.GET一般用于从服务器获取资源，而POST有可能改变服务器上的资源；</li><li>3.请求形式上：GET请求的数据附在URL之后，在HTTP请求头中；POST请求的数据在请求体中；</li><li>4.安全性：GET请求可被缓存、收藏、保留到历史记录，且其请求数据明文出现在URL中。POST的参数不会被保存，安全性相对较高；</li><li>5.GET只允许ASCII字符，POST对数据类型没有要求，也允许二进制数据；</li><li>6.GET的长度有限制（操作系统或者浏览器），而POST数据大小无限制</li></ul><h3 id="Session与Cookie的区别？"><a href="#Session与Cookie的区别？" class="headerlink" title="Session与Cookie的区别？"></a>Session与Cookie的区别？</h3><p>Session是服务器端保持状态的方案，Cookie是客户端保持状态的方案</p><p>Cookie保存在客户端本地，客户端请求服务器时会将Cookie一起提交；Session保存在服务端，通过检索Sessionid查看状态。保存Sessionid的方式可以采用Cookie，如果禁用了Cookie，可以使用URL重写机制（把会话ID保存在URL中）。</p><h3 id="从输入网址到获得页面的过程-越详细越好-？"><a href="#从输入网址到获得页面的过程-越详细越好-？" class="headerlink" title="从输入网址到获得页面的过程 (越详细越好)？"></a>从输入网址到获得页面的过程 (越详细越好)？</h3><ul><li>1.浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</li><li>2.浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li><li>3.TCP/IP 链接建立起来后，浏览器向服务器发送HTTP请求；</li><li>4.服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</li><li>5.浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</li><li>6.浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li></ul><h3 id="HTTP请求有哪些常见状态码？"><a href="#HTTP请求有哪些常见状态码？" class="headerlink" title="HTTP请求有哪些常见状态码？"></a>HTTP请求有哪些常见状态码？</h3><ul><li>2xx状态码：操作成功。200 OK</li><li>3xx状态码：重定向。301 永久重定向；302暂时重定向</li><li>4xx状态码：客户端错误。400 Bad Request；401 Unauthorized；403 Forbidden；404 Not Found；</li><li>5xx状态码：服务端错误。500服务器内部错误；501服务不可用</li></ul><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><p><img src="https://s.gin.sh/blog/interview/Computer_network_architecture.png" alt="Computer_network_architecture"></p><ul><li>Physical, Data Link, Network, Transport, Application</li><li>应用层：常见协议：<ul><li><code>FTP</code>(21端口)：文件传输协议</li><li><code>SSH</code>(22端口)：远程登陆</li><li><code>TELNET</code>(23端口)：远程登录</li><li><code>SMTP</code>(25端口)：发送邮件</li><li><code>POP3</code>(110端口)：接收邮件</li><li><code>HTTP</code>(80端口)：超文本传输协议</li><li><code>DNS</code>(53端口)：运行在UDP上，域名解析服务</li></ul></li><li>传输层：TCP/UDP</li><li>网络层：IP、ARP、NAT、RIP…</li></ul><h3 id="路由器、交换机位于哪一层？"><a href="#路由器、交换机位于哪一层？" class="headerlink" title="路由器、交换机位于哪一层？"></a>路由器、交换机位于哪一层？</h3><ul><li>路由器网络层，根据IP地址进行寻址；</li><li>交换机数据链路层，根据MAC地址进行寻址</li></ul><h2 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h2><h3 id="什么是RIP-Routing-Information-Protocol-距离矢量路由协议-算法是什么？"><a href="#什么是RIP-Routing-Information-Protocol-距离矢量路由协议-算法是什么？" class="headerlink" title="什么是RIP (Routing Information Protocol, 距离矢量路由协议)? 算法是什么？"></a>什么是RIP (Routing Information Protocol, 距离矢量路由协议)? 算法是什么？</h3><p>每个路由器维护一张表，记录该路由器到其它网络的”跳数“，路由器到与其直接连接的网络的跳数是1，每多经过一个路由器跳数就加1；更新该表时和相邻路由器交换路由信息；路由器允许一个路径最多包含15个路由器，如果跳数为16，则不可达。交付数据报时优先选取距离最短的路径。</p><p><strong>优缺点：</strong></p><ul><li>实现简单，开销小</li><li>随着网络规模扩大开销也会增大；</li><li>最大距离为15，限制了网络的规模；</li><li>当网络出现故障时，要经过较长的时间才能将此信息传递到所有路由器</li></ul><h3 id="IP地址的分类？"><a href="#IP地址的分类？" class="headerlink" title="IP地址的分类？"></a>IP地址的分类？</h3><p><img src="https://s.gin.sh/blog/interview/Classification_of_IP_addresses.png" alt="Classification_of_IP_addresses"></p><p>路由器仅根据网络号net-id来转发分组，当分组到达目的网络的路由器之后，再按照主机号host-id将分组交付给主机；同一网络上的所有主机的网络号相同。</p><h3 id="什么叫划分子网？"><a href="#什么叫划分子网？" class="headerlink" title="什么叫划分子网？"></a>什么叫划分子网？</h3><p>从主机号host-id借用若干个比特作为子网号subnet-id；子网掩码：网络号和子网号都为1，主机号为0；数据报仍然先按照网络号找到目的网络，发送到路由器，路由器再按照网络号和子网号找到目的子网：将子网掩码与目标地址逐比特与操作，若结果为某个子网的网络地址，则送到该子网。</p><h3 id="什么是ARP协议？"><a href="#什么是ARP协议？" class="headerlink" title="什么是ARP协议？"></a>什么是ARP协议？</h3><p><strong>ARP协议完成了IP地址与物理地址的映射</strong>。每一个主机都设有一个 ARP 高速缓存，里面有<strong>所在的局域网</strong>上的各主机和路由器的 IP 地址到硬件地址的映射表。当源主机要发送数据包到目的主机时，会先检查自己的ARP高速缓存中有没有目的主机的MAC地址，如果有，就直接将数据包发到这个MAC地址，如果没有，就向<strong>所在的局域网</strong>发起一个ARP请求的广播包（在发送自己的 ARP 请求时，同时会带上自己的 IP 地址到硬件地址的映射），收到请求的主机检查自己的IP地址和目的主机的IP地址是否一致，如果一致，则先保存源主机的映射到自己的ARP缓存，然后给源主机发送一个ARP响应数据包。源主机收到响应数据包之后，先添加目的主机的IP地址与MAC地址的映射，再进行数据传送。如果源主机一直没有收到响应，表示ARP查询失败。</p><h3 id="什么是NAT-网络地址转换-？"><a href="#什么是NAT-网络地址转换-？" class="headerlink" title="什么是NAT (网络地址转换)？"></a>什么是NAT (网络地址转换)？</h3><p>用于解决内网中的主机要和因特网上的主机通信。由NAT路由器将主机的本地IP地址转换为全球IP地址，分为静态转换（转换得到的全球IP地址固定不变）和动态NAT转换。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/justloveyou_/article/details/78303617" target="_blank" rel="noopener">面试/笔试第一弹 —— 计算机网络面试问题集锦</a></li><li><a href="https://blog.csdn.net/yjxsdzx/article/details/71937886" target="_blank" rel="noopener">什么时候选TCP、UDP？</a></li><li><a href="https://blog.csdn.net/weixin_41047704/article/details/85340311" target="_blank" rel="noopener">什么是TCP粘包？怎么解决这个问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库面试笔记</title>
      <link href="/interview/database-interview-notes/"/>
      <url>/interview/database-interview-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库面试笔记"><a href="#数据库面试笔记" class="headerlink" title="数据库面试笔记"></a>数据库面试笔记</h1><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="事务的概念和特性？"><a href="#事务的概念和特性？" class="headerlink" title="事务的概念和特性？"></a>事务的概念和特性？</h3><p>概念：事务（Transaction）是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束</p><p>特性（ACID）：</p><ul><li><strong>原子性</strong>（Atomicity）：逻辑上是不可分割的操作单元，事务的所有操作要么全部提交成功，要么全部失败回滚（用回滚日志实现，反向执行日志中的操作）；</li><li><strong>一致性</strong>（Consistency）：事务的执行必须使数据库保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的；</li><li><strong>隔离性</strong>（Isolation）：一个事务所做的修改在最终提交以前，对其它事务是不可见的（并发执行的事务之间不能相互影响）；</li><li><strong>持久性</strong>（Durability）：一旦事务提交成功，对数据的修改是永久性的</li></ul><h3 id="会出现哪些并发一致性问题？"><a href="#会出现哪些并发一致性问题？" class="headerlink" title="会出现哪些并发一致性问题？"></a>会出现哪些并发一致性问题？</h3><ul><li><strong>丢失修改</strong>：一个事务对数据进行了修改，在事务提交之前，另一个事务对同一个数据进行了修改，覆盖了之前的修改；</li><li><strong>脏读</strong>（Dirty Read）：一个事务读取了被另一个事务修改、但未提交（进行了回滚）的数据，造成两个事务得到的数据不一致；</li><li><strong>不可重复读</strong>（Nonrepeatable Read）：在同一个事务中，某查询操作在一个时间读取某一行数据和之后一个时间读取该行数据，发现数据已经发生修改（可能被更新或删除了）；</li><li><strong>幻读</strong>（Phantom Read）：当同一查询多次执行时，由于其它事务在这个数据范围内执行了<strong>插入操作</strong>，会导致每次返回不同的结果集（和不可重复读的区别：针对的是一个数据整体/范围；并且需要是插入操作）</li></ul><h3 id="数据库的四种隔离级别？"><a href="#数据库的四种隔离级别？" class="headerlink" title="数据库的四种隔离级别？"></a>数据库的四种隔离级别？</h3><ul><li><strong>未提交读</strong>（Read Uncommited）：在一个事务提交之前，它的执行结果对其它事务也是可见的。会导致脏读、不可重复读、幻读；</li><li><strong>提交读</strong>（Read Commited）：一个事务只能看见已经提交的事务所作的改变。可避免脏读问题；</li><li><strong>可重复读</strong>（Repeatable Read）：可以确保同一个事务在多次读取同样的数据时得到相同的结果。（MySQL的默认隔离级别）。可避免不可重复读；</li><li><strong>可串行化</strong>（Serializable）：强制事务串行执行，使之不可能相互冲突，从而解决幻读问题。可能导致大量的超时现象和锁竞争，实际很少使用。</li></ul><h3 id="什么是乐观锁和悲观锁？"><a href="#什么是乐观锁和悲观锁？" class="headerlink" title="什么是乐观锁和悲观锁？"></a>什么是乐观锁和悲观锁？</h3><ul><li>悲观锁：认为数据随时会被修改，因此每次读取数据之前都会上锁，防止其它事务读取或修改数据；应用于<strong>数据更新比较频繁</strong>的场景；</li><li>乐观锁：操作数据时不会上锁，但是更新时会判断在此期间有没有别的事务更新这个数据，若被更新过，则失败重试；适用于<strong>读多写少</strong>的场景。乐观锁的实现方式有：<ul><li>加一个版本号或者时间戳字段，每次数据更新时同时更新这个字段；</li><li>先读取想要更新的字段或者所有字段，更新的时候比较一下，只有字段没有变化才进行更新</li></ul></li></ul><h3 id="常见的封锁类型？"><a href="#常见的封锁类型？" class="headerlink" title="常见的封锁类型？"></a>常见的封锁类型？</h3><ul><li><strong>排它锁</strong>（Exclusive Lock）/ X锁：事务对数据加上X锁时，只允许此事务读取和修改此数据，并且其它事务不能对该数据加任何锁；</li><li><strong>共享锁</strong>（Shared Lock）/ S锁：加了S锁后，该事务只能对数据进行读取而不能修改，并且其它事务只能加S锁，不能加X锁</li><li><strong>意向锁</strong>（Intention Locks）：<ul><li>一个事务在获得某个<strong>数据行</strong>对象的 S 锁之前，必须先获得<strong>整个表</strong>的 IS 锁或更强的锁；</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得整个表的 IX 锁；</li><li>IS/IX 锁之间都是兼容的；</li><li>好处：如果一个事务想要对整个表加X锁，就需要先检测是否有其它事务对该表或者该表中的某一行加了锁，这种检测非常耗时。有了意向锁之后，只需要检测整个表是否存在IX/IS/X/S锁就行了</li></ul></li></ul><p>锁的作用：用于管理对共享资源的并发访问，保证数据库的完整性和一致性</p><h4 id="封锁粒度的概念"><a href="#封锁粒度的概念" class="headerlink" title="封锁粒度的概念"></a>封锁粒度的概念</h4><p>MySQL 中提供了两种封锁粒度：<strong>行级锁</strong>以及<strong>表级锁</strong>。</p><p>封锁粒度小：</p><ul><li>好处：锁定的数据量越少，发生锁争用的可能就越小，系统的<strong>并发程度</strong>就越高；</li><li>坏处：<strong>系统开销</strong>大（加锁、释放锁、检查锁的状态都需要消耗资源）</li></ul><h4 id="MySQL加锁"><a href="#MySQL加锁" class="headerlink" title="MySQL加锁"></a>MySQL加锁</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">In</span> <span class="token keyword">SHARE MODE</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="什么是三级封锁协议？"><a href="#什么是三级封锁协议？" class="headerlink" title="什么是三级封锁协议？"></a>什么是三级封锁协议？</h3><ul><li>一级封锁协议：事务在修改数据之前必须先对其加X锁，直到事务结束才释放。可以解决丢失修改问题（两个事务不能同时对一个数据加X锁，避免了修改被覆盖）；</li><li>二级封锁协议：在一级的基础上，事务在读取数据之前必须先加S锁，读完后释放。可以解决脏读问题（如果已经有事务在修改数据，就意味着已经加了X锁，此时想要读取数据的事务并不能加S锁，也就无法进行读取，避免了读取脏数据）；</li><li>三级封锁协议：在二级的基础上，事务在读取数据之前必须先加S锁，直到事务结束才能释放。可以解决不可重复读问题（避免了在事务结束前其它事务对数据加X锁进行修改，保证了事务期间数据不会被其它事务更新）</li></ul><h3 id="什么是两段锁协议？"><a href="#什么是两段锁协议？" class="headerlink" title="什么是两段锁协议？"></a>什么是两段锁协议？</h3><p>事务必须严格分为两个阶段对数据进行<strong>加锁和解锁</strong>的操作，第一阶段加锁，第二阶段解锁。也就是说一个事务中一旦释放了锁，就不能再申请新锁了。</p><p><strong>可串行化调度</strong>是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。事务遵循两段锁协议是保证可串行化调度的充分条件。</p><h3 id="什么是-MVCC？"><a href="#什么是-MVCC？" class="headerlink" title="什么是 MVCC？"></a>什么是 MVCC？</h3><p>多版本并发控制（Multi-Version Concurrency Control, MVCC），MVCC在每行记录后面都保存有两个隐藏的列，用来存储<strong>创建版本号</strong>和<strong>删除版本号</strong>。</p><ul><li>创建版本号：创建一个数据行时的事务版本号（<strong>事务版本号</strong>：事务开始时的系统版本号；系统版本号：每开始一个新的事务，系统版本号就会自动递增）；</li><li>删除版本号：删除操作时的事务版本号；</li><li>各种操作：<ul><li>插入操作时，记录创建版本号；</li><li>删除操作时，记录删除版本号；</li><li>更新操作时，先记录删除版本号，再新增一行记录创建版本号；</li><li>查询操作时，要符合以下条件才能被查询出来：删除版本号未定义或大于当前事务版本号（删除操作是在当前事务启动之后做的）；创建版本号小于或等于当前事务版本号（创建操作是事务完成或者在事务启动之前完成）</li></ul></li></ul><p>通过版本号减少了锁的争用，<strong>提高了系统性能</strong>；可以实现<strong>提交读</strong>和<strong>可重复读</strong>两种隔离级别，未提交读无需使用MVCC</p><h4 id="快照读与当前读"><a href="#快照读与当前读" class="headerlink" title="快照读与当前读"></a>快照读与当前读</h4><p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当前读读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ? <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share mode</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> ? <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token keyword">insert</span><span class="token punctuation">;</span><span class="token keyword">update</span><span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库的范式？"><a href="#数据库的范式？" class="headerlink" title="数据库的范式？"></a>数据库的范式？</h3><ul><li><strong>第一范式</strong>（1NF，Normal Form）：<strong>属性不应该是可分的</strong>。举例：如果将“电话”作为一个属性（一列），是不符合1NF的，因为电话这个属性可以分解为家庭电话和移动电话…如果将“移动电话”作为一个属性，就符合1NF；</li><li><strong>第二范式</strong> 2NF：每个非主属性<strong>完全依赖</strong>于主属性集（候选键集）；<ul><li>B完全依赖于A，就是说A中的所有属性唯一决定B，属性少了就不能唯一决定，属性多了则有冗余（叫依赖不叫完全依赖）。举例：（学号，课程名）这个主属性集可以唯一决定成绩，但是对于学生姓名这个属性，（学号，课程名）这个属性集就是冗余的，所以学生姓名不完全依赖于（学号，课程名）这一属性集；</li><li>主属性集/候选码集：某一组属性能够唯一确定其它的属性（主键就是从候选键集中选的一个键），而其子集不能，这样的属性组中的属性就是主属性；不在候选码集中的属性成为非主属性；</li><li>可以通过分解来满足 2NF：将（学号，课程名，成绩）做成一张表；（学号，学生姓名）做成另一张表，避免大量的数据冗余；</li></ul></li><li><strong>第三范式</strong> 3NF：在 2NF 的基础上，非主属性<strong>不传递依赖</strong>于主属性<ul><li>传递依赖：如果C依赖于B，B依赖于A，那么C传递依赖于A；</li><li>3NF在2NF的基础上，消除了非主属性之间的依赖；比如一个表中，主属性有（学号），非主属性有（姓名，院系，院长名），可以看到院长名这个非主属性依赖于院系，传递依赖于学号。消除的办法是分解。</li></ul></li></ul><h4 id="不符合范式会出现哪些异常？"><a href="#不符合范式会出现哪些异常？" class="headerlink" title="不符合范式会出现哪些异常？"></a>不符合范式会出现哪些异常？</h4><ul><li>冗余数据：某些同样的数据多次出现（如学生姓名）；</li><li>修改异常：修改了一个记录中的信息，另一个记录中相同的信息却没有修改；</li><li>删除异常：删除一个信息，那么也会丢失其它信息（删除一个课程，丢失了一个学生的信息）；</li><li>插入异常：无法插入（插入一个还没有课程信息的学生）</li></ul><h3 id="列举几种表连接方式？"><a href="#列举几种表连接方式？" class="headerlink" title="列举几种表连接方式？"></a>列举几种表连接方式？</h3><p><img src="https://s.gin.sh/blog/interview/sql_join.png" alt="SQL JOIN"></p><ul><li>内连接（Inner Join）：仅将两个表中满足连接条件的行组合起来作为结果集<ul><li>自然连接：只考虑属性相同的元组对；</li><li>等值连接：给定条件进行查询</li></ul></li><li>外连接（Outer Join）<ul><li>左连接：左边表的所有数据都有显示出来，右边的表数据只显示共同有的那部分，没有对应的部分补NULL；</li><li>右连接：和左连接相反；</li><li>全外连接（Full Outer Join）：查询出左表和右表所有数据，但是去除两表的重复数据</li></ul></li><li>交叉连接（Cross Join）：返回两表的笛卡尔积（对于所含数据分别为m、n的表，返回m*n的结果）</li></ul><h3 id="什么是存储过程？有哪些优缺点？"><a href="#什么是存储过程？有哪些优缺点？" class="headerlink" title="什么是存储过程？有哪些优缺点？"></a>什么是存储过程？有哪些优缺点？</h3><p>存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合。想要实现相应的功能时，只需要调用这个存储过程就行了（类似于函数，输入具有输出参数）。</p><p>优点：</p><ul><li>预先编译，而不需要每次运行时编译，提高了数据库执行<strong>效率</strong>；</li><li>封装了一系列操作，对于一些数据交互比较多的操作，相比于单独执行SQL语句，可以<strong>减少网络通信量</strong>；</li><li>具有<strong>可复用性</strong>，减少了数据库开发的工作量；</li><li><strong>安全性高</strong>，可以让没有权限的用户通过存储过程间接操作数据库；</li><li>更<strong>易于维护</strong></li></ul><p>缺点：</p><ul><li><strong>可移植性差</strong>，存储过程将应用程序绑定到了数据库上；</li><li><strong>开发调试复杂</strong>：没有好的IDE；</li><li><strong>修改复杂</strong>，需要重新编译，有时还需要更新程序中的代码以更新调用</li></ul><h3 id="Drop-Delete-Truncate的区别？"><a href="#Drop-Delete-Truncate的区别？" class="headerlink" title="Drop/Delete/Truncate的区别？"></a>Drop/Delete/Truncate的区别？</h3><ul><li><strong>Delete</strong>用来删除表的全部或者<strong>部分数据</strong>，执行delete之后，用户<strong>需要提交</strong>之后才会执行，会触发表上的DELETE<strong>触发器</strong>（包含一个OLD的虚拟表，可以只读访问被删除的数据），DELETE之后表结构还在，删除很慢，一行一行地删，因为会记录日志，可以利用日志还原数据；</li><li><strong>Truncate</strong>删除表中的所有数据，这个操作<strong>不能回滚</strong>，也不会触发这个表上的触发器。操作比DELETE快很多（直接把表drop掉，再创建一个新表，删除的数据不能找回）。如果表中有自增（AUTO_INCREMENT）列，则重置为1；</li><li><strong>Drop</strong>命令从数据库中<strong>删除表</strong>，所有的数据行，索引和约束都会被删除；不能回滚，不会触发触发器；</li></ul><h4 id="什么是触发器？"><a href="#什么是触发器？" class="headerlink" title="什么是触发器？"></a>什么是触发器？</h4><p>触发器（TRIGGER）是由事件（比如INSERT/UPDATE/DELETE）来触发运行的操作（不能被直接调用，不能接收参数）。在数据库里以独立的对象存储，用于<strong>保证数据完整性</strong>（比如可以检验或转换数据）。</p><h4 id="有哪些约束类型？"><a href="#有哪些约束类型？" class="headerlink" title="有哪些约束类型？"></a>有哪些约束类型？</h4><p>约束（Constraint）类型：主键（Primary Key）约束，唯一约束（Unique），检查约束，非空约束，外键（Foreign Key）约束。</p><h3 id="什么是视图？什么是游标？"><a href="#什么是视图？什么是游标？" class="headerlink" title="什么是视图？什么是游标？"></a>什么是视图？什么是游标？</h3><ul><li>视图：从数据库的基本表中通过查询选取出来的数据组成的<strong>虚拟表</strong>（数据库中存放视图的定义）。可以对其进行增/删/改/查等操作。特别地，对视图的修改不影响基本表。好处：<ul><li>通过只给用户访问视图的权限，保证数据的<strong>安全性</strong>；</li><li><strong>简化</strong>复杂的SQL操作，隐藏数据的复杂性（比如复杂的连接）；</li></ul></li><li>游标（Cursor）：用于定位在查询返回的<strong>结果集的特定行</strong>，以对特定行进行操作。使用游标可以方便地对结果集进行移动遍历，根据需要滚动或对浏览/修改任意行中的数据。主要用于交互式应用。</li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="数据库索引的实现原理（B-树）"><a href="#数据库索引的实现原理（B-树）" class="headerlink" title="数据库索引的实现原理（B+树）"></a>数据库索引的实现原理（B+树）</h3><p>见<a href="https://github.com/wolverinn/Iridescent/blob/master/Data%20Structure.md#b%E6%A0%91" target="_blank" rel="noopener">数据结构部分：B树，B+树</a></p><h4 id="使用B树和B-树的比较"><a href="#使用B树和B-树的比较" class="headerlink" title="使用B树和B+树的比较"></a>使用B树和B+树的比较</h4><p>InnoDB的索引使用的是B+树实现，B+树对比B树的好处：</p><ul><li>IO次数少：B+树的中间结点只存放索引，数据都存在叶结点中，因此中间结点可以存更多的数据，让索引树更加矮胖；</li><li>范围查询效率更高：B树需要中序遍历整个树，只B+树需要遍历叶结点中的链表；</li><li>查询效率更加稳定：每次查询都需要从根结点到叶结点，路径长度相同，所以每次查询的效率都差不多</li></ul><h4 id="使用B树索引和哈希索引的比较"><a href="#使用B树索引和哈希索引的比较" class="headerlink" title="使用B树索引和哈希索引的比较"></a>使用B树索引和哈希索引的比较</h4><p>哈希索引能以 O(1) 时间进行查找，但是只支持精确查找，无法用于部分查找和范围查找，无法用于排序与分组；B树索引支持大于小于等于查找，范围查找。哈希索引遇到大量哈希值相等的情况后查找效率会降低。哈希索引不支持数据的排序。</p><h3 id="使用索引的优点"><a href="#使用索引的优点" class="headerlink" title="使用索引的优点"></a>使用索引的优点</h3><ul><li>大大加快了数据的<strong>检索速度</strong>；</li><li>可以显著减少查询中<strong>分组和排序</strong>的时间；</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；</li><li>将随机 I/O 变为<strong>顺序 I/O</strong>（B+Tree 索引是有序的，会将相邻的数据都存储在一起）</li></ul><p>缺点：建立和维护索引耗费时间空间，更新索引很慢。</p><h3 id="哪些情况下索引会失效？"><a href="#哪些情况下索引会失效？" class="headerlink" title="哪些情况下索引会失效？"></a>哪些情况下索引会失效？</h3><ul><li>以“%(表示任意0个或多个字符)”开头的LIKE语句；</li><li>OR语句前后没有同时使用索引；</li><li>数据类型出现隐式转化（如varchar不加单引号的话可能会自动转换为int型）；</li><li>对于多列索引，必须满足 <strong>最左匹配原则</strong>/最左前缀原则 (最左优先，eg：多列索引col1、col2和col3，则 索引生效的情形包括 col1或col1，col2或col1，col2，col3)；</li><li>如果MySQL估计全表扫描比索引快，则不使用索引（比如非常小的表）</li></ul><h3 id="在哪些地方适合创建索引？"><a href="#在哪些地方适合创建索引？" class="headerlink" title="在哪些地方适合创建索引？"></a>在哪些地方适合创建索引？</h3><ul><li>某列经常作为最大最小值；</li><li>经常被查询的字段；</li><li>经常用作表连接的字段；</li><li>经常出现在ORDER BY/GROUP BY/DISDINCT后面的字段</li></ul><h4 id="创建索引时需要注意什么？"><a href="#创建索引时需要注意什么？" class="headerlink" title="创建索引时需要注意什么？"></a>创建索引时需要注意什么？</h4><ul><li>只应建立在<strong>小字段</strong>上，而不要对大文本或图片建立索引（一页存储的数据越多一次IO操作获取的数据越大效率越高）；</li><li>建立索引的字段应该<strong>非空</strong>，在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。应该用0、一个特殊的值或者一个空串代替NULL；</li><li>选择<strong>数据密度大</strong>（唯一值占总数的百分比很大）的字段作索引</li></ul><h3 id="索引的分类？"><a href="#索引的分类？" class="headerlink" title="索引的分类？"></a>索引的分类？</h3><ul><li>普通索引</li><li>唯一索引 UNIQUE：索引列的值必须唯一，但允许有空值；</li><li>主键索引 PRIMARY KEY：必须唯一，不允许空值（是一种特殊的唯一索引；MySQL创建主键时默认为聚集索引，但主键也可以是非聚集索引）；</li><li>单列索引和多列索引/复合索引（Composite）：索引的列数；</li><li>覆盖（Covering）索引：索引包含了所有满足查询所需要的数据，查询的时候只需要读取索引而不需要回表读取数据；</li><li>聚集（Clustered）索引/非聚集索引：对磁盘上存放数据的物理地址重新组织以使这些数据按照指定规则排序的一种索引（数据的物理排列顺序和索引排列顺序一致）。因此每张表只能创建一个聚集索引（因为要改变物理存储顺序）。优点是查询速度快，因为可以直接按照顺序得到需要数据的物理地址。缺点是进行修改的速度较慢。对于需要经常搜索范围的值很有效。非聚集索引只记录逻辑顺序，并不改变物理顺序；</li><li>分区索引（？）</li><li>虚拟索引（Virtual）：模拟索引的存在而不用真正创建一个索引，用于快速测试创建索引对执行计划的影响。没有相关的索引段，不增加存储空间的使用</li></ul><h3 id="MySQL的两种存储引擎-InnoDB-和-MyISAM-的区别？"><a href="#MySQL的两种存储引擎-InnoDB-和-MyISAM-的区别？" class="headerlink" title="MySQL的两种存储引擎 InnoDB 和 MyISAM 的区别？"></a>MySQL的两种存储引擎 InnoDB 和 MyISAM 的区别？</h3><ul><li>InnoDB<strong>支持事务</strong>，可以进行Commit和Rollback；</li><li>MyISAM 只支持表级锁，而 InnoDB 还<strong>支持行级锁</strong>，提高了并发操作的性能；</li><li>InnoDB <strong>支持外键</strong>；</li><li>MyISAM <strong>崩溃</strong>后发生损坏的概率比 InnoDB 高很多，而且<strong>恢复的速度</strong>也更慢；</li><li>MyISAM 支持<strong>压缩</strong>表和空间数据索引，InnoDB需要更多的内存和存储；</li><li>InnoDB 支持在线<strong>热备份</strong></li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><strong>MyISAM</strong> 管理非事务表。它提供高速存储和检索（MyISAM强调的是性能，每次查询具有原子性，其执行速度比InnoDB更快），以及全文搜索能力。如果表比较小，或者是只读数据（有大量的SELECT），还是可以使用MyISAM；</li><li><strong>InnoDB</strong> 支持事务，并发情况下有很好的性能，基本可以替代MyISAM</li></ul><h4 id="热备份和冷备份"><a href="#热备份和冷备份" class="headerlink" title="热备份和冷备份"></a>热备份和冷备份</h4><ul><li>热备份：在数据库运行的情况下备份的方法。优点：可按表或用户备份，备份时数据库仍可使用，可恢复至任一时间点。但是不能出错</li><li>冷备份：数据库正常关闭后，将关键性文件复制到另一位置的备份方式。优点：操作简单快速，恢复简单</li></ul><h3 id="如何优化数据库？"><a href="#如何优化数据库？" class="headerlink" title="如何优化数据库？"></a>如何优化数据库？</h3><h4 id="SQL-语句的优化"><a href="#SQL-语句的优化" class="headerlink" title="SQL 语句的优化"></a>SQL 语句的优化</h4><blockquote><p>分析慢查询日志：记录了在MySQL中响应时间超过阀值long_query_time的SQL语句，通过日志去找出IO大的SQL以及发现未命中索引的SQL</p></blockquote><blockquote><p>使用 Explain 进行分析：通过explain命令可以得到表的读取顺序、数据读取操作的操作类型、哪些索引可以使用、<strong>哪些索引被实际使用</strong>、表之间的引用以及<strong>被扫描的行数</strong>等问题；</p></blockquote><ul><li>应尽量避免在 where 子句中使用<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>操作符或对字段进行null值判断，否则将引擎放弃使用索引而进行全表扫描；</li><li>只返回必要的列：最好不要使用 SELECT * 语句；</li><li>只返回必要的行：使用 LIMIT 语句来限制返回的数据；</li><li>将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：<ul><li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用；</li><li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余的查询；</li><li>减少锁竞争</li></ul></li></ul><h4 id="索引的优化"><a href="#索引的优化" class="headerlink" title="索引的优化"></a>索引的优化</h4><p>注意会引起索引失效的情况，以及在适合的地方建立索引</p><h4 id="数据库表结构的优化"><a href="#数据库表结构的优化" class="headerlink" title="数据库表结构的优化"></a>数据库表结构的优化</h4><ul><li>设计表时遵循<strong>三大范式</strong>；</li><li>选择合适的<strong>数据类型</strong>：尽可能不要存储NULL字段；使用简单的数据类型（int, varchar/ text）；</li><li>表的<strong>水平切分</strong>（Sharding）：将同一个表中的记录拆分到多个结构相同的表中（策略：哈希取模；根据ID范围来分）。当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓解单个数据库的压力；</li><li>表的<strong>垂直切分</strong>：将一张表按列切分成多个表。可以将不常用的字段单独放在同一个表中；把大字段独立放入一个表中；或者把经常使用的字段（关系密切的）放在一张表中。垂直切分之后业务更加清晰，系统之间整合或扩展容易，数据维护简单</li></ul><h4 id="系统配置的优化"><a href="#系统配置的优化" class="headerlink" title="系统配置的优化"></a>系统配置的优化</h4><ul><li>操作系统：增加TCP支持的队列数；</li><li>MySQL配置文件优化：缓存池大小和个数设置</li></ul><h4 id="硬件的优化"><a href="#硬件的优化" class="headerlink" title="硬件的优化"></a>硬件的优化</h4><ul><li>磁盘性能：固态硬盘；</li><li>CPU：多核且高频；</li><li>内存：增大内存</li></ul><h3 id="什么是主从复制？实现原理是什么？"><a href="#什么是主从复制？实现原理是什么？" class="headerlink" title="什么是主从复制？实现原理是什么？"></a>什么是主从复制？实现原理是什么？</h3><p>主从复制（Replication）是指数据可以从一个MySQL数据库主服务器复制到一个或多个从服务器，从服务器可以复制主服务器中的所有数据库或者特定的数据库，或者特定的表。默认采用异步模式。</p><p>实现原理：</p><ul><li>主服务器 <strong>binary log dump 线程</strong>：将主服务器中的数据更改（增删改）日志写入 Binary log 中；</li><li>从服务器 <strong>I/O 线程</strong>：负责从主服务器读取binary log，并写入本地的 Relay log；</li><li>从服务器 <strong>SQL 线程</strong>：负责读取 Relay log，解析出主服务器已经执行的数据更改，并在从服务器中重新执行（Replay），保证主从数据的一致性</li></ul><h5 id="为什么要主从复制？"><a href="#为什么要主从复制？" class="headerlink" title="为什么要主从复制？"></a>为什么要主从复制？</h5><ul><li>读写分离：主服务器负责写，从服务器负责读<ul><li>缓解了锁的争用，即使主服务器中加了锁，依然可以进行读操作；</li><li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性</li></ul></li><li>数据实时备份，当系统中某个节点发生故障时，可以方便的故障切换</li><li>降低单个服务器磁盘I/O访问的频率，提高单个机器的I/O性能</li></ul><h2 id="NoSQL-Redis"><a href="#NoSQL-Redis" class="headerlink" title="NoSQL/Redis"></a>NoSQL/Redis</h2><h3 id="关系型数据库和非关系型数据库的区别？"><a href="#关系型数据库和非关系型数据库的区别？" class="headerlink" title="关系型数据库和非关系型数据库的区别？"></a>关系型数据库和非关系型数据库的区别？</h3><p>… </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/weixin_43433032/article/details/89293663" target="_blank" rel="noopener">数据库六大范式详解 – CSDN博客</a></li><li><a href="https://www.cnblogs.com/alice-cj/p/10354737.html" target="_blank" rel="noopener">delete，truncate 和 delete之间的区别 – 博客园</a></li><li><a href="https://baijiahao.baidu.com/s?id=1617888740370098866&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">深度探索MySQL主从复制原理</a></li><li>数据库程序员面试笔试宝典-机械工业出版社</li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md" target="_blank" rel="noopener">CS-Notes/数据库系统原理 – GitHub</a></li><li><a href="https://blog.csdn.net/justloveyou_/article/details/78308460" target="_blank" rel="noopener">面试/笔试第三弹 —— 数据库面试问题集锦 – CSDN博客</a></li><li><a href="https://www.cnblogs.com/wenxiaofei/p/9853682.html" target="_blank" rel="noopener">史上最全的数据库面试题，不看绝对后悔 – 博客园</a></li></ul><h3 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h3><ul><li style="list-style: none"><input type="checkbox"></input> E-R 模型</li><li style="list-style: none"><input type="checkbox"></input> 数据库的三级模式和二级映像</li><li style="list-style: none"><input type="checkbox"></input> <a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/MySQL.md#%E5%9B%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">数据类型</a>：VARCHAR和CHAR的区别，DATETIME和TIMESATMP的区别</li><li style="list-style: none"><input type="checkbox"></input> Redis 面试<ul><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Redis.md" target="_blank" rel="noopener">CyC2018</a></li><li><a href="https://blog.csdn.net/Butterfly_resting/article/details/89668661" target="_blank" rel="noopener">几率大的Redis面试题（含答案） - CSDN</a></li><li><a href="https://www.jianshu.com/p/65765dd10671" target="_blank" rel="noopener">Redis面试题总结 - 简书</a></li><li><a href="https://www.cnblogs.com/jasontec/p/9699242.html" target="_blank" rel="noopener">Redis常见面试题 - 博客园</a></li><li><a href="https://github.com/0voice/interview_internal_reference#10" target="_blank" rel="noopener">0voice/interview_internal_reference</a></li></ul></li><li style="list-style: none"><input type="checkbox"></input> <a href="https://www.cnblogs.com/wenxiaofei/p/9853682.html" target="_blank" rel="noopener">史上最全的数据库面试题，不看绝对后悔 – 博客园</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle11GR2 RAC DataGuard容灾实施与维护手册</title>
      <link href="/oracle/oracle11gr2-rac-dataguard-rong-zai-shi-shi-yu-wei-hu-shou-ce/"/>
      <url>/oracle/oracle11gr2-rac-dataguard-rong-zai-shi-shi-yu-wei-hu-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle11gR2RAC-DataGuard容灾实施与维护"><a href="#Oracle11gR2RAC-DataGuard容灾实施与维护" class="headerlink" title="Oracle11gR2RAC DataGuard容灾实施与维护"></a>Oracle11gR2RAC DataGuard容灾实施与维护</h1><p><a href="https://docs.oracle.com/cd/E11882_01/index.htm" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a> </p><h2 id="1-DataGuard的概述"><a href="#1-DataGuard的概述" class="headerlink" title="1.DataGuard的概述"></a>1.DataGuard的概述</h2><h2 id="2-应用规划"><a href="#2-应用规划" class="headerlink" title="2.应用规划"></a>2.应用规划</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">参数</th><th style="text-align:center">主库</th><th>备库</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">系统架构</td><td style="text-align:center">RAC 双机+ASM</td><td>单实例+ASM</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">数据库版本</td><td style="text-align:center">11.2.0.4</td><td>11.2.0.4</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">内存</td><td style="text-align:center">16G</td><td>8G</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">CPU</td><td style="text-align:center">4</td><td>4</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">GoldenGate</td><td style="text-align:center">11.2.0.3</td><td>11.2.0.3</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td></tr></tbody></table><h2 id="3-案列一（文件系统到文件系统）"><a href="#3-案列一（文件系统到文件系统）" class="headerlink" title="3.案列一（文件系统到文件系统）"></a>3.案列一（文件系统到文件系统）</h2><h3 id="3-1-系统架构"><a href="#3-1-系统架构" class="headerlink" title="3.1 系统架构"></a>3.1 系统架构</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">参数</th><th style="text-align:center">主库</th><th>备库</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">系统架构</td><td style="text-align:center">单实例文件系统</td><td>单实例文件系统</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">数据库版本</td><td style="text-align:center">11.2.0.4</td><td>11.2.0.4</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">内存</td><td style="text-align:center">16G</td><td>8G</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">CPU</td><td style="text-align:center">4</td><td>4</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">GoldenGate</td><td style="text-align:center">11.2.0.3</td><td>11.2.0.3</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td></tr></tbody></table><h3 id="3-2-安装步骤1（准备）"><a href="#3-2-安装步骤1（准备）" class="headerlink" title="3.2  安装步骤1（准备）"></a>3.2  安装步骤1（准备）</h3><ul><li>1.安装相关的软件包</li><li>2.准备OGG安装的环境变量</li><li>3.上传并安装OGG软件</li><li>4.准备测试数据</li></ul><h4 id="3-2-1-安装相关的软件包"><a href="#3-2-1-安装相关的软件包" class="headerlink" title="3.2.1 安装相关的软件包"></a>3.2.1 安装相关的软件包</h4><h4 id="3-2-1-准备OGG安装的环境变量"><a href="#3-2-1-准备OGG安装的环境变量" class="headerlink" title="3.2.1 准备OGG安装的环境变量"></a>3.2.1 准备OGG安装的环境变量</h4><h4 id="3-2-1-上传并安装OGG软件"><a href="#3-2-1-上传并安装OGG软件" class="headerlink" title="3.2.1 上传并安装OGG软件"></a>3.2.1 上传并安装OGG软件</h4><h4 id="3-2-1-准备测试数据"><a href="#3-2-1-准备测试数据" class="headerlink" title="3.2.1 准备测试数据"></a>3.2.1 准备测试数据</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> itpux01 datafile <span class="token string">'/u01/app/oracle/oradata/orcl/itpux01.dbf'</span> size 100m autoextend <span class="token keyword">off</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">user</span> itpux01 identified <span class="token keyword">by</span> itpux01 <span class="token keyword">default</span> <span class="token keyword">tablespace</span> itpux01 <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> <span class="token keyword">temp</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> itpux01<span class="token punctuation">;</span>   <span class="token keyword">create</span> <span class="token keyword">tablespace</span> itpux02 datafile <span class="token string">'/u01/app/oracle/oradata/orcl/itpux02.dbf'</span> size 100m autoextend <span class="token keyword">off</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">user</span> itpux02 identified <span class="token keyword">by</span> itpux02 <span class="token keyword">default</span> <span class="token keyword">tablespace</span> itpux02 <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> <span class="token keyword">temp</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> itpux02<span class="token punctuation">;</span>   <span class="token keyword">create</span> <span class="token keyword">tablespace</span> itpux03 datafile <span class="token string">'/u01/app/oracle/oradata/orcl/itpux03.dbf'</span> size 100m autoextend <span class="token keyword">off</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">user</span> itpux03 identified <span class="token keyword">by</span> itpux03 <span class="token keyword">default</span> <span class="token keyword">tablespace</span> itpux03 <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> <span class="token keyword">temp</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token number">dba</span> <span class="token keyword">to</span> itpux03<span class="token punctuation">;</span>  【源库导出、导入数据结构】<span class="token keyword">create</span> directory itpuxbak <span class="token keyword">as</span> <span class="token string">'/home/oracle'</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">read</span><span class="token punctuation">,</span><span class="token keyword">write</span> <span class="token keyword">on</span> directory itpuxbak <span class="token keyword">to</span> system<span class="token punctuation">;</span> <span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">any</span> directory <span class="token keyword">to</span> system<span class="token punctuation">;</span>expdp system<span class="token operator">/</span>jia directory<span class="token operator">=</span>itpuxbak <span class="token keyword">dumpfile</span><span class="token operator">=</span>expdp_full_db01<span class="token punctuation">.</span>dmp logfile<span class="token operator">=</span>expdp_full_db01<span class="token punctuation">.</span>log content<span class="token operator">=</span>metadata_only<span class="token comment" spellcheck="true">--expdp system/jia  directory=itpuxbak dumpfile=expdp_itpux010203.dmp logfile=expdp_itpux010203.log schemas=itpux01,itpux02,itpux03</span>impdp system<span class="token operator">/</span>oracle  directory<span class="token operator">=</span>itpuxbak <span class="token keyword">dumpfile</span><span class="token operator">=</span>expdp_itpux010203<span class="token punctuation">.</span>dmp logfile<span class="token operator">=</span>expdp_itpux010203<span class="token punctuation">.</span>log <span class="token keyword">full</span><span class="token operator">=</span>y<span class="token comment" spellcheck="true">--impdp system/oracle  directory=itpuxbak dumpfile=expdp_itpux010203.dmp expdp_itpux010203.dmp schemas=itpux01,itpux02,itpux03</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-安装步骤2（配置环境）"><a href="#3-3-安装步骤2（配置环境）" class="headerlink" title="3.3 安装步骤2（配置环境）"></a>3.3 安装步骤2（配置环境）</h3><ul><li>1.源端打开归档，目标端一般不需要</li><li>2.源端数据库打开补充日志</li><li>3.源端是数据库开启FORCE_LOGGING</li><li>4.关闭回收站功能</li><li>5.源和目标的网络通信正常</li><li>6.创建专用的GoldenGate用户来同步数据</li><li>7.修改数据库参数（源和目标端）</li></ul><h4 id="3-3-1-源端打开归档，目标端一般不需要"><a href="#3-3-1-源端打开归档，目标端一般不需要" class="headerlink" title="3.3.1 源端打开归档，目标端一般不需要"></a>3.3.1 源端打开归档，目标端一般不需要</h4><blockquote><p>&emsp;&emsp; 因为有OGG所以只要源端开启归档，目标端不用开启归档,下面将介绍文件系统单实例怎么开启关闭归档.</p></blockquote><ul><li>开启归档 </li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.确定当前没有开启归档</span>SQL<span class="token operator">></span> archive log list<span class="token punctuation">;</span><span class="token keyword">Database</span> log mode              <span class="token keyword">No</span> Archive ModeAutomatic archival             DisabledArchive destination            USE_DB_RECOVERY_FILE_DESTOldest online log sequence     <span class="token number">19</span><span class="token keyword">Current</span> log sequence           <span class="token number">21</span><span class="token comment" spellcheck="true">--2.创建归档目录</span><span class="token comment" spellcheck="true">--3.重启数据库到MOUNT</span><span class="token keyword">SHUTDOWN</span> IMMEDIATESTARTUP MOUNT<span class="token comment" spellcheck="true">--4.修改归档路径并开启归档</span><span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">SET</span>  db_recovery_file_dest<span class="token operator">=</span><span class="token string">'/u01/backup'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> ARCHIVELOG<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--5.重启数据库</span><span class="token keyword">SHUTDOWN</span> IMMEDIATESTARTUP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关闭归档</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.确定当前为归档</span>SQL<span class="token operator">></span> archive log list<span class="token punctuation">;</span><span class="token keyword">Database</span> log mode              Archive ModeAutomatic archival             EnabledArchive destination            USE_DB_RECOVERY_FILE_DESTOldest online log sequence     <span class="token number">19</span><span class="token keyword">Next</span> log sequence <span class="token keyword">to</span> archive   <span class="token number">21</span><span class="token keyword">Current</span> log sequence           <span class="token number">21</span><span class="token comment" spellcheck="true">--2.重启数据库到MOUNT</span>SQL<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span><span class="token keyword">Database</span> closed<span class="token punctuation">.</span><span class="token keyword">Database</span> dismounted<span class="token punctuation">.</span>ORACLE instance shut down<span class="token punctuation">.</span>SQL<span class="token operator">></span> startup mount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area <span class="token number">2137886720</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2254952</span> bytesVariable Size             <span class="token number">570427288</span> bytes<span class="token keyword">Database</span> Buffers         <span class="token number">1560281088</span> bytesRedo Buffers                <span class="token number">4923392</span> bytes<span class="token keyword">Database</span> mounted<span class="token punctuation">.</span><span class="token comment" spellcheck="true">--3.关闭归档并打开数据库</span>SQL<span class="token operator">></span>  <span class="token keyword">alter</span> <span class="token keyword">database</span> noarchivelog<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">open</span><span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> archive log list<span class="token punctuation">;</span><span class="token keyword">Database</span> log mode              <span class="token keyword">No</span> Archive ModeAutomatic archival             DisabledArchive destination            USE_DB_RECOVERY_FILE_DESTOldest online log sequence     <span class="token number">19</span><span class="token keyword">Current</span> log sequence           <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-源端数据库打开补充日志"><a href="#3-3-2-源端数据库打开补充日志" class="headerlink" title="3.3.2 源端数据库打开补充日志"></a>3.3.2 源端数据库打开补充日志</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.查看是否打开最小日志记录</span><span class="token keyword">SELECT</span> SUPPLEMENTAL_LOG_DATA_MIN <span class="token keyword">FROM</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.开启最小日志记录</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> <span class="token keyword">ADD</span> SUPPLEMENTAL LOG <span class="token keyword">DATA</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3.切换归档</span><span class="token keyword">ALTER</span> SYSTEM SWITCH LOGFILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-源端是数据库开启FORCE-LOGGING"><a href="#3-3-3-源端是数据库开启FORCE-LOGGING" class="headerlink" title="3.3.3 源端是数据库开启FORCE_LOGGING"></a>3.3.3 源端是数据库开启FORCE_LOGGING</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.查询是否开启强制日志模式</span>force_logging <span class="token keyword">from</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.打开</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">force</span> logging<span class="token punctuation">;</span><span class="token keyword">alter</span> system switch logfile<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4-关闭回收站功能"><a href="#3-3-4-关闭回收站功能" class="headerlink" title="3.3.4 关闭回收站功能"></a>3.3.4 关闭回收站功能</h4><blockquote><p>&emsp;&emsp;官方没有要求关闭回收站，但是我们一般都会关闭。关闭回收站必须重启生效。<br><code>`</code>sql<br>–1.查看回收是否关闭<br>show parameter recyclebin</p></blockquote><p>–2.关闭回收站<br>alter system set recyclebin=off scope=spfile;</p><p>–3.重启数据库</p><pre><code>#### 3.3.5 源和目标的网络通信正常```sql</code></pre><h4 id="3-3-6-创建专用的GoldenGate用户来同步数据"><a href="#3-3-6-创建专用的GoldenGate用户来同步数据" class="headerlink" title="3.3.6 创建专用的GoldenGate用户来同步数据"></a>3.3.6 创建专用的GoldenGate用户来同步数据</h4><h4 id="3-3-7-修改数据库参数（源和目标端）"><a href="#3-3-7-修改数据库参数（源和目标端）" class="headerlink" title="3.3.7 修改数据库参数（源和目标端）"></a>3.3.7 修改数据库参数（源和目标端）</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> system <span class="token keyword">set</span> enable_goldengate_replication<span class="token operator">=</span><span class="token boolean">true</span> scope<span class="token operator">=</span>both<span class="token punctuation">;</span><span class="token keyword">show</span> paramteter enable_goldengate_replication<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-4-安装步骤（配置OGG）"><a href="#3-4-安装步骤（配置OGG）" class="headerlink" title="3.4 安装步骤（配置OGG）"></a>3.4 安装步骤（配置OGG）</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>创建文件目录<span class="token keyword">create</span> subdirs<span class="token number">01</span><span class="token punctuation">.</span>配置配置管理进程mgrggsci<span class="token operator">></span> edit params mgrport <span class="token number">7809</span>autostart er <span class="token operator">*</span>autorestart er <span class="token operator">*</span><span class="token punctuation">,</span>waitminutes <span class="token number">3</span><span class="token punctuation">,</span>retries <span class="token number">15</span>purgeoldextracts <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token comment" spellcheck="true">/*,usecheckpoints,minkeepdays 7*/</span><span class="token number">02</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> enable_goldengate_replication<span class="token operator">=</span><span class="token boolean">true</span> scope<span class="token operator">=</span>both<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-案列二（ASM到文件系统）"><a href="#4-案列二（ASM到文件系统）" class="headerlink" title="4.案列二（ASM到文件系统）"></a>4.案列二（ASM到文件系统）</h2><h2 id="5-案列三（RAC-ASM-到-单机ASN）"><a href="#5-案列三（RAC-ASM-到-单机ASN）" class="headerlink" title="5.案列三（RAC ASM 到 单机ASN）"></a>5.案列三（RAC ASM 到 单机ASN）</h2><h3 id="3-1-系统架构-1"><a href="#3-1-系统架构-1" class="headerlink" title="3.1 系统架构"></a>3.1 系统架构</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">参数</th><th style="text-align:center">主库</th><th>备库</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">系统架构</td><td style="text-align:center">RAC</td><td>单实例ASM</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">数据库版本</td><td style="text-align:center">11.2.0.4</td><td>11.2.0.4</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">内存</td><td style="text-align:center">4G</td><td>4G</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">CPU</td><td style="text-align:center">4</td><td>4</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">GoldenGate</td><td style="text-align:center">12.1.0.3</td><td>12.1.0.3</td><td></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td></td><td></td></tr></tbody></table><h3 id="3-2-安装步骤（准备）"><a href="#3-2-安装步骤（准备）" class="headerlink" title="3.2  安装步骤（准备）"></a>3.2  安装步骤（准备）</h3><ul><li>1.安装相关的软件包</li><li>2.准备OGG安装的环境变量</li><li>3.上传并安装OGG软件</li><li>4.准备测试数据</li></ul><h4 id="3-2-1-安装相关的软件包-1"><a href="#3-2-1-安装相关的软件包-1" class="headerlink" title="3.2.1 安装相关的软件包"></a>3.2.1 安装相关的软件包</h4><h4 id="3-2-1-准备OGG安装的环境变量-1"><a href="#3-2-1-准备OGG安装的环境变量-1" class="headerlink" title="3.2.1 准备OGG安装的环境变量"></a>3.2.1 准备OGG安装的环境变量</h4><h4 id="3-2-1-上传并安装OGG软件-1"><a href="#3-2-1-上传并安装OGG软件-1" class="headerlink" title="3.2.1 上传并安装OGG软件"></a>3.2.1 上传并安装OGG软件</h4><h4 id="3-2-1-准备测试数据-1"><a href="#3-2-1-准备测试数据-1" class="headerlink" title="3.2.1 准备测试数据"></a>3.2.1 准备测试数据</h4><h3 id="3-3-安装步骤（配置环境）"><a href="#3-3-安装步骤（配置环境）" class="headerlink" title="3.3 安装步骤（配置环境）"></a>3.3 安装步骤（配置环境）</h3><ul><li>1.源端打开归档，目标端一般不需要</li><li>2.源端数据库打开补充日志</li><li>3.源端是数据库开启FORCE_LOGGING</li><li>4.关闭回收站功能</li><li>5.源和目标的网络通信正常</li><li>6.创建专用的GoldenGate用户来同步数据</li></ul><h4 id="3-3-1-源端打开归档，目标端一般不需要-1"><a href="#3-3-1-源端打开归档，目标端一般不需要-1" class="headerlink" title="3.3.1 源端打开归档，目标端一般不需要"></a>3.3.1 源端打开归档，目标端一般不需要</h4><blockquote><p>&emsp;&emsp; 因为有OGG所以只要源端开启归档，目标端不用开启归档,下面将介绍文件系统单实例怎么开启关闭归档.</p></blockquote><h4 id="3-3-2-源端数据库打开补充日志-1"><a href="#3-3-2-源端数据库打开补充日志-1" class="headerlink" title="3.3.2 源端数据库打开补充日志"></a>3.3.2 源端数据库打开补充日志</h4><h4 id="3-3-3-源端是数据库开启FORCE-LOGGING-1"><a href="#3-3-3-源端是数据库开启FORCE-LOGGING-1" class="headerlink" title="3.3.3 源端是数据库开启FORCE_LOGGING"></a>3.3.3 源端是数据库开启FORCE_LOGGING</h4><h4 id="3-3-4-关闭回收站功能-1"><a href="#3-3-4-关闭回收站功能-1" class="headerlink" title="3.3.4 关闭回收站功能"></a>3.3.4 关闭回收站功能</h4><h4 id="3-3-5-源和目标的网络通信正常"><a href="#3-3-5-源和目标的网络通信正常" class="headerlink" title="3.3.5 源和目标的网络通信正常"></a>3.3.5 源和目标的网络通信正常</h4><h4 id="3-3-6-创建专用的GoldenGate用户来同步数据-1"><a href="#3-3-6-创建专用的GoldenGate用户来同步数据-1" class="headerlink" title="3.3.6 创建专用的GoldenGate用户来同步数据"></a>3.3.6 创建专用的GoldenGate用户来同步数据</h4>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 备份容灾 </tag>
            
            <tag> RAC </tag>
            
            <tag> DataGuard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP简单工厂模式应用</title>
      <link href="/php/php-jian-dan-gong-han-mo-shi-ying-yong/"/>
      <url>/php/php-jian-dan-gong-han-mo-shi-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP简单工厂模式应用"><a href="#PHP简单工厂模式应用" class="headerlink" title="PHP简单工厂模式应用"></a>PHP简单工厂模式应用</h1><p>以前很多设计模式都只是了解并未有实际经验，实习几个月了刚好有在项目总用到一个简单的工厂模式，特此记录下来。</p><p>最后将设计模式在Larave中实现 <a href="http://extended-design-php.kyle.link" target="_blank" rel="noopener">http://extended-design-php.kyle.link</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>因为项目需要对接很多支付通道，每个通道的操作都非常类似但是又有一些参数的不同，为此我使用了工厂模式将每个支付通道的独立出来。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>最主要的就是根据不同的支付方式的回调进行不同的处理</p><ul><li>支付回调请求入口</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 支付回调 [针对不同的通道做不同的处理]. * * @param int $id * * @return \Illuminate\Http\Response */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$channel_code</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'channel_code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PayChannel<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token variable">$channel_code</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">firstOrFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> PayServices<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">CheckOrderCallback</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'pays.callback'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Service调用工厂实例</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 处理回调 * * @param int $id * * @return /App/Order */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">CheckOrderCallback</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pay_channle_instance</span> <span class="token operator">=</span> PayChannelAbsract<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetChannelInstance</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$pay_channle_instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">abort</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span><span class="token string">"Channel not exists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$pay_channle_instance</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">onNotify</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>工厂模式抽象类和相关方法</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>PayChannel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PayChannelAbsract</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getPayInfo</span><span class="token punctuation">(</span>Order <span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onNotify</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isPaymentFinished</span><span class="token punctuation">(</span>Order <span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 支付通道初始化.     *     * @return \App\Order     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 支付通道初始化.     *     * @return \App\Services\PayChannel\PayChannelAbsract;     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">GetChannelInstance</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$channel_code</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'channel_code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  检查通道文件</span>        self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkPayInstance</span><span class="token punctuation">(</span><span class="token variable">$channel_code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$channel_code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'kuaijiepay'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PayChannelKuaiJie</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkPayInstance</span><span class="token punctuation">(</span><span class="token variable">$channel_code</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>某个工厂类的具体实现方法</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Services<span class="token punctuation">\</span>PayChannel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PayChannelKuaiJie</span> <span class="token keyword">extends</span> <span class="token class-name">PayChannelAbsract</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getPayInfo</span><span class="token punctuation">(</span>Order <span class="token variable">$order</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement getPayInfo() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onNotify</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement onNotify() method.</span>        <span class="token comment" spellcheck="true">//  查找订单</span>        <span class="token variable">$order</span> <span class="token operator">=</span> Order            <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'order_num'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'order_num'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">></span><span class="token function">firstOrFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  检查订单状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isPaymentFinished</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span><span class="token string">"Order Already Pay Successd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  完成订单</span>            <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span> <span class="token operator">=</span> Order<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FINISH_STATUS</span><span class="token punctuation">;</span>            <span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$order</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isPaymentFinished</span><span class="token punctuation">(</span>Order <span class="token variable">$order</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement isPaymentFinished() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$order</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span> <span class="token operator">==</span> Order<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FINISH_STATUS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><ul><li><p>订单列表<br><img src="https://s.gin.sh/blog/images/2019/factory_pay_list.png" alt="Pay List"></p></li><li><p>支付详情<br><img src="https://s.gin.sh/blog/images/2019/factory_pay_info.png" alt="Pay Info"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文只展示了基本的流程，在真正的项目中还要复杂的多。代码已经全部开源到GitHub<br>线上体验地址  <a href="mailto:kyle@qq.com">kyle@qq.com</a>/asdfgh <a href="http://extended-design-php.kyle.link" target="_blank" rel="noopener">http://extended-design-php.kyle.link</a><br>GitHub <a href="https://github.com/kylesliu/extended-design-php" target="_blank" rel="noopener">hhttps://github.com/kylesliu/extended-design-php</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql基本练习</title>
      <link href="/sql/sql-ji-ben-lian-xi/"/>
      <url>/sql/sql-ji-ben-lian-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle LogMiner日志挖掘技术部分日志</title>
      <link href="/oracle/oracle-logminer-ri-zhi-wa-jue-ji-zhu-bu-fen-ri-zhi/"/>
      <url>/oracle/oracle-logminer-ri-zhi-wa-jue-ji-zhu-bu-fen-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-LogMiner日志挖掘技术部分日志"><a href="#Oracle-LogMiner日志挖掘技术部分日志" class="headerlink" title="Oracle LogMiner日志挖掘技术部分日志"></a>Oracle LogMiner日志挖掘技术部分日志</h1><p>[Oracle 11G R2 官方文档][1] </p><h2 id="1-Logminer相关概念"><a href="#1-Logminer相关概念" class="headerlink" title="1.Logminer相关概念"></a>1.Logminer相关概念</h2><h2 id="2-Logminer使用详解"><a href="#2-Logminer使用详解" class="headerlink" title="2.Logminer使用详解"></a>2.Logminer使用详解</h2><h3 id="2-1-安装logminer"><a href="#2-1-安装logminer" class="headerlink" title="2.1 安装logminer"></a>2.1 安装logminer</h3><pre class="line-numbers language-sql"><code class="language-sql">$ORACLE_HOME<span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmslm<span class="token punctuation">.</span>sql : DBMS_LOGMNR$ORACLE_HOME<span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmslmd<span class="token punctuation">.</span>sql :DBMS_LOGMNR_D$ORACLE_HOME<span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmslms<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true">--过程</span>dbms_logmnr_d<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">'dict.ora'</span><span class="token punctuation">,</span><span class="token string">'/u01'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--创建一个数据字典文件</span>dbms_logmnr<span class="token punctuation">.</span>add_logfiledbms_logmnr<span class="token punctuation">.</span>start_logmnrdbms_logmnr<span class="token punctuation">.</span>end_logmnr<span class="token comment" spellcheck="true">--视图</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$logmnr_dictionary<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$logmnr_logs<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$logmnr_contents<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-使用源数据库的数据字典（Online-catalog-来分析DML操作"><a href="#2-2-使用源数据库的数据字典（Online-catalog-来分析DML操作" class="headerlink" title="2.2  使用源数据库的数据字典（Online catalog)来分析DML操作"></a>2.2  使用源数据库的数据字典（Online catalog)来分析DML操作</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.开启补充日志</span><span class="token keyword">select</span> SUPPLEMENTAL_LOG_DATA_MIN <span class="token keyword">from</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> supplemental log <span class="token keyword">data</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.建立日志分析列表</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span>，options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>new<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--继续添加</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span>，options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>addfile<span class="token punctuation">)</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span>，options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>addfile<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//execute dbms_logmnr.add_logfile('日志文件'，dbms_logmnr.addfile)</span><span class="token comment" spellcheck="true">--移除</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>remove_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--03.启动分析</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>start_logmnr<span class="token punctuation">(</span>Options <span class="token operator">=</span><span class="token operator">></span> dbms_logmnr<span class="token punctuation">.</span>dict_from_online_catalog<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//execute dbms_logmnr.start_logmnr(Options => dbms_logmnr.dict_from_online_catalog,startscn=>123,endScn => 124);</span><span class="token comment" spellcheck="true">//exec dbms_logmnr.start_logmnr(Options => dbms_logmnr.dict_from_online_catalog,</span>starttime <span class="token operator">=</span><span class="token operator">></span> to_date<span class="token punctuation">(</span><span class="token string">'2016-08-15 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>endtime <span class="token operator">=</span><span class="token operator">></span> to_date<span class="token punctuation">(</span><span class="token string">'2016-08-15 01:00:00'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.查看日志分析结果</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>scn<span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span>sql_redo<span class="token punctuation">,</span>sql_undo <span class="token keyword">from</span> v$logmnr_contents<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--05.结束分析</span>dbms_logmnr<span class="token punctuation">.</span>end_logmnr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用LogMiner字典到字典文件来分析DDL操作"><a href="#2-3-使用LogMiner字典到字典文件来分析DDL操作" class="headerlink" title="2.3 使用LogMiner字典到字典文件来分析DDL操作"></a>2.3 使用LogMiner字典到字典文件来分析DDL操作</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.提取logminer字典</span><span class="token comment" spellcheck="true">--设置一个字典文件路径：</span><span class="token keyword">show</span> parameter utl_file_dir <span class="token comment" spellcheck="true">--需要重启DB</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> utl_file_dir<span class="token operator">=</span><span class="token string">'/oracle'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建一个数据字典文件</span><span class="token keyword">exec</span> dbms_logmnr_d<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">'dict.ora'</span><span class="token punctuation">,</span><span class="token string">'/oracle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.建立日志分析列表</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span>，options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>new<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--继续添加</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span>，options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>addfile<span class="token punctuation">)</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span>，options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>addfile<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//execute dbms_logmnr.add_logfile('日志文件'，dbms_logmnr.addfile)</span><span class="token comment" spellcheck="true">--移除</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>remove_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'日志文件'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--03.启动分析</span><span class="token keyword">exec</span> dbms_logmnr<span class="token punctuation">.</span>start_logmnr<span class="token punctuation">(</span>DictFileName <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'/oracle/dict.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---无条件分析</span><span class="token comment" spellcheck="true">//exec dbms_logmnr.start_logmnr(DictFileName => '/oracle/dict.ora',startscn=>123,endScn => 124); --有条件分析</span><span class="token comment" spellcheck="true">//exec dbms_logmnr.start_logmnr(DictFileName => '/oracle/dict.ora',</span>starttime <span class="token operator">=</span><span class="token operator">></span> to_date<span class="token punctuation">(</span><span class="token string">'2016-08-15 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>endtime <span class="token operator">=</span><span class="token operator">></span> to_date<span class="token punctuation">(</span><span class="token string">'2016-08-15 01:00:00'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--有条件分析：</span>scn: startscn<span class="token punctuation">,</span>endScntime: starttime<span class="token punctuation">,</span>endtime<span class="token comment" spellcheck="true">--04.查看日志分析结果</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>scn<span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span>sql_redo<span class="token punctuation">,</span>sql_undo <span class="token keyword">from</span> v$logmnr_contents<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--05.结束分析</span>dbms_logmnr<span class="token punctuation">.</span>end_logmnr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4使用LogMiner进行日志分析"><a href="#2-4使用LogMiner进行日志分析" class="headerlink" title="2.4使用LogMiner进行日志分析"></a>2.4使用LogMiner进行日志分析</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">exec</span> dbms_logmnr<span class="token punctuation">.</span>start_logmnr<span class="token punctuation">(</span>DictFileName <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'/oracle/dict.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---无条件分析</span><span class="token comment" spellcheck="true">//exec dbms_logmnr.start_logmnr(DictFileName => '/oracle/dict.ora',startscn=>123,endScn => 124); --有条件分析</span><span class="token comment" spellcheck="true">//exec dbms_logmnr.start_logmnr(DictFileName => '/oracle/dict.ora',</span>starttime <span class="token operator">=</span><span class="token operator">></span> to_date<span class="token punctuation">(</span><span class="token string">'2016-08-15 00:00:00'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>endtime <span class="token operator">=</span><span class="token operator">></span> to_date<span class="token punctuation">(</span><span class="token string">'2016-08-15 01:00:00'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--有条件分析：</span>scn: startscn<span class="token punctuation">,</span>endScntime: starttime<span class="token punctuation">,</span>endtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-查看logminer分析结果"><a href="#2-5-查看logminer分析结果" class="headerlink" title="2.5 查看logminer分析结果"></a>2.5 查看logminer分析结果</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> username<span class="token punctuation">,</span>scn<span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span>sql_redo<span class="token punctuation">,</span>sql_undo <span class="token keyword">from</span> v$logmnr_contents<span class="token punctuation">;</span>SQL<span class="token operator">></span> <span class="token keyword">desc</span> v$logmnr_contents<span class="token punctuation">;</span>名称 类型<span class="token comment" spellcheck="true">----------------------------------------- ----------------------------</span><span class="token keyword">TIMESTAMP</span> <span class="token keyword">DATE</span> <span class="token comment" spellcheck="true">//SQL执行时间</span>COMMIT_TIMESTAMP <span class="token keyword">DATE</span> <span class="token comment" spellcheck="true">//事务提交时间</span>SEG_OWNER VARCHAR2<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//被修改对象创建者</span>SEG_NAME VARCHAR2<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//被修改对象的名字，如表名</span>SEG_TYPE NUMBER <span class="token comment" spellcheck="true">//被修改对象类型</span>SEG_TYPE_NAME VARCHAR2<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//被修改对象类型名</span>TABLE_SPACE VARCHAR2<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//被修改对象所属表空间</span>ROW_ID VARCHAR2<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//被修改行的ROWID，如果</span><span class="token keyword">SESSION</span><span class="token comment" spellcheck="true"># NUMBER //执行修改的SESSION号</span><span class="token keyword">SERIAL</span><span class="token comment" spellcheck="true"># NUMBER //执行修改的SESSION序号</span>USERNAME VARCHAR2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行事务的用户名</span>SESSION_INFO VARCHAR2<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行修改的SESSION信息,例如：login_username= client_info= OS_username=SYSTEM Machine_name=ZFMISERVER OS_termi</span>nal<span class="token operator">=</span>ZFMISERVER OS_process_id<span class="token operator">=</span><span class="token number">1812</span> OS_program name<span class="token operator">=</span>ORACLE<span class="token punctuation">.</span>EXETX_NAME VARCHAR2<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//执行的事务名，当该事务被命名时</span><span class="token keyword">ROLLBACK</span> NUMBER <span class="token comment" spellcheck="true">//回滚标记</span>OPERATION VARCHAR2<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//操作类型</span><span class="token keyword">INSERT</span><span class="token keyword">UPDATE</span><span class="token keyword">DELETE</span>DDL<span class="token keyword">START</span><span class="token keyword">COMMIT</span><span class="token keyword">ROLLBACK</span>LOB_WRITELOB_TRIMLOB_ERASESELECT_FOR_UPDATESEL_LOB_LOCATORMISSING_SCNINTERNALUNSUPPORTEDOPERATION_CODE NUMBER <span class="token comment" spellcheck="true">//操作类型代码</span>    <span class="token number">0</span> <span class="token operator">=</span> INTERNAL    <span class="token number">1</span> <span class="token operator">=</span> <span class="token keyword">INSERT</span>    <span class="token number">2</span> <span class="token operator">=</span> <span class="token keyword">DELETE</span>    <span class="token number">3</span> <span class="token operator">=</span> <span class="token keyword">UPDATE</span>    <span class="token number">5</span> <span class="token operator">=</span> DDL    <span class="token number">6</span> <span class="token operator">=</span> <span class="token keyword">START</span>    <span class="token number">7</span> <span class="token operator">=</span> <span class="token keyword">COMMIT</span>    <span class="token number">9</span> <span class="token operator">=</span> SELECT_LOB_LOCATOR    <span class="token number">10</span> <span class="token operator">=</span> LOB_WRITE    <span class="token number">11</span> <span class="token operator">=</span> LOB_TRIM    <span class="token number">25</span> <span class="token operator">=</span> SELECT_FOR_UPDATE    <span class="token number">28</span> <span class="token operator">=</span> LOB_ERASE    <span class="token number">34</span> <span class="token operator">=</span> MISSING_SCN    <span class="token number">36</span> <span class="token operator">=</span> <span class="token keyword">ROLLBACK</span>    <span class="token number">255</span> <span class="token operator">=</span> UNSUPPORTEDSQL_REDO VARCHAR2<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//重做日志SQL</span>SQL_UNDO VARCHAR2<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//相反操作SQL</span>SEQUENCE<span class="token comment" spellcheck="true"># NUMBER //重做日志的序号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-logminer日志挖掘案例1-分析生产系统表数据丢失的原因"><a href="#3-logminer日志挖掘案例1-分析生产系统表数据丢失的原因" class="headerlink" title="3.logminer日志挖掘案例1-分析生产系统表数据丢失的原因"></a>3.logminer日志挖掘案例1-分析生产系统表数据丢失的原因</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--3.1 安装logminer</span><span class="token variable">@$ORACLE_HOME</span><span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmslm<span class="token punctuation">.</span>sql<span class="token variable">@$ORACLE_HOME</span><span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmslmd<span class="token punctuation">.</span>sql<span class="token variable">@$ORACLE_HOME</span><span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmslms<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true">--3.2、使用LogMiner字典到字典文件来分析DDL操作</span><span class="token comment" spellcheck="true">--01.提取logminer字典</span><span class="token comment" spellcheck="true">--设置一个字典文件路径：</span><span class="token keyword">show</span> parameter utl_file_dir <span class="token comment" spellcheck="true">--需要重启DB</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> utl_file_dir<span class="token operator">=</span><span class="token string">'/u01'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建一个数据字典文件</span><span class="token keyword">exec</span> dbms_logmnr_d<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">'dict.ora'</span><span class="token punctuation">,</span><span class="token string">'/u01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.建立日志分析列表</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/u01/fast_recovery_area/ORCL/archivelog/2018_01_30/o1_mf_1_42_f7043xy4_.arc'</span><span class="token punctuation">,</span>options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">execute</span> dbms_logmnr<span class="token punctuation">.</span>add_logfile<span class="token punctuation">(</span>logfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/u01/fast_recovery_area/ORCL/archivelog/2018_01_30/o1_mf_1_41_f7043xtq_.arc'</span><span class="token punctuation">,</span>options<span class="token operator">=</span><span class="token operator">></span>dbms_logmnr<span class="token punctuation">.</span>addfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.启动分析</span><span class="token keyword">exec</span> dbms_logmnr<span class="token punctuation">.</span>start_logmnr<span class="token punctuation">(</span>DictFileName <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'/u01/dict.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.查看日志分析结果</span><span class="token keyword">select</span> username<span class="token punctuation">,</span>scn<span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span>sql_redo<span class="token punctuation">,</span>sql_undo <span class="token keyword">from</span> v$logmnr_contents<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> test01<span class="token punctuation">.</span>logmnr_temp nologging <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$logmnr_contents<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itpux01<span class="token punctuation">.</span>logmnr_temp <span class="token keyword">where</span> seg_owner<span class="token operator">=</span><span class="token string">'test01'</span> <span class="token operator">and</span> seg_name<span class="token operator">=</span><span class="token string">'TEST01'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> itpux01<span class="token punctuation">.</span>logmnr_temp <span class="token keyword">where</span> seg_owner<span class="token operator">=</span><span class="token string">'test01'</span> <span class="token operator">and</span> seg_name<span class="token operator">=</span><span class="token string">'TEST01'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--05.结束分析</span><span class="token keyword">exec</span> dbms_logmnr<span class="token punctuation">.</span>end_logmnr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-logminer日志挖掘案例2-恢复DML误操作导致的表数据丢失"><a href="#4-logminer日志挖掘案例2-恢复DML误操作导致的表数据丢失" class="headerlink" title="4.logminer日志挖掘案例2-恢复DML误操作导致的表数据丢失"></a>4.logminer日志挖掘案例2-恢复DML误操作导致的表数据丢失</h2><h2 id="5-logminer日志挖掘案例3-RMAN表空间基于时间点的自动恢复"><a href="#5-logminer日志挖掘案例3-RMAN表空间基于时间点的自动恢复" class="headerlink" title="5.logminer日志挖掘案例3-RMAN表空间基于时间点的自动恢复"></a>5.logminer日志挖掘案例3-RMAN表空间基于时间点的自动恢复</h2><h2 id="6-logminer使用总结"><a href="#6-logminer使用总结" class="headerlink" title="6.logminer使用总结"></a>6.logminer使用总结</h2>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> LogMiner </tag>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Rman 备份3</title>
      <link href="/oracle/oracle-rman-bei-fen-3/"/>
      <url>/oracle/oracle-rman-bei-fen-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-Rman-的备份-（高级）"><a href="#Oracle-Rman-的备份-（高级）" class="headerlink" title="Oracle Rman 的备份 （高级）"></a>Oracle Rman 的备份 （高级）</h1><p>[Oracle 11G R2 官方文档][1] </p><h2 id="1-关于RMAN内存缓冲与块跟踪"><a href="#1-关于RMAN内存缓冲与块跟踪" class="headerlink" title="1.关于RMAN内存缓冲与块跟踪"></a>1.关于RMAN内存缓冲与块跟踪</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">## 6.使用RMAN的dbms_backup_restore包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看RMAN 备份进程</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> sid<span class="token punctuation">,</span><span class="token keyword">serial</span><span class="token comment" spellcheck="true">#,context,sofar,totalwork,round(sofar/totalwork*100,2) "%_COMPLETE"</span>     <span class="token keyword">from</span> v$session_longops    <span class="token keyword">where</span> opname <span class="token operator">like</span> <span class="token string">'RMAN%'</span>     <span class="token operator">AND</span> OPNAME <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">'%aggregate%'</span>     <span class="token operator">and</span> totalwork <span class="token operator">!=</span> <span class="token number">0</span>     <span class="token operator">and</span> sofar <span class="token operator">&lt;></span>totalwork<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用RMAN的dbms-backup-restore包"><a href="#2-使用RMAN的dbms-backup-restore包" class="headerlink" title="2.使用RMAN的dbms_backup_restore包"></a>2.使用RMAN的dbms_backup_restore包</h2><ul><li>1.恢复controlfile</li></ul><blockquote><p>dbms_backup_restore包是一个非常强大的package，可以在数据库nomount下使用，用于从RMAN备份集中读取各类文件。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span>    devtype varchar2<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    done <span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token keyword">BEGIN</span>    devtype:<span class="token operator">=</span>sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>deviceAllocate <span class="token punctuation">(</span><span class="token keyword">type</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">,</span>ident<span class="token operator">=</span><span class="token operator">></span><span class="token string">'t1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreSetDatafile<span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreControlfileTo<span class="token punctuation">(</span>cfname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/control01.ctl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreBackupPiece<span class="token punctuation">(</span>done<span class="token operator">=</span><span class="token operator">></span>done<span class="token punctuation">,</span>handle<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/full/itpux19_ctl_db01_3_1_919281645'</span><span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token operator">></span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>deviceDeallocate<span class="token punctuation">;</span>   <span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.恢复数据文件</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'sys.dbms_backup_restore.restoreDatafileTo(dfnumber=>'</span> <span class="token operator">||</span> <span class="token keyword">file</span><span class="token comment" spellcheck="true"># ||</span>       <span class="token string">',toname=>'</span> <span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span> name <span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">');'</span><span class="token punctuation">,</span>       <span class="token string">'sys.dbms_backup_restore.applySetDatafile(dfnumber=>'</span> <span class="token operator">||</span> <span class="token keyword">file</span><span class="token comment" spellcheck="true"># ||</span>       <span class="token string">',toname=>'</span> <span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span> name <span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">');'</span>  <span class="token keyword">from</span> v$datafile<span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span>    devtype varchar2<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    done <span class="token keyword">boolean</span><span class="token punctuation">;</span>    <span class="token keyword">BEGIN</span>    devtype:<span class="token operator">=</span>sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>deviceAllocate <span class="token punctuation">(</span><span class="token keyword">type</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">,</span>ident<span class="token operator">=</span><span class="token operator">></span><span class="token string">'t1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreSetDatafile<span class="token punctuation">;</span>      sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/system01.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/sysaux01.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/undotbs01.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/users01.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/example01.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/scdata01.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreDatafileTo<span class="token punctuation">(</span>dfnumber<span class="token operator">=</span><span class="token operator">></span><span class="token number">7</span><span class="token punctuation">,</span>toname<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/test/rman.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>restoreBackupPiece<span class="token punctuation">(</span>done<span class="token operator">=</span><span class="token operator">></span>done<span class="token punctuation">,</span>handle<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backup/full/itpux19_full_db01_1_1_919278149'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token operator">></span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sys<span class="token punctuation">.</span>dbms_backup_restore<span class="token punctuation">.</span>deviceDeallocate<span class="token punctuation">;</span> <span class="token keyword">END</span><span class="token punctuation">;</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.恢复归档日志文件</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">---从备份集中还原归档日志</span><span class="token keyword">declare</span>devtype varchar2<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>done <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token keyword">begin</span>devtype :<span class="token operator">=</span> dbms_backup_restore<span class="token punctuation">.</span>DeviceAllocate <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">,</span>ident <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'t1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dbms_backup_restore<span class="token punctuation">.</span>RestoreSetArchivedLog<span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backu/test/archive'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--设置恢复对话</span>dbms_backup_restore<span class="token punctuation">.</span>RestoreArchivedLog<span class="token punctuation">(</span>thread <span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">,</span>sequence <span class="token operator">=</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--日志的线程号和日志号</span>dbms_backup_restore<span class="token punctuation">.</span>RestoreBackupPiece<span class="token punctuation">(</span>done <span class="token operator">=</span><span class="token operator">></span> done<span class="token punctuation">,</span>handle <span class="token operator">=</span><span class="token operator">></span><span class="token string">'/oracle/full/itpux19_pfile_db01_4_1_919281649'</span><span class="token punctuation">,</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--指定使用的备份集</span>dbms_backup_restore<span class="token punctuation">.</span>DeviceDeallocate<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---从备份集中按scn范围还原归档日志</span><span class="token keyword">declare</span>devtype varchar2<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>done <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token keyword">begin</span>devtype :<span class="token operator">=</span> dbms_backup_restore<span class="token punctuation">.</span>DeviceAllocate <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">,</span>ident <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'t1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dbms_backup_restore<span class="token punctuation">.</span>RestoreSetArchivedLog<span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token operator">></span><span class="token string">'/backu/test/archive'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--设置恢复对话</span>dbms_backup_restore<span class="token punctuation">.</span>RestoreArchivedLogRange<span class="token punctuation">(</span>log_change <span class="token operator">=</span><span class="token operator">></span><span class="token number">1125933</span> <span class="token punctuation">,</span>high_change <span class="token operator">=</span><span class="token operator">></span><span class="token number">1126275</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--日志的线程号和日志号</span>dbms_backup_restore<span class="token punctuation">.</span>RestoreBackupPiece<span class="token punctuation">(</span>done <span class="token operator">=</span><span class="token operator">></span> done<span class="token punctuation">,</span>handle <span class="token operator">=</span><span class="token operator">></span><span class="token string">'/oracle/full/itpux19_pfile_db01_4_1_919281649'</span><span class="token punctuation">,</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--指定使用的备份集</span>dbms_backup_restore<span class="token punctuation">.</span>DeviceDeallocate<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用RMAN的BlockRecovery恢复坏块"><a href="#3-使用RMAN的BlockRecovery恢复坏块" class="headerlink" title="3.使用RMAN的BlockRecovery恢复坏块"></a>3.使用RMAN的BlockRecovery恢复坏块</h2><h2 id="4-Oracle-RMAN-Recovery-Advisor案列"><a href="#4-Oracle-RMAN-Recovery-Advisor案列" class="headerlink" title="4. Oracle RMAN Recovery Advisor案列"></a>4. Oracle RMAN Recovery Advisor案列</h2><h2 id="5-RMAN-备份压缩案列"><a href="#5-RMAN-备份压缩案列" class="headerlink" title="5.RMAN 备份压缩案列"></a>5.RMAN 备份压缩案列</h2><h3 id="5-1修改参数开启-关闭备份压缩"><a href="#5-1修改参数开启-关闭备份压缩" class="headerlink" title="5.1修改参数开启/关闭备份压缩"></a>5.1修改参数开启/关闭备份压缩</h3><ul><li>1.开启备份压缩</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--使用COMPRESSED启用RMAN备份压缩</span>CONFIGURE DEVICE <span class="token keyword">TYPE</span> <span class="token keyword">DISK</span> <span class="token keyword">BACKUP</span> <span class="token keyword">TYPE</span> <span class="token keyword">TO</span> COMPRESSED BACKUPSET<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>2.关闭备份压缩</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--取消COMPRESSED取消RMAN备份压缩</span>CONFIGURE DEVICE <span class="token keyword">TYPE</span> <span class="token keyword">DISK</span> <span class="token keyword">BACKUP</span> <span class="token keyword">TYPE</span> <span class="token keyword">TO</span> BACKUPSET<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2直接使用命令开启-取消备份压缩"><a href="#5-2直接使用命令开启-取消备份压缩" class="headerlink" title="5.2直接使用命令开启/取消备份压缩"></a>5.2直接使用命令开启/取消备份压缩</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--对整个数据库压缩备份</span><span class="token keyword">BACKUP</span> <span class="token keyword">AS</span> COMPRESSED BACKUPSET <span class="token keyword">DATABASE</span> PLUS ARCHIVELOG<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--对指定数据文件压缩备份</span><span class="token keyword">BACKUP</span> <span class="token keyword">AS</span> COMPRESSED BACKUPSET DATAFILE <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-RMAN-增量备份与恢复"><a href="#6-RMAN-增量备份与恢复" class="headerlink" title="6.RMAN 增量备份与恢复"></a>6.RMAN 增量备份与恢复</h2><h2 id="7-RMAN-备份的加密"><a href="#7-RMAN-备份的加密" class="headerlink" title="7.RMAN 备份的加密"></a>7.RMAN 备份的加密</h2><h2 id="8-RMAN-克隆数据库测试"><a href="#8-RMAN-克隆数据库测试" class="headerlink" title="8. RMAN 克隆数据库测试"></a>8. RMAN 克隆数据库测试</h2><h2 id="9-生产环境-RMAN-异机恢复场景"><a href="#9-生产环境-RMAN-异机恢复场景" class="headerlink" title="9.生产环境 RMAN 异机恢复场景"></a>9.生产环境 RMAN 异机恢复场景</h2><h2 id="10-FlashBack"><a href="#10-FlashBack" class="headerlink" title="10.FlashBack"></a>10.FlashBack</h2><ul><li>要求</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>版本大于等于<span class="token number">10.2</span><span class="token number">2</span><span class="token punctuation">.</span>数据必须开启归档<span class="token number">3</span><span class="token punctuation">.</span>数据必须配置Flash recovery<span class="token number">4</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>没有特殊要求就正常闪回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基本步骤</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>关闭数据库<span class="token number">2</span><span class="token punctuation">.</span>startup mount<span class="token punctuation">[</span>exclusive模式<span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span>闪回  时间<span class="token operator">/</span>SCN<span class="token operator">/</span>还原点<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">open</span> resetlogs<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">4.1</span> 打开有<span class="token number">2</span>种方法    <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">open</span> resetlog 方法，整个数据库都都恢复到丢表之前的状态（假如丢表之后对其他表进行了某些操作也将丢失）    <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">open</span> <span class="token keyword">read</span> only 只读打开，导标，完全恢复，在导入丢失的表。    也可以先把备份放到其他的数据库恢复后把丢失的表导入的目标数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>具体操作</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--SQLPLUS</span>flashback <span class="token keyword">database</span> <span class="token operator">&lt;</span>db_name<span class="token operator">></span> <span class="token keyword">to</span> scn <span class="token operator">&lt;</span>scn<span class="token operator">></span>   <span class="token comment" spellcheck="true">--scn </span>flashback <span class="token keyword">database</span> <span class="token operator">&lt;</span>db_name<span class="token operator">></span> <span class="token keyword">to</span> <span class="token keyword">timestamp</span> <span class="token operator">&lt;</span><span class="token keyword">timestamp</span><span class="token operator">></span> <span class="token comment" spellcheck="true">--time</span>flashback <span class="token keyword">database</span> <span class="token keyword">to</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> <span class="token operator">&lt;</span>point_name<span class="token operator">></span> <span class="token comment" spellcheck="true">--restore point</span><span class="token comment" spellcheck="true">--RMAN</span>flashback <span class="token keyword">database</span> <span class="token keyword">to</span> scn<span class="token operator">=</span><span class="token operator">&lt;</span>scn<span class="token operator">></span> <span class="token comment" spellcheck="true">--scn</span>flashback <span class="token keyword">database</span> <span class="token keyword">to</span> time<span class="token operator">=</span><span class="token string">"to_date('2018-01-30 15:00:41','YYYY-MM-DD HH24:MI:SS')"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--time</span>flashback <span class="token keyword">database</span> <span class="token keyword">to</span> sequence<span class="token operator">=</span><span class="token number">88</span> thread<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--sequence</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-1-基于SCN的闪回"><a href="#10-1-基于SCN的闪回" class="headerlink" title="10.1.基于SCN的闪回"></a>10.1.基于SCN的闪回</h3><pre class="line-numbers language-sql"><code class="language-sql">SQL<span class="token operator">></span> <span class="token keyword">select</span> current_scn <span class="token keyword">from</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span>CURRENT_SCN<span class="token comment" spellcheck="true">-----------</span>    <span class="token number">1349018</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$flashback_database_log<span class="token punctuation">;</span>OLDEST_FLASHBACK_SCN OLDEST_FLASHBACK_TI RETENTION_TARGET FLASHBACK_SIZE<span class="token comment" spellcheck="true">-------------------- ------------------- ---------------- --------------</span>ESTIMATED_FLASHBACK_SIZE<span class="token comment" spellcheck="true">------------------------</span>             <span class="token number">1345507</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">13</span>:<span class="token number">18</span>:<span class="token number">09</span>             <span class="token number">1440</span>      <span class="token number">104857600</span>               <span class="token number">327008256</span><span class="token number">14</span>:<span class="token number">13</span>:<span class="token number">37</span> SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span>        ID NAME<span class="token comment" spellcheck="true">---------- --------------------</span>         <span class="token number">1</span> Anonycurse01         <span class="token number">2</span> Anonycurse02         <span class="token number">3</span> Anonycurse03         <span class="token number">4</span> Anonycurse04         <span class="token number">5</span> Anonycurse05         <span class="token number">6</span> Anonycurse06         <span class="token number">7</span> Anonycurse07<span class="token number">7</span> <span class="token keyword">rows</span> selected<span class="token punctuation">.</span><span class="token number">14</span>:<span class="token number">13</span>:<span class="token number">47</span> SQL<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token keyword">row</span> deleted<span class="token punctuation">.</span><span class="token number">14</span>:<span class="token number">14</span>:<span class="token number">06</span> SQL<span class="token operator">></span> <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">Commit</span> complete<span class="token punctuation">.</span>SQL<span class="token operator">></span> startup mount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area  <span class="token number">835104768</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2257840</span> bytesVariable Size             <span class="token number">281021520</span> bytes<span class="token keyword">Database</span> Buffers          <span class="token number">549453824</span> bytesRedo Buffers                <span class="token number">2371584</span> bytes<span class="token keyword">Database</span> mounted<span class="token punctuation">.</span>SQL<span class="token operator">></span> flashback <span class="token keyword">database</span> orcl <span class="token keyword">to</span> scn   <span class="token number">1349018</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-基于时间的闪回"><a href="#10-2-基于时间的闪回" class="headerlink" title="10.2.基于时间的闪回"></a>10.2.基于时间的闪回</h3><ul><li>步骤</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>数据库启动到MOUNT，恢复到制定时间点<span class="token number">2</span><span class="token punctuation">.</span>把数据的打开导只读模式<span class="token number">3</span><span class="token punctuation">.</span>把表导出<span class="token number">4</span><span class="token punctuation">.</span>重启数据库到MOUNT后恢复数据库到最新<span class="token number">4</span><span class="token punctuation">.</span>正常打开后导入表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>操作</li></ul><pre class="line-numbers language-sql"><code class="language-sql">SQL<span class="token operator">></span> <span class="token keyword">set</span> time <span class="token keyword">on</span><span class="token number">15</span>:<span class="token number">00</span>:<span class="token number">12</span> SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span>        ID NAME<span class="token comment" spellcheck="true">---------- --------------------</span>         <span class="token number">1</span> Anonycurse01         <span class="token number">2</span> Anonycurse02         <span class="token number">3</span> Anonycurse03         <span class="token number">4</span> Anonycurse04         <span class="token number">5</span> Anonycurse05         <span class="token number">6</span> Anonycurse06         <span class="token number">7</span> Anonycurse07<span class="token number">7</span> <span class="token keyword">rows</span> selected<span class="token punctuation">.</span><span class="token number">15</span>:<span class="token number">00</span>:<span class="token number">17</span> SQL<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> test01 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token keyword">Table</span> created<span class="token punctuation">.</span><span class="token number">15</span>:<span class="token number">00</span>:<span class="token number">41</span> SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test01<span class="token punctuation">;</span>        ID NAME<span class="token comment" spellcheck="true">---------- --------------------</span>         <span class="token number">1</span> Anonycurse01         <span class="token number">2</span> Anonycurse02         <span class="token number">3</span> Anonycurse03         <span class="token number">4</span> Anonycurse04         <span class="token number">5</span> Anonycurse05         <span class="token number">6</span> Anonycurse06         <span class="token number">7</span> Anonycurse07<span class="token number">7</span> <span class="token keyword">rows</span> selected<span class="token punctuation">.</span><span class="token number">15</span>:<span class="token number">00</span>:<span class="token number">48</span> SQL<span class="token operator">></span> <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">Commit</span> complete<span class="token punctuation">.</span><span class="token number">15</span>:<span class="token number">00</span>:<span class="token number">57</span> SQL<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">table</span> test01<span class="token punctuation">;</span><span class="token keyword">Table</span> dropped<span class="token punctuation">.</span><span class="token number">15</span>:<span class="token number">01</span>:<span class="token number">10</span> SQL<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">table</span> test<span class="token punctuation">;</span><span class="token keyword">Table</span> dropped<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span><span class="token keyword">Database</span> closed<span class="token punctuation">.</span><span class="token keyword">Database</span> dismounted<span class="token punctuation">.</span>ORACLE instance shut down<span class="token punctuation">.</span>SQL<span class="token operator">></span> startup mount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area  <span class="token number">835104768</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2257840</span> bytesVariable Size             <span class="token number">281021520</span> bytes<span class="token keyword">Database</span> Buffers          <span class="token number">549453824</span> bytesRedo Buffers                <span class="token number">2371584</span> bytes<span class="token keyword">Database</span> mounted<span class="token punctuation">.</span>RMAN<span class="token operator">></span> flashback <span class="token keyword">database</span> <span class="token keyword">to</span> time<span class="token operator">=</span><span class="token string">"to_date('2018-01-30 15:00:41','YYYY-MM-DD HH24:MI:SS')"</span><span class="token punctuation">;</span>Starting flashback at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span>:<span class="token number">04</span>:<span class="token number">25</span><span class="token keyword">using</span> channel ORA_DISK_1starting media recoverymedia recovery complete<span class="token punctuation">,</span> elapsed time: <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">07</span>Finished flashback at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">15</span>:<span class="token number">04</span>:<span class="token number">32</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">open</span> <span class="token keyword">read</span> only<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span><span class="token punctuation">[</span>oracle<span class="token variable">@orcl</span>:<span class="token operator">/</span>u01<span class="token punctuation">]</span>$exp anonycurse<span class="token operator">/</span>jia <span class="token keyword">tables</span><span class="token operator">=</span>test01 <span class="token keyword">file</span><span class="token operator">=</span><span class="token operator">/</span>u01<span class="token operator">/</span>test01<span class="token punctuation">.</span>dmp log<span class="token operator">=</span><span class="token operator">/</span>u01<span class="token operator">/</span>test01<span class="token punctuation">.</span>log Export: <span class="token keyword">Release</span> <span class="token number">11.2</span><span class="token punctuation">.</span><span class="token number">0.4</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span> Production <span class="token keyword">on</span> Tue Jan <span class="token number">30</span> <span class="token number">15</span>:<span class="token number">22</span>:<span class="token number">07</span> <span class="token number">2018</span>Copyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">1982</span><span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span>  <span class="token keyword">All</span> rights reserved<span class="token punctuation">.</span>Connected <span class="token keyword">to</span>: Oracle <span class="token keyword">Database</span> 11g Enterprise Edition <span class="token keyword">Release</span> <span class="token number">11.2</span><span class="token punctuation">.</span><span class="token number">0.4</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span> 64bit Production<span class="token keyword">With</span> the Partitioning<span class="token punctuation">,</span> OLAP<span class="token punctuation">,</span> <span class="token keyword">Data</span> Mining <span class="token operator">and</span> <span class="token keyword">Real</span> Application Testing optionsExport done <span class="token operator">in</span> ZHS16GBK <span class="token keyword">character set</span> <span class="token operator">and</span> UTF8 <span class="token keyword">NCHAR</span> <span class="token keyword">character set</span>About <span class="token keyword">to</span> export specified <span class="token keyword">tables</span> via Conventional Path <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> exporting <span class="token keyword">table</span>                         TEST01          <span class="token number">7</span> <span class="token keyword">rows</span> exportedExport terminated successfully without <span class="token keyword">warnings</span><span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span><span class="token keyword">Database</span> closed<span class="token punctuation">.</span><span class="token keyword">Database</span> dismounted<span class="token punctuation">.</span>ORACLE instance shut down<span class="token punctuation">.</span>SQL<span class="token operator">></span> startup mount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area  <span class="token number">835104768</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2257840</span> bytesVariable Size             <span class="token number">281021520</span> bytes<span class="token keyword">Database</span> Buffers          <span class="token number">549453824</span> bytesRedo Buffers                <span class="token number">2371584</span> bytes<span class="token keyword">Database</span> mounted<span class="token punctuation">.</span>SQL<span class="token operator">></span> recovery <span class="token keyword">database</span><span class="token punctuation">;</span>SP2<span class="token number">-0734</span>: unknown command beginning <span class="token string">"recovery d..."</span> <span class="token operator">-</span> rest <span class="token keyword">of</span> line ignored<span class="token punctuation">.</span>SQL<span class="token operator">></span> recover <span class="token keyword">database</span><span class="token punctuation">;</span>Media recovery complete<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-Restore-point-in-Oracle（Normal）"><a href="#10-4-Restore-point-in-Oracle（Normal）" class="headerlink" title="10.4 Restore point in Oracle（Normal）"></a>10.4 Restore point in Oracle（Normal）</h3><ul><li>基本使用</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.创建还原点</span><span class="token keyword">create</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> test_normal<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.查看还原点</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>time<span class="token punctuation">,</span>storage_size <span class="token keyword">from</span> v$restore_point<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3.删除还原点</span><span class="token keyword">drop</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> test_normal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>步骤</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>创建还原点<span class="token number">2</span><span class="token punctuation">.</span>执行某操作后需要还原<span class="token number">3</span><span class="token punctuation">.</span>执行还原<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">OPEN</span> RESETLOGS打开数据库<span class="token number">5</span><span class="token punctuation">.</span>删除还原点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>操作</li></ul><pre class="line-numbers language-sql"><code class="language-sql">SQL<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> test_normal<span class="token punctuation">;</span><span class="token keyword">Restore</span> <span class="token keyword">point</span> created<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> name<span class="token punctuation">,</span>time<span class="token punctuation">,</span>storage_size <span class="token keyword">from</span> v$restore_point<span class="token punctuation">;</span>NAME<span class="token comment" spellcheck="true">--------------------------------------------------------------------------------</span>TIME<span class="token comment" spellcheck="true">---------------------------------------------------------------------------</span>STORAGE_SIZE<span class="token comment" spellcheck="true">------------</span>TEST_NORMAL<span class="token number">30</span><span class="token operator">-</span>JAN<span class="token number">-18</span> <span class="token number">03.46</span><span class="token punctuation">.</span><span class="token number">27.000000000</span> PM           <span class="token number">0</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span>TABLE_NAME<span class="token comment" spellcheck="true">------------------------------</span>TEST01TEST02SQL<span class="token operator">></span> <span class="token keyword">drop</span> <span class="token keyword">table</span> test01 <span class="token keyword">purge</span><span class="token punctuation">;</span><span class="token keyword">Table</span> dropped<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token keyword">Database</span> closed<span class="token punctuation">.</span><span class="token keyword">Database</span> dismounted<span class="token punctuation">.</span>ORACLE instance shut down<span class="token punctuation">.</span>SQL<span class="token operator">></span> startup mount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area  <span class="token number">835104768</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2257840</span> bytesVariable Size             <span class="token number">281021520</span> bytes<span class="token keyword">Database</span> Buffers          <span class="token number">549453824</span> bytesRedo Buffers                <span class="token number">2371584</span> bytes<span class="token keyword">Database</span> mounted<span class="token punctuation">.</span>SQL<span class="token operator">></span> flashback <span class="token keyword">database</span> <span class="token keyword">to</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> test_normal<span class="token punctuation">;</span>Flashback complete<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">open</span>  resetlogs<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span>TABLE_NAME<span class="token comment" spellcheck="true">------------------------------</span>TEST01TEST02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-5-Restore-point-in-Oracle（Guaranteed）"><a href="#10-5-Restore-point-in-Oracle（Guaranteed）" class="headerlink" title="10.5 Restore point in Oracle（Guaranteed）"></a>10.5 Restore point in Oracle（Guaranteed）</h3><ul><li>基本使用</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.创建还原点</span><span class="token keyword">create</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> test_guaranteed Guarantee flashback <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.</span><span class="token comment" spellcheck="true">--3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>步骤</li></ul><pre class="line-numbers language-sql"><code class="language-sql">和Normal基本一致<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>操作</li></ul><pre class="line-numbers language-sql"><code class="language-sql">flashback <span class="token keyword">database</span> <span class="token keyword">to</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> test_guaranteed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="10-3-日常监控"><a href="#10-3-日常监控" class="headerlink" title="10.3 日常监控"></a>10.3 日常监控</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.监控flashback</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> V$FLASH_RECOVERY_AREA_USAGE<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> V$RECOVERY_FILE_DEST<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.清理空间</span>rm datafile<span class="token number">.dbf</span>RMAN<span class="token operator">></span>crosscheck <span class="token keyword">backup</span><span class="token punctuation">;</span>crosscheck archivelog <span class="token keyword">all</span><span class="token punctuation">;</span><span class="token keyword">delete</span> expired <span class="token keyword">backup</span><span class="token punctuation">;</span><span class="token keyword">delete</span> expired archivelog <span class="token keyword">all</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">force</span> obsolete<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3.闪回点清理</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$resore_point<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">restore</span> <span class="token keyword">point</span> <span class="token operator">&lt;</span>point_name<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--4.相关视图</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> DICTIONARY <span class="token keyword">WHERE</span> table_name <span class="token operator">like</span> <span class="token string">'%FLASH%'</span><span class="token punctuation">;</span>v$<span class="token keyword">database</span>      <span class="token keyword">SELECT</span> FLASHBACK_ON <span class="token keyword">FROM</span> v$<span class="token keyword">database</span><span class="token punctuation">;</span>v$flashback_database_log    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$flashback_database_log<span class="token punctuation">;</span>v$flashback_database_stat    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$flashback_database_stat<span class="token punctuation">;</span>V$FLASH_RECOVERY_AREA_USAGE    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> V$FLASH_RECOVERY_AREA_USAGE<span class="token punctuation">;</span>V$RECOVERY_FILE_DEST    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> V$RECOVERY_FILE_DEST<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-回收站管理"><a href="#11-回收站管理" class="headerlink" title="11.回收站管理"></a>11.回收站管理</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dba_recyclebin<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> test <span class="token keyword">purge</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--清空回收站</span><span class="token keyword">purge</span> dba_recyclebin<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--All User</span><span class="token keyword">purge</span> recyclebin<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--Current User</span><span class="token keyword">drop</span> <span class="token keyword">table</span> test <span class="token keyword">purge</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--Skip</span><span class="token keyword">purge</span> <span class="token keyword">tablespace</span> tbs_name<span class="token punctuation">;</span><span class="token keyword">purge</span> <span class="token keyword">tablespace</span> tbs_name <span class="token keyword">user</span> user_name<span class="token punctuation">;</span><span class="token keyword">purge</span> <span class="token keyword">index</span> BIN$Y<span class="token operator">/</span>nEtmKPVY3gUwEAAH92GA<span class="token operator">=</span><span class="token operator">=</span>$<span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--回收站还原表</span><span class="token comment" spellcheck="true">--FlashBack</span>flash <span class="token keyword">table</span> <span class="token string">"BIN$Y/nEtmKPVY3gUwEAAH92GA==$0"</span> <span class="token keyword">to</span> before <span class="token keyword">drop</span><span class="token punctuation">;</span>flashback <span class="token keyword">table</span> test <span class="token keyword">to</span> before <span class="token keyword">drop</span><span class="token punctuation">;</span>flashback <span class="token keyword">table</span> test before <span class="token keyword">drop</span> <span class="token keyword">rename</span> <span class="token keyword">to</span> test<span class="token operator">-</span>new<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--Change Name</span><span class="token keyword">SELECT</span> table_name<span class="token punctuation">,</span>table_owner<span class="token punctuation">,</span>indedx_name <span class="token keyword">from</span> dba_indexes <span class="token keyword">WHERE</span> table_owner<span class="token operator">=</span><span class="token string">'anonycurse'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> table_name<span class="token punctuation">,</span>constraint_name <span class="token keyword">from</span> dba_constraints <span class="token keyword">WHERE</span> table_name<span class="token operator">=</span><span class="token string">'test01'</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> test01 <span class="token keyword">rename</span> <span class="token keyword">constraint</span> <span class="token string">"BIN$Y5intw3VMY3gUwEAAH+aYw==$0"</span>  <span class="token keyword">rename</span> <span class="token keyword">to</span> test_id_pk<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">index</span> <span class="token string">"BIN$Y5intw3VMY3gUwEAAH+aYw==$0"</span> <span class="token keyword">rename</span> <span class="token keyword">to</span> test_pk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> RMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Rman 备份1</title>
      <link href="/oracle/oracle-rman-bei-fen-1/"/>
      <url>/oracle/oracle-rman-bei-fen-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-Rman-的备份-（基础）"><a href="#Oracle-Rman-的备份-（基础）" class="headerlink" title="Oracle Rman 的备份 （基础）"></a>Oracle Rman 的备份 （基础）</h1><p> <a href="https://docs.oracle.com/cd/E11882_01/backup.112/e10643/preface.htm#RCMRF89959" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a> </p><h2 id="1-RMAN作用与体系架构"><a href="#1-RMAN作用与体系架构" class="headerlink" title="1. RMAN作用与体系架构"></a>1. RMAN作用与体系架构</h2><h2 id="2-nocatalog-余catalog-的介绍与catalog的配置"><a href="#2-nocatalog-余catalog-的介绍与catalog的配置" class="headerlink" title="2. nocatalog 余catalog 的介绍与catalog的配置"></a>2. nocatalog 余catalog 的介绍与catalog的配置</h2><h3 id="2-1-nocatalog介绍"><a href="#2-1-nocatalog介绍" class="headerlink" title="2.1 nocatalog介绍"></a>2.1 nocatalog介绍</h3><blockquote><p>&emsp;&emsp;nocatalog方式 就是用control file作为catalog，每一次备份都要往控制文件里面写好多备份信息，控制文件里面会有越来越多的备份信息。因此，当使用rman nocatalog方式备份时，备份controlfile是非常重要的。</p></blockquote><blockquote><p>&emsp;&emsp;由于nocatalog时利用controlfile存放备份信息，建议将oracle参数文件中的control_file_record_keep_time值加大（缺省为7天）, 参数在$oracle_home/dbs/initsid.ora中，该参数control_file__record_keep_time设置备份信息保存时间，到规定时间就自动清除以前的备份信息。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查看参数</span><span class="token keyword">show</span> parameter control<span class="token comment" spellcheck="true">--修改时间为半个月</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> control_file_record_keep_time<span class="token operator">=</span><span class="token number">14</span> scope<span class="token operator">=</span>both<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查看参数</span><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token keyword">value</span><span class="token punctuation">,</span>issys_modifiable <span class="token keyword">from</span> v$parameter <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'control_file_record_keep_time'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-catalog介绍"><a href="#2-2-catalog介绍" class="headerlink" title="2.2 catalog介绍"></a>2.2 catalog介绍</h3><blockquote><p>&emsp;&emsp;恢复目录存储的是与rman 备份有关的元数据。在某种意义上，恢复目录可以看做是保存rman备份和恢复所需的相关信息的副本。<br>&emsp;&emsp;我们可以在oracle 数据库中在用户模式下创建恢复目录，这个恢复目录仅仅是一些数据包，表，索引和视图。<br>&emsp;&emsp;rman中的再同步命令会使得目标数据库控制文件中的内容刷新这些表中的数据。当然，区别在于恢复目录可以包含企业中所有数据库的信息，而控制文件只包含关于它自己的数据库的信息。</p></blockquote><h3 id="2-3-catalog恢复目录的配置过程"><a href="#2-3-catalog恢复目录的配置过程" class="headerlink" title="2.3 catalog恢复目录的配置过程"></a>2.3 catalog恢复目录的配置过程</h3><ul><li><p>创建时需要的表空间</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> rman_tbs   datafile <span class="token string">'/u01/app/oracle/oradata/orcl/rman_tbs.dbf'</span>  size 1G   autoextend <span class="token keyword">off</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用户并授权<br><code>`</code>sql<br>create user rman<br>  identified by rman<br>  default tablespace rman_tbs;</p></li></ul><p>grant connect,resource,recovery_catalog_owner to rman;</p><pre><code>* 创建恢复目录```sqlrman catalog rman/rmancreate catalog tablespace rman_tbs;--注意这里tablespace不能为rman</code></pre><ul><li>配置rman 专用的监听<pre class="line-numbers language-sql"><code class="language-sql">rman <span class="token operator">=</span>  <span class="token punctuation">(</span>description <span class="token operator">=</span>      <span class="token punctuation">(</span>address_list <span class="token operator">=</span>          <span class="token punctuation">(</span>address <span class="token operator">=</span> <span class="token punctuation">(</span>protocol <span class="token operator">=</span> tcp<span class="token punctuation">)</span><span class="token punctuation">(</span>host <span class="token operator">=</span> orcl<span class="token punctuation">)</span><span class="token punctuation">(</span>port <span class="token operator">=</span> <span class="token number">1521</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>      <span class="token punctuation">(</span>connect_data <span class="token operator">=</span>          <span class="token punctuation">(</span>sid <span class="token operator">=</span> orcl<span class="token punctuation">)</span>      <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-详解-RMAN-的使用"><a href="#3-详解-RMAN-的使用" class="headerlink" title="3. 详解 RMAN 的使用"></a>3. 详解 RMAN 的使用</h2><h3 id="3-1-设置环境变量"><a href="#3-1-设置环境变量" class="headerlink" title="3.1 设置环境变量"></a>3.1 设置环境变量</h3><blockquote><p>&emsp;&emsp;  修改oracle用户环境变量为如下，在linux系统中还有一个rman命令不是oracle的，如果在win环境下，可以直接使用cmd。<br>path=$oracle_home/bin:/sbin:$path<br>才可以使用rman命令</p></blockquote><h3 id="3-2-rman命令的帮助"><a href="#3-2-rman命令的帮助" class="headerlink" title="3.2 rman命令的帮助"></a>3.2 rman命令的帮助</h3><pre class="line-numbers language-sql"><code class="language-sql">Argument     <span class="token keyword">Value</span>          Description<span class="token comment" spellcheck="true">-----------------------------------------------------------------------------</span>target       quoted<span class="token operator">-</span>string  <span class="token keyword">connect</span><span class="token operator">-</span>string <span class="token keyword">for</span> target <span class="token keyword">database</span>catalog      quoted<span class="token operator">-</span>string  <span class="token keyword">connect</span><span class="token operator">-</span>string <span class="token keyword">for</span> recovery catalognocatalog    none           <span class="token keyword">if</span> specified<span class="token punctuation">,</span> <span class="token keyword">then</span> <span class="token keyword">no</span> recovery catalogcmdfile      quoted<span class="token operator">-</span>string  name <span class="token keyword">of</span> input command <span class="token keyword">file</span>log          quoted<span class="token operator">-</span>string  name <span class="token keyword">of</span> output message log <span class="token keyword">file</span>trace        quoted<span class="token operator">-</span>string  name <span class="token keyword">of</span> output debugging message log <span class="token keyword">file</span>append       none           <span class="token keyword">if</span> specified<span class="token punctuation">,</span> log <span class="token operator">is</span> opened <span class="token operator">in</span> append modedebug        optional<span class="token operator">-</span>args  activate debuggingmsgno        none           <span class="token keyword">show</span> RMAN<span class="token operator">-</span>nnnn prefix <span class="token keyword">for</span> <span class="token keyword">all</span> messagessend         quoted<span class="token operator">-</span>string  send <span class="token number">a</span> command <span class="token keyword">to</span> the media managerpipe         string         building block <span class="token keyword">for</span> pipe namestimeout      <span class="token keyword">integer</span>        number <span class="token keyword">of</span> seconds <span class="token keyword">to</span> wait <span class="token keyword">for</span> pipe inputchecksyntax  none           <span class="token keyword">check</span> the command <span class="token keyword">file</span> <span class="token keyword">for</span> syntax <span class="token keyword">errors</span><span class="token comment" spellcheck="true">-----------------------------------------------------------------------------</span>Both single <span class="token operator">and</span> <span class="token keyword">double</span> quotes <span class="token punctuation">(</span>' <span class="token operator">or</span> "<span class="token punctuation">)</span> are accepted <span class="token keyword">for</span> <span class="token number">a</span> quoted<span class="token operator">-</span>string<span class="token punctuation">.</span>Quotes are <span class="token operator">not</span> required unless the string <span class="token keyword">contains</span> embedded white<span class="token operator">-</span>space<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-rman连接信息介绍"><a href="#3-3-rman连接信息介绍" class="headerlink" title="3.3 rman连接信息介绍"></a>3.3 rman连接信息介绍</h3><ul><li>连接到目标数据库<pre class="line-numbers language-sql"><code class="language-sql">rman<span class="token operator">></span><span class="token keyword">connect</span> target <span class="token keyword">user</span><span class="token operator">/</span>pwd<span class="token variable">@db_name</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>注意<blockquote><p>1、connect不能简写为conn<br>2、连接user必须具备sysdba权限<br>3、连接的db_name必须在tnsnames.ora中有配置，且有效(即通过sqlplus可以连接）<br>4、target database必须为archivelog 模式<br>5、如果是本地可以采用os认证，如果是远程需要使用密码文件认证。<br>6、rman工具版本与目标数据库必须是同一版本。</p></blockquote></li></ul><h3 id="3-4-在rman里执行操作系统命令"><a href="#3-4-在rman里执行操作系统命令" class="headerlink" title="3.4 在rman里执行操作系统命令"></a>3.4 在rman里执行操作系统命令</h3><pre class="line-numbers language-sql"><code class="language-sql">rman<span class="token operator">></span> run{host <span class="token string">"ls -artl"</span><span class="token punctuation">;</span>}rman<span class="token operator">></span> run{host <span class="token string">"ifconfig"</span><span class="token punctuation">;</span>}rman<span class="token operator">></span> run{host <span class="token string">"pwd"</span><span class="token punctuation">;</span>}<span class="token operator">/</span>home<span class="token operator">/</span>oraclehost commandcompleterman<span class="token operator">></span> run{host <span class="token string">"ls"</span><span class="token punctuation">;</span>}rman<span class="token operator">></span> <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-在rman里执行数据库命令及sql语句"><a href="#3-5-在rman里执行数据库命令及sql语句" class="headerlink" title="3.5 在rman里执行数据库命令及sql语句"></a>3.5 在rman里执行数据库命令及sql语句</h3><pre class="line-numbers language-sql"><code class="language-sql">rman<span class="token operator">></span> <span class="token keyword">shutdown</span> immediaterman<span class="token operator">></span> startuprman<span class="token operator">></span> sql <span class="token string">'select * fromuser_tablespaces'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-6-在rman中保存脚本或执行脚本"><a href="#3-6-在rman中保存脚本或执行脚本" class="headerlink" title="3.6 在rman中保存脚本或执行脚本"></a>3.6 在rman中保存脚本或执行脚本</h3><blockquote><p>在RMAN中，我们可以创建一个命令文件，里面包含rman命令，然后在RMAN的中调用这个文件。如：<br>Rman target usr/pwd cmdfile=backup.cmd<br>或者，也可以直接在RMAN 中直接运行</p></blockquote><ul><li>创建存储的脚本<blockquote><p>使用create script RMAN 命令可以在恢复目录中存储脚本。 创建每个存储的脚本时，都要为脚本指定一个名称。 可以创建执行数据库备份，恢复和维护操作的脚本。在脚本中，RMAN 允许使用comment 参数存储与存储脚本相关的注释。 注意： 必须连接到恢复目录。 如：</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> <span class="token keyword">create</span> script my_backup_script<span class="token keyword">comment</span> <span class="token string">'itpux'</span>{  <span class="token keyword">backup</span> <span class="token keyword">database</span> plus archivelog<span class="token punctuation">;</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li>修改存储脚本<blockquote><p>使用replace script 命令可以替换恢复目录中的存储脚本。</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> replace script my_backup_script<span class="token keyword">comment</span> <span class="token string">'bl'</span>{  <span class="token keyword">backup</span> <span class="token keyword">database</span> plus archivelog <span class="token keyword">delete</span> input<span class="token punctuation">;</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li>删除存储脚本<blockquote><p>使用delete script命令可以删除一个存储脚本。</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> <span class="token keyword">Delete</span> script my_backup_script<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><p>使用存储脚本</p><blockquote><p>创建一些存储过程脚本后，可以执行execute script命令来使用这些脚本。如：</p><pre class="line-numbers language-sql"><code class="language-sql">run { <span class="token keyword">execute</span> script my_backup_script<span class="token punctuation">;</span> }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><p>打印存储的脚本</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> <span class="token keyword">Print</span> script my_backup_script<span class="token punctuation">;</span>正在打印存储的脚本: my_backup_script{<span class="token keyword">backup</span> <span class="token keyword">database</span> plus archivelog<span class="token punctuation">;</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>还可以使用RC_STORED_SCRIPT_LINE恢复目录视图来显示存储的脚本的内容，如：<br><code>`</code>sql<br>SQL&gt; select script_name,text from rc_stored_script_line order by script_name,line;<br>SCRIPT_NAME TEXT</p></blockquote><hr><p>my_backup_script {<br>    my_backup_script backup database plus archivelog delete input;<br>my_backup_script }</p><pre><code>### 3.7 查看并修改单个参数```sqlrman&gt; show all;using target database control file instead of recoverycatalogrman configuration parameters are:</code></pre><h3 id="3-8-查看并修改单个参数"><a href="#3-8-查看并修改单个参数" class="headerlink" title="3.8 查看并修改单个参数"></a>3.8 查看并修改单个参数</h3><pre class="line-numbers language-sql"><code class="language-sql">rman<span class="token operator">></span><span class="token keyword">show</span> retention policy<span class="token punctuation">;</span>rman<span class="token operator">></span><span class="token keyword">show</span> <span class="token keyword">backup</span> optimization<span class="token punctuation">;</span>rman<span class="token operator">></span><span class="token keyword">show</span> controlfile autobackup<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-----查看当前参数的值，是off。</span>rman<span class="token operator">></span>configure controlfile autobackup <span class="token keyword">on</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--修改为on，自动备份控制文件</span>rman<span class="token operator">></span> <span class="token keyword">show</span> controlfile autobackup<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">---查看修改后的，已经修改成功。</span>rman<span class="token operator">></span> configurechannel <span class="token number">1</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> format <span class="token string">'/dbbak/bak_%d_%m_%d_%u'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--注释：配置数据文件的备份路径.</span>rman<span class="token operator">></span> configurecontrolfile autobackup format <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token string">'%f'</span><span class="token punctuation">;</span> 注释：配置控制文件的备份路径rman<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">all</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">------查看所有信息，看到已经更改了默认备份路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-备份文件的格式"><a href="#3-8-备份文件的格式" class="headerlink" title="3.8 备份文件的格式"></a>3.8 备份文件的格式</h3><pre class="line-numbers language-sql"><code class="language-sql">备份文件可定义的格式符号如下使用format参数时可使用的各种替换变量，如下（注意大小写）所示：<span class="token operator">%</span><span class="token number">a</span>：Oracle数据库的activation ID即RESETLOG_ID。<span class="token operator">%</span><span class="token number">c</span>：备份片段的复制数（从<span class="token number">1</span>开始编号，最大不超过<span class="token number">256</span>）。<span class="token operator">%</span><span class="token number">d</span>：Oracle数据库名称。<span class="token operator">%</span>D：当前时间中的日，格式为DD。<span class="token operator">%</span><span class="token number">e</span>：归档序号。<span class="token operator">%</span><span class="token number">f</span>：绝对文件编号。<span class="token operator">%</span>F：基于<span class="token string">"DBID+时间"</span>确定的唯一名称，格式的形式为<span class="token number">c</span><span class="token operator">-</span>IIIIIIIIII<span class="token operator">-</span>YYYYMMDD<span class="token operator">-</span>QQ<span class="token punctuation">,</span>其中IIIIIIIIII 为该数据库的DBID，YYYYMMDD为日期，QQ是一个<span class="token number">1</span>～<span class="token number">256</span>的序列。<span class="token operator">%</span>h：归档日志线程号。<span class="token operator">%</span>I：Oracle数据库的DBID。<span class="token operator">%</span>M：当前时间中的月，格式为MM。<span class="token operator">%</span>N：表空间名称。<span class="token operator">%</span>n：数据库名称，并且会在右侧用x字符进行填充，使其保持长度为<span class="token number">8</span>。比如数据库名JSSBOOK，则生成的名称则是JSSBOOKx。<span class="token operator">%</span>p：备份集中备份片段的编号，从<span class="token number">1</span>开始。<span class="token operator">%</span>s：备份集号。<span class="token operator">%</span>t：备份集时间戳。<span class="token operator">%</span>T：当前时间的年月日格式（YYYYMMDD）。<span class="token operator">%</span>u：是一个由备份集编号和建立时间压缩后组成的<span class="token number">8</span>字符名称。利用<span class="token operator">%</span>u可以为每个备份集生成一个唯一的名称。<span class="token operator">%</span>U：默认是<span class="token operator">%</span>u_<span class="token operator">%</span>p_<span class="token operator">%</span><span class="token number">c</span>的简写形式，利用它可以为每一个备份片段（即磁盘文件）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-详解整个rman全备案例"><a href="#3-9-详解整个rman全备案例" class="headerlink" title="3.9 详解整个rman全备案例"></a>3.9 详解整个rman全备案例</h3><blockquote><p>执行rman备份必须开启数据的归档功能：</p><pre class="line-numbers language-sql"><code class="language-sql">sql<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate <span class="token comment" spellcheck="true">---关闭数据库</span>sql<span class="token operator">></span> startup mount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">----启动数据库到mount状态</span>sql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> archivelog<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">---开启归档功能</span><span class="token keyword">database</span> altered<span class="token punctuation">.</span>sql<span class="token operator">></span> archivelog list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">---查看归档状态</span><span class="token keyword">database</span> logmode archive mode <span class="token comment" spellcheck="true">---归档已经打开</span>automatic archival enabledarchive destination use_db_recovery_file_destoldest online logsequence <span class="token number">8</span><span class="token keyword">next</span> log sequence toarchive <span class="token number">10</span><span class="token keyword">current</span> log sequence <span class="token number">10</span>sql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="4-详解-RMAN的常用命令及日常维护"><a href="#4-详解-RMAN的常用命令及日常维护" class="headerlink" title="4. 详解 RMAN的常用命令及日常维护"></a>4. 详解 RMAN的常用命令及日常维护</h2><h3 id="4-1-rman所备份的数据库信息查看"><a href="#4-1-rman所备份的数据库信息查看" class="headerlink" title="4.1 rman所备份的数据库信息查看"></a>4.1 rman所备份的数据库信息查看</h3><ul><li><ol><li>list incarnation<blockquote><p>概述可用的备份<br>b 表示backup<br>a 表示archivelog、 f 表示full backup、 0,1,2 表示incremental level备份<br>a 表示可用avaliable、 x 表示expired</p></blockquote></li></ol></li></ul><blockquote><p>这个命令可以派生出很多类似命令，例如<br>list backup of database summary<br>list backup of archivelog all summary<br>list backup of tablespace users summary;<br>list backup of datafile n,n,n summary</p><ul><li><ol start="2"><li>list backup summary;<br>列出过期的备份文件</li></ol></li></ul></blockquote><ul><li><ol start="3"><li>list backup by file;<blockquote><p>按照文件类型分别列出<br>分别为：数据文件列表、归档日志列表、控制文件列表、spfile列表</p></blockquote></li></ol></li><li><ol start="4"><li>list backup<blockquote><p>这个命令列出已有备份集的详细信息。</p></blockquote></li></ol></li><li><ol start="5"><li>list expired backup;<blockquote><p>列出过期的备份文件</p></blockquote></li></ol></li><li><ol start="6"><li>list copy;<blockquote><p>列出copy文件</p><pre class="line-numbers language-sql"><code class="language-sql">list copy <span class="token keyword">of</span> <span class="token keyword">database</span><span class="token punctuation">;</span>list copy <span class="token keyword">of</span> controlfile<span class="token punctuation">;</span>list copy <span class="token keyword">of</span> <span class="token keyword">tablespace</span> users<span class="token punctuation">;</span>list copy <span class="token keyword">of</span> datafile n<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">;</span>list copy <span class="token keyword">of</span> archivelog <span class="token keyword">all</span><span class="token punctuation">;</span>list copy <span class="token keyword">of</span> archivelog <span class="token keyword">from</span> scn <span class="token number">10000</span><span class="token punctuation">;</span>list copy <span class="token keyword">of</span> archivelog until sequence <span class="token number">12</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol></li><li><ol start="7"><li>list backup of spfile;<blockquote><p>服务器参数文件</p></blockquote></li></ol></li><li><ol start="8"><li>list backup of controlfile;<blockquote><p>控制文件</p></blockquote></li></ol></li><li><ol start="9"><li>list backup of datafle n,n,n,n;<blockquote><p>数据文件</p></blockquote></li></ol></li><li><ol start="10"><li>list backup of tablespace tablespace_name;<blockquote><p>表空间对应的backup</p></blockquote></li></ol></li><li><ol start="11"><li>归档日志<pre class="line-numbers language-sql"><code class="language-sql">list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog {<span class="token keyword">all</span><span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> <span class="token operator">like</span><span class="token punctuation">,</span> logseq<span class="token punctuation">,</span> low<span class="token punctuation">,</span> scn<span class="token punctuation">,</span> sequence<span class="token punctuation">,</span> time<span class="token punctuation">,</span> until}<span class="token punctuation">;</span>list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog <span class="token keyword">all</span><span class="token punctuation">;</span>list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog until time <span class="token string">'sysdate-1'</span><span class="token punctuation">;</span>list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog <span class="token keyword">from</span> sequence <span class="token number">10</span><span class="token punctuation">;</span>list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog until sequence <span class="token number">10</span><span class="token punctuation">;</span>list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog <span class="token keyword">from</span> scn <span class="token number">10000</span><span class="token punctuation">;</span>list <span class="token keyword">backup</span> <span class="token keyword">of</span> archivelog until scn <span class="token number">200000</span><span class="token punctuation">;</span>list archivelog <span class="token keyword">from</span> scn <span class="token number">1000</span><span class="token punctuation">;</span>list archivelog until scn <span class="token number">2000</span><span class="token punctuation">;</span>list archivelog <span class="token keyword">from</span> sequence <span class="token number">10</span><span class="token punctuation">;</span>list archivelog until sequence <span class="token number">12</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="4-2-report常用命令"><a href="#4-2-report常用命令" class="headerlink" title="4.2 report常用命令"></a>4.2 report常用命令</h3><blockquote><p>report用于判断数据库当前可恢复状态、以及数据库已有备份的信息。</p></blockquote><ul><li><p>01.report schema</p><blockquote><p>报告数据库模式</p></blockquote></li><li><p>02.report obsolete;</p><blockquote><p>报告已丢弃的备份集(配置了保留策略)。</p></blockquote></li><li><p>03.report unrecoverable;</p><blockquote><p>报告当前数据库中不可恢复的数据文件(即没有这个数据文件的备份、或者该数据文件的备份已经过期)</p></blockquote></li><li><p>04.report need backup;</p><blockquote><p>报告需要备份的数据文件(根据条件不同)</p><pre class="line-numbers language-sql"><code class="language-sql">report need <span class="token keyword">backup</span> days<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--最近三天没有备份的数据文件(如果出问题的话，这些数据文件将需要最近3天的归档日志才能恢复)</span>report need <span class="token keyword">backup</span> incremental<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--需要多少个增量备份文件才能恢复的数据文件。(如果出问题，这些数据文件将需要3个增量备份才能恢复)</span>report need <span class="token keyword">backup</span> redundancy<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--报告出冗余次数小于3的数据文件</span><span class="token comment" spellcheck="true">--例如数据文件中包含2个数据文件system01.dbf和users01.dbf.</span><span class="token comment" spellcheck="true">--在3次或都3次以上备份中都包含system01.dbf这个数据文件，而users01.dbf则小于3次</span><span class="token comment" spellcheck="true">--那么，报告出来的数据文件就是users01.dbf</span><span class="token comment" spellcheck="true">--即，报告出数据库中冗余次数小于 n 的数据文件</span>report need <span class="token keyword">backup</span> recovery window <span class="token keyword">of</span> <span class="token number">2</span> days<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--报告出恢复需要2天归档日志的数据文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h3 id="4-3-backup常用命令"><a href="#4-3-backup常用命令" class="headerlink" title="4.3 backup常用命令"></a>4.3 backup常用命令</h3><h4 id="4-3-1-基本使用"><a href="#4-3-1-基本使用" class="headerlink" title="4.3.1 基本使用"></a>4.3.1 基本使用</h4><ul><li><p>01.设置备份标记</p></li><li><p>01.设置备份集大小(一次备份的所有结果为一个备份集，要注意备份集大小)</p></li><li><p>01.设置备份片大小(磁带或文件系统限制)</p></li><li><p>01.备份集的保存策略</p></li><li><p>01.重写configure exclude命令</p></li><li><p>01.检查数据库错误</p></li><li><p>01.跳过脱机，不可存取或只读文件</p></li></ul><ul><li><p>01.强制备份</p></li><li><p>01.基于上次备份时间备份数据文件</p></li><li><p>01.备份操作期间检查逻辑错误</p></li><li><p>01.生成备份副本</p></li><li><p>01.备份控制文件和参数文件</p></li><li><p>01.跳过脱机的，不可读取的或者只读的数据文件</p></li><li><p>01.数据库备份</p></li><li><p>01.表空间备份</p></li><li><p>01.数据文件备份</p></li><li><p>01.归档的重做日志备份</p></li><li><p>01.数据库，表空间和数据文件的映像副本</p></li><li><p>01.控制文件副本</p></li><li><p>01.Archivelog 映像副本</p></li><li><p>01.差异备份与增量备份</p></li></ul><h4 id="4-3-1-差异备份与增量备份"><a href="#4-3-1-差异备份与增量备份" class="headerlink" title="4.3.1 差异备份与增量备份"></a>4.3.1 差异备份与增量备份</h4><ul><li>块更改跟踪文件<blockquote><p>&emsp;&emsp;默认情况下，当执行增量备份时，发生任何更改的所有数据文件都将备份。 这可能使增量备份花费更长的时间，并且会增加增量备份的大小。 10g中RMAN 提供了只备份更改过的数据块的功能。 这就可以加快增量数据库备份的速度并减少其大小。 执行alter database enable block change tracking 命令可以启用块更改跟踪。<br>&emsp;&emsp;如果使用Oracle管理文件（OMF），Oracle 将会创建块更改跟踪文件。 如果没有使用OMF，则必须定义块更改跟踪文件的位置和名称。 如：<br>Alter database enable block change tracking using file ‘/oracle/backup/block.fil’;<br>&emsp;&emsp;如果跟踪文件已经存在，可以使用reuse参数：<br>Alter database enable block change tracking using file ‘/oracle/backup/block.fil’ reuse;<br>&emsp;&emsp;使用alter database block change tracking 命令可以禁用块更改跟踪。 块更改跟踪文件的大小通常预先分片且与数据库大小和重做日志线程的数量有关。 块更改跟踪文件的大小一般是数据库大小的1/30000。 块更改跟踪文件可能会以10MB为增量增长。 块更改跟踪文件的最小尺寸是每个数据文件320k，如果有许多数据文件，则块更改跟踪文件就会较大。 Oracle 会在块更改跟踪文件中存储足够的信息，从而允许最多8天的增量备份。 显而易见，如果增量备份超过8天，则将不使用块跟踪更改跟踪文件，并且无法利用块跟踪文件的有点。<br>&emsp;&emsp;可以通过检查v$block_change_tracking 视图来确定是否启用了块更改跟踪。 Status 指示了是否启用了块更改跟踪，filename 包含块更改跟踪文件的文件名。可以通过alter database rename file 命令来转移块更改跟踪文件。<br><code>`</code>sql<br>SQL&gt; select status,filename from v$block_change_tracking;<br>STATUS FILENAME</p></blockquote></li></ul><hr><p>ENABLED /oracle/BACKUP/BLOCK.FIL</p><pre><code>* 基本备份&gt;&amp;emsp;&amp;emsp;执行增量备份操作时，首先需要的是增量基本备份（incremental base backup）,以后所有的增量备份都基于这个基本备份。 每次执行数据库备份操作时，都可以通过backup 命令的incremental 参数来为备份指定一个增量级别标识符。 基本备份的增量级别为0，并且必须有基本备份才能够执行其他类型的增量备份操作。 如果没有生成基本备份就尝试执行增量备份操作，RMAN会自动执行基本备份操作。 示例：```sqlBackup incremental level=0 database;</code></pre><ul><li>差异备份<blockquote><p>&emsp;&emsp;差异备份是RMAN生成的增量备份的默认类型，对于差异备份来说，RMAN会备份自上次同级或者低级差异增量备份以来所发生变化的数据块</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">backup</span> incremental level<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li>累积备份<blockquote><p>&emsp;&emsp;累积备份可以使备份集备份前面所有级别的备份以及此次要备份的所有发生变化的数据块。 累积备份是一个可选的备份方法，并要求在backup 命令中使用cumulative 关键字。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">backup</span> incremental level <span class="token operator">=</span><span class="token number">2</span> cumulative <span class="token keyword">database</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li>增量备份选项<blockquote><p>&emsp;&emsp;Oracle 不仅允许执行数据库的增量备份，还允许执行表空间，数据文件以及数据库文件副本的增量备份操作。 控制文件，归档重做日志以及备份集都不能生成增量备份。 此外，还可以在执行增量备份操作时同时备份归档的重做日志。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Backup</span> incremental level<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">tablespace</span> users<span class="token punctuation">;</span><span class="token keyword">Backup</span> incremental level<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">tablespace</span> users<span class="token punctuation">;</span><span class="token keyword">Backup</span> incremental level<span class="token operator">=</span><span class="token number">0</span> datafile <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">Backup</span> incremental level<span class="token operator">=</span><span class="token number">1</span> datafile <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">Backup</span> incremental level<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">database</span> plus archivelog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li>增量备份更新备份<blockquote><p>RMAN 提供了增量备份更新备份。 这种备份避免了采用数据文件的完整映像副本进行备份的开销，并且具有与映像副本相同的恢复特性。 从某种意义上来说，这种备份类似与使用映像副本的增量备份。</p><pre class="line-numbers language-sql"><code class="language-sql">Run{Recover copy <span class="token keyword">of</span> <span class="token keyword">database</span> <span class="token keyword">with</span> tag <span class="token string">'Orcl'</span><span class="token punctuation">;</span><span class="token keyword">Backup</span> incremental level <span class="token number">1</span> <span class="token keyword">for</span> recover <span class="token keyword">of</span> copy <span class="token keyword">with</span> tag <span class="token string">'Orcl'</span> <span class="token keyword">database</span><span class="token punctuation">;</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;示例中的recover of copy database 命令并没有真正的恢复数据库，但它使RMAN将任何增量备份应用于与列出标记（Orcl）关联的数据文件副本。 第一次运行该命令时，它将没有任何效果，因为它没有任何可用的增量备份或数据文件副本。 这并不是很严重的问题，并且RMAN 将只显示一条警告消息。 第二次运行该命令时也没有任何效果，因为没有任何增量备份可用。<br>&emsp;&emsp;执行recover 命令后，就会产生一个增量备份，这个备份第一次运行时，它会创建一个基本备份（如果没有的话）。这实际上增量为1的备份。 第二次执行这个run代码块时，将通过backup 命令执行第一个增量备份。<br>&emsp;&emsp;一旦该命令运行了2次，第三次执行和后面的执行就能够将前面的增量备份应用与数据文件副本。 注意，recover 和backup命令中将标记赋予相同的名称非常重要。</p></blockquote></li></ul><h3 id="4-4-configure常用命令"><a href="#4-4-configure常用命令" class="headerlink" title="4.4 configure常用命令"></a>4.4 configure常用命令</h3><ul><li><ol><li>显示当前的配置信息<pre class="line-numbers language-sql"><code class="language-sql">rman<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">all</span><span class="token punctuation">;</span>rman 配置参数为:configure retention policy <span class="token keyword">to</span> redundancy <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure <span class="token keyword">backup</span> optimization <span class="token keyword">off</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure <span class="token keyword">default</span> device <span class="token keyword">type</span> <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure controlfile autobackup <span class="token keyword">off</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure controlfile autobackup format <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token string">'%f'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure device <span class="token keyword">type</span> <span class="token keyword">disk</span> parallelism <span class="token number">1</span> <span class="token keyword">backup</span> <span class="token keyword">type</span> <span class="token keyword">to</span> backupset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure datafile <span class="token keyword">backup</span> copies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure archivelog <span class="token keyword">backup</span> copies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure maxsetsize <span class="token keyword">to</span> unlimited<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure encryption <span class="token keyword">for</span> <span class="token keyword">database</span> <span class="token keyword">off</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure encryption <span class="token keyword">algorithm</span> <span class="token string">'aes128'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure archivelog deletion policy <span class="token keyword">to</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure <span class="token keyword">snapshot</span> controlfile name <span class="token keyword">to</span> <span class="token string">'/oracle/product/11.2.0/db_1/database/sncfitpuxdb.ora'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>configure retention policy <span class="token keyword">to</span> redundancy <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置redundancy配置需要保留几份备份文件，默认是<span class="token number">1</span>。也可以改变为其它非零的正整数值。configure <span class="token keyword">backup</span> optimization <span class="token keyword">off</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：设备备份优化打开，如果表空间是只读状态，那么在做备份的时候只是第一次会备份，以后不备份。有两个选项<span class="token keyword">off</span>关闭和<span class="token keyword">on</span>打开configure <span class="token keyword">default</span> device <span class="token keyword">type</span> <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置默认备份设备可以是sbt（磁带），<span class="token keyword">disk</span>（硬盘）；默认是硬盘configure controlfile autobackup <span class="token keyword">off</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># default</span>注释：配置在备份的时候是否将控制文件一并备份，两个选项<span class="token punctuation">,</span>默认是<span class="token keyword">off</span>不备份，也可以是<span class="token keyword">on</span>备份、。configure controlfile autobackupformat <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token string">'%f'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置control <span class="token keyword">file</span>自动备份的路径和文件格式configure device <span class="token keyword">type</span> <span class="token keyword">disk</span> parallelism1 <span class="token keyword">backup</span> <span class="token keyword">type</span> <span class="token keyword">to</span> backupset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置磁盘备份的类型，默认是备份集方式（backupset）或镜像拷贝也叫文件拷贝<span class="token punctuation">(</span>copy<span class="token punctuation">)</span>。镜像拷贝值适用于磁盘备份，磁带只支持备份集。一般用备份集更多，其效率会更高configure datafile backupcopies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置生成备份集的个数，默认是<span class="token number">1</span>；备份集内会包括（数据文件，控制文件，参数文件）configure archivelog backupcopies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置归档日志默认的备份路径configure maxsetsize <span class="token keyword">to</span> unlimited<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置单个备份集大小，缺省是不限制，我们可以配置成1g<span class="token operator">/</span>100m<span class="token operator">/</span>1024k <span class="token operator">or</span> otherconfigure encryption <span class="token keyword">for</span> <span class="token keyword">database</span> <span class="token keyword">off</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置备份数据加密，是10gr2推出来的新功能，设置为<span class="token keyword">on</span>后。可以<span class="token keyword">set</span> encryption <span class="token keyword">on</span> identifyed <span class="token keyword">by</span> youpassword only<span class="token punctuation">;</span>加密备份，还原的时候需要提供密码。configureencryption <span class="token keyword">algorithm</span> <span class="token string">'aes128'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：指定备份数据加密的类型。configure archivelogdeletion policy <span class="token keyword">to</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置归档日志在备份后自动删除configure <span class="token keyword">snapshot</span> controlfile name <span class="token keyword">to</span> <span class="token string">'/oracle/product/10.2.0/db_1/dbs/snapcf_itpuxdb.f'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># default</span>注释：配置控制文件快照，可以有效的提高控制文件的恢复性。查询rman设置中非默认值:sql<span class="token operator">></span> <span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token keyword">value</span> <span class="token keyword">from</span> v$rman_configuration<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>保存策略 (retention policy)<pre class="line-numbers language-sql"><code class="language-sql">configure retention policy <span class="token keyword">to</span> recovery window <span class="token keyword">of</span> <span class="token number">7</span> days<span class="token punctuation">;</span>configure retention policy <span class="token keyword">to</span> redundancy <span class="token number">5</span><span class="token punctuation">;</span>configure retention policy clear<span class="token punctuation">;</span>configure retention policy <span class="token keyword">to</span> none<span class="token punctuation">;</span>第一种recover window是保持所有足够的备份，可以将数据库系统恢复到最近七天内的任意时刻。任何超过最近七天的数据库备份将被标记为obsolete。第二种redundancy 是为了保持可以恢复的最新的<span class="token number">5</span>份数据库备份，任何超过最新<span class="token number">5</span>份的备份都将被标记为redundancy。它的默认值是<span class="token number">1</span>份。第三、四：none 可以把使备份保持策略失效，clear 将恢复默认的保持策略一般最安全的方法是采用第二种保持策略。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>备份优化 backup optimization<pre class="line-numbers language-sql"><code class="language-sql">configure <span class="token keyword">backup</span> optimization <span class="token keyword">on</span><span class="token punctuation">;</span>configure <span class="token keyword">backup</span> optimization <span class="token keyword">off</span><span class="token punctuation">;</span>configure <span class="token keyword">backup</span> optimization clear<span class="token punctuation">;</span>默认值为关闭，如果打开，rman将对备份的数据文件及归档等文件进行一种优化的算法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>默认设备 default device type<pre class="line-numbers language-sql"><code class="language-sql">configure <span class="token keyword">default</span> device <span class="token keyword">type</span> <span class="token keyword">to</span> <span class="token keyword">disk</span><span class="token punctuation">;</span>configure <span class="token keyword">default</span> device <span class="token keyword">type</span> <span class="token keyword">to</span> stb<span class="token punctuation">;</span>configure <span class="token keyword">default</span> device <span class="token keyword">type</span> clear<span class="token punctuation">;</span>是指定所有i<span class="token operator">/</span>o操作的设备类型是硬盘或者磁带，默认值是硬盘磁带的设置是configure <span class="token keyword">default</span> device <span class="token keyword">type</span> <span class="token keyword">to</span> sbt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>控制文件 controlfile<pre class="line-numbers language-sql"><code class="language-sql">configure controlfile autobackup <span class="token keyword">on</span><span class="token punctuation">;</span>configure controlfile autobackup format <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">to</span> <span class="token string">'/oracle/backup/conf_%F'</span><span class="token punctuation">;</span>configure controlfile autobackup clear<span class="token punctuation">;</span>configrue controlfile autobackup format <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> clear<span class="token punctuation">;</span>CONFIGURE <span class="token keyword">SNAPSHOT</span> CONTROLFILE NAME <span class="token keyword">TO</span> <span class="token string">'/oracle/backup/scontrofile.snp'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--是配置控制文件的快照文件的存放路径和文件名，这个快照文件是在备份期间产生的，用于控制文件的读一致性。</span>configure <span class="token keyword">snapshot</span> controlfile name clear<span class="token punctuation">;</span>强制数据库在备份文件或者执行改变数据库结构的命令之后将控制文件自动备份，默认值为关闭。这样可以避免控制文件和catalog丢失后，控制文件仍然可以恢复。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>并行数(通道数) device type disk|stb pallelism n;<pre class="line-numbers language-sql"><code class="language-sql">configure device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token operator">|</span>stb parallelism <span class="token number">2</span><span class="token punctuation">;</span>configure device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token operator">|</span>stb clear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--用于清除上面的信道配置</span>configure channel device <span class="token keyword">type</span> <span class="token keyword">disk</span> format <span class="token string">'/oracle/backup/rman_%u'</span><span class="token punctuation">;</span>configure channel device <span class="token keyword">type</span> <span class="token keyword">disk</span> maxpiecesize 100m<span class="token punctuation">;</span>configure channel device <span class="token keyword">type</span> <span class="token keyword">disk</span> rate 1200k<span class="token punctuation">;</span>configure channel <span class="token number">1</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> format <span class="token string">'/oracle/backup/rman_%u'</span><span class="token punctuation">;</span>configure channel <span class="token number">2</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> format <span class="token string">'/oracle/backup/rman_%u'</span><span class="token punctuation">;</span>configure channel <span class="token number">1</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> maxpiecesize 100m<span class="token punctuation">;</span>配置数据库设备类型的并行度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>生成备份副本 datafile|archivelog backup copies<pre class="line-numbers language-sql"><code class="language-sql">configure datafile <span class="token keyword">backup</span> copies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token operator">|</span>stb <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">;</span>configure archivelog <span class="token keyword">backup</span> copies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token operator">|</span>stb <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--是设置数据库的归档日志的存放设备类型</span>configure datafile<span class="token operator">|</span>archivelog <span class="token keyword">backup</span> copies <span class="token keyword">for</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token operator">|</span>stb clear<span class="token keyword">backup</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> <span class="token keyword">database</span> format <span class="token string">'/oracle/backup1/%u'</span><span class="token punctuation">,</span> <span class="token string">'/oracle/backup2/%u'</span><span class="token punctuation">,</span> <span class="token string">'/oracle/backup3/%u'</span><span class="token punctuation">;</span>是配置数据库的每次备份的copy数量，oracle的每一次备份都可以有多份完全相同的拷贝。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>排除选项 exclude<pre class="line-numbers language-sql"><code class="language-sql">configure exclude <span class="token keyword">for</span> <span class="token keyword">tablespace</span> USERS<span class="token punctuation">;</span>configure exclude <span class="token keyword">for</span> <span class="token keyword">tablespace</span> USERS clear<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><ol><li>备份集大小 maxsetsize<pre class="line-numbers language-sql"><code class="language-sql">configure maxsetsize <span class="token keyword">to</span> 1g<span class="token operator">|</span>1000m<span class="token operator">|</span>1000000k<span class="token operator">|</span>unlimited<span class="token punctuation">;</span>configure maxsetsize clear<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="4-5-set-命令"><a href="#4-5-set-命令" class="headerlink" title="4.5 set 命令"></a>4.5 set 命令</h3><blockquote><p>&emsp;&emsp;使用set 命令可以定义只应用于当前RMAN会话的设置。 set 命令的设置不是永久的，根据实际需求，可以采用两种方式来使用set 命令。</p><ul><li>在run 代码块外，我们可是执行下面的操作：<pre class="line-numbers language-sql"><code class="language-sql">（<span class="token number">1</span>）使用<span class="token keyword">set</span> echo 命令在消息日志中显示RMAN 命令。（<span class="token number">2</span>）使用<span class="token keyword">set</span> dbid 命令指定一个数据库的数据库标识符（<span class="token keyword">database</span> identifier： dbid）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></blockquote><ul><li>某些set 命令只能在run代码块的限定范围内使用，常见的有：<blockquote><p>（1）set newname 命令：用于执行表空间时间点恢复（TSPITR）或者数据库复制操作。 该命令允许指定新的数据库数据文件名。 将数据库移动到新的系统中并且文件系统名不同时，我们可以使用这个命令。使用set newname 命令时还需要使用switch 命令。<br>（2）set maxcorrupt for datafile: 使用该命令可以定义RMAN操作失败前锁允许的数据块讹误的最大数据。<br>（3）set archivelog destination: 使用该命令可以修改存储归档的重做日志的archive_log_dest_1 目标。<br>（4）set 命令和until 子句： 使用set命令和set 命令的until 子句可以定义数据库时间点恢复操作锁使用的具体时间点，SCN 或日志序列号。<br>（5）set backup copies命令： 使用该命令可以定义为备份集中的每个备份片应当创建的副本数。<br>（6）set command id: 使用该命令可以关联给定的服务器会话和给定的通道。<br>（7）set controlfile autoback format for device type: 使用该命令可以修改用于控制文件自动备份操作的默认格式。</p></blockquote></li></ul><blockquote><p>&emsp;&emsp;例如： 要执行一个为每个备份片创建两个副本的被操作，并且允许数据文件的最大讹误数为10. 脚本如下：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql">run{    <span class="token keyword">set</span> maxcorrupt <span class="token keyword">for</span> datafile <span class="token number">3</span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token keyword">backup</span> copies<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">backup</span> <span class="token keyword">database</span><span class="token punctuation">;</span>}<span class="token keyword">set</span> until time <span class="token string">"to_date('2016-6-28 17:04:00','yyyy-mm-dd hh24:mi:ss')"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-crosscheck命令"><a href="#4-5-crosscheck命令" class="headerlink" title="4.5 crosscheck命令"></a>4.5 crosscheck命令</h3><ul><li>交叉效验RMAN 备份<blockquote><p>&emsp;&emsp;在RMAN目录和物理备份目的地不同步的情况下，我们可以使用crosscheck命令来效验控制文件或恢复目录中的RMAN信息是否与备份介质上的实际物理备份集片相同。<br>&emsp;&emsp;使用crosscheck 命令时，我们关心每个备份集或者副本的状态。 如果使用控制文件，用于备份集片的v$backup_set 视图和用于副本的v$databfile_copy 视图中的status列列出了每个备份集或副本的状态码；如果使用恢复目录，则在备份集片的RC_BACKUP_set和副本的RC_DATAFILE_COPY中列出了每个备份集或副本的状态码。 在不同的备份状态码中，我们关心以下两种状态：<br>&emsp;&emsp;（1）A（Available:可用）：RMAN 认定该项存在于备份介质上<br>&emsp;&emsp;（2）X（Expired:不可用）：这个备份集片或副本上存储的RMAN目录（即控制文件或恢复目录）中，但是并没有物理存在于备份介质上。<br>&emsp;&emsp;使用crosscheck 命令的目的是将RMAN目录的状态设置为AVAILABLE或者EXPIRED。 执行crosscheck时，RMAN检查目录中列出的每个备份集或副本并且判断他们是否存在与备份介质上。 如果备份集或副本不存在与备份介质上，它就会被标记为expired, 并且不能用于任何还原操作；如果备份集或副本存在与备份介质上，它就会维持available状态。 如果以前被标记为expired 的备份集或副本再次存在于备份介质上，crosscheck 命令就会将它标记回available。</p><pre class="line-numbers language-sql"><code class="language-sql">crosscheck <span class="token keyword">backup</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;可以交叉效验数据文件备份，表空间备份，控制文件备份以及服务器参数文件备份。此外，可以通过识别与备份相关联的标记来选择要交叉效验和特定的备份。 基于使用的设备或者基于一个时间周期，我们甚至可以交叉效验所有的备份。 如：</p><pre class="line-numbers language-sql"><code class="language-sql">crosscheck <span class="token keyword">backup</span> <span class="token keyword">of</span> datafile <span class="token number">1</span><span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> <span class="token keyword">of</span> <span class="token keyword">tablespace</span> users<span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> <span class="token keyword">of</span> controlfile<span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> <span class="token keyword">of</span> spfile<span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> tag<span class="token operator">=</span><span class="token string">'TEST'</span><span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> completed <span class="token keyword">after</span> <span class="token string">'sysdate-2'</span><span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> completed <span class="token operator">between</span> <span class="token string">'sysdate-5'</span> <span class="token operator">and</span> <span class="token string">'sysdate-2'</span><span class="token punctuation">;</span>crosscheck <span class="token keyword">backup</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li>交叉验证归档日志示例：<pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> crosscheck archivelog <span class="token keyword">all</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>&emsp;&emsp;我们可以基于一个号码或标准（包括时间，具体的或指定范围的SCN或日志序列号）来交叉效验归档的重做日志备份，甚至还可以使用like参数与通配符来交叉效验特定的归档日志备份。 如：</p><pre class="line-numbers language-sql"><code class="language-sql">crosscheck archivelog <span class="token operator">like</span> <span class="token string">'ARC001.log'</span><span class="token punctuation">;</span>crosscheck archivelog <span class="token string">'/oracle/arch/itpuxdb/archivelog/2016_08_02/o1_mf_1_22_cszw2d4g_.arc'</span><span class="token punctuation">;</span>crosscheck archivelog <span class="token operator">like</span> <span class="token string">'%ARC00012.LOG'</span><span class="token punctuation">;</span>crosscheck archivelog <span class="token keyword">from</span> time <span class="token string">"to_date('2016-08-02','yyyy-mm-dd')"</span><span class="token punctuation">;</span>crosscheck archivelog until time <span class="token string">"to_date('2016-08-02','yyyy-mm-dd')"</span><span class="token punctuation">;</span>crosscheck archivelog <span class="token keyword">from</span> sequence <span class="token number">12</span><span class="token punctuation">;</span>crosscheck archivelog until sequence <span class="token number">522</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--使用crosscheck copy命令还可以交叉效验副本。 包括数据文件副本，控制文件副本，归档重做日志副本以及磁盘上的归档的重做日志。 如：</span>crosscheck copy <span class="token keyword">of</span> datafile <span class="token number">5</span><span class="token punctuation">;</span>crosscheck datafilecopy '<span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>itpuxdb<span class="token operator">/</span>rman_tbs<span class="token number">.dbf</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h3 id="4-6-RMAN-备份的验证validate"><a href="#4-6-RMAN-备份的验证validate" class="headerlink" title="4.6 RMAN 备份的验证validate"></a>4.6 RMAN 备份的验证validate</h3><blockquote><p>&emsp;&emsp;RMAN 提供的validate命令允许查看给定的备份集和进行验证以确保这个备份集能够被还原。注意，validate 命令必须要获得主键ID。 这个可以用list backup summary命令获取</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> list <span class="token keyword">backup</span> summary<span class="token punctuation">;</span>RMAN<span class="token operator">></span> validate backupset <span class="token number">206</span><span class="token punctuation">;</span>RMAN<span class="token operator">></span> validate backupset <span class="token number">206</span> <span class="token keyword">check</span> logical<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-7-change-命令"><a href="#4-7-change-命令" class="headerlink" title="4.7 change 命令"></a>4.7 change 命令</h3><blockquote><p>&emsp;&emsp;change 命令允许用户修改备份的状态。我们可能会遇到备份介质设备在某个时间爱你段中无效的情况（如突然断电）。这时，我们就可以使用change 命令来指示这个设备上的备份是不可用的。<br>&emsp;&emsp;解决硬件故障和修复磁盘后，额可以再次执行change 命令，将备份改为可用的状态。也可以将备份修改为不可用的状态。在还原和恢复操作期间，不会考虑哪些不可用的备份，但在执行delete expired命令期间这些备份记录不会被删除。 相关示例：</p><pre class="line-numbers language-sql"><code class="language-sql">change <span class="token keyword">backup</span> <span class="token keyword">of</span> <span class="token keyword">database</span> tag<span class="token operator">=</span><span class="token string">'TEST'</span> unavailable<span class="token punctuation">;</span>change <span class="token keyword">backup</span> <span class="token keyword">of</span> <span class="token keyword">database</span> <span class="token operator">like</span> <span class="token string">'%TEST%'</span> unavailable<span class="token punctuation">;</span>change backupset <span class="token number">206</span> unavailable<span class="token punctuation">;</span>change backupset <span class="token number">206</span> available<span class="token punctuation">;</span>change archivelog <span class="token string">'/archivelog/arc0001.log'</span> unavailable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;可以使用change命令修改归档的重做日志备份的状态。如：将已经备份了指定次数的所有归档的重做日志备份修改为不可用的状态，也可以修改特定设备上的所有备份的状态。</p><pre class="line-numbers language-sql"><code class="language-sql">change archivelog <span class="token keyword">all</span> backed up <span class="token number">5</span> times <span class="token keyword">to</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> unavailable<span class="token punctuation">;</span>change <span class="token keyword">backup</span> <span class="token keyword">of</span> <span class="token keyword">database</span> device <span class="token keyword">type</span> <span class="token keyword">disk</span> unavailable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;可是使用带有delete 参数的change 命令删除备份集，即在备份介质上的物理删除，并且从控制文件和恢复目录中删除。 前提是要知道备份集关键字，可以使用list backup 或 list copy 命令查看。</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> list <span class="token keyword">backup</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除备份集1：</p><pre class="line-numbers language-sql"><code class="language-sql">RMAN<span class="token operator">></span> change backupset <span class="token number">206</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用通道 ORA_DISK_1<br><code>`</code>sql<br>备份片段列表<br>BP 关键字 BS 关键字 Pc# Cp# 状态 设备类型段名称</li></ul></blockquote><hr><p>1 1 1 1 AVAILABLE DISK /oracle/BACKUP/ITPUX_01LI7BSC_1_1.BAK<br>是否确定要删除以上对象 (输入 YES 或 NO)? yes<br>已删除备份片段<br>备份片段句柄=/oracle/BACKUP/ITPUX_01LI7BSC_1_1.BAK RECID=1 STAMP=723758988<br>1 对象已删除<br>在上面的这个示例中，我们删除了备份集和它关联的备份片。 也可以删除一些备份片。 通过 list backup命令我们可以看到备份片的名称，比如：段名:/oracle/BACKUP/ITPUX_01LI7BSC_1_1.BAK。<br>我们也可以查看备份片的号码，用catalog 用户连接数据库后，查看rc_backup_piece 表，SQL如下：<br>conn rman/rman<br>SQL&gt; select bs_key,bp_key,piece#,handle from rc_backup_piece;<br>BS_KEY BP_KEY PIECE# HANDLE</p><hr><p>52 55 1 /BACKUP/ORCL_02LI47UA_1_1<br>53 56 1 /BACKUP/ORCL_03LI47UF_1_1<br>75 82 1 /BACKUP/ORCL_04LI4816_1_1<br>删除备份片，我们可以用BP_KEY，也可以直接用段名（handle）,如：<br>RMAN&gt; change backuppiece ‘/oracle/BACKUP/ITPUX_02LI7BSK_1_1.BAK’ delete;<br>使用通道 ORA_DISK_1<br>备份片段列表<br>BP 关键字 BS 关键字 Pc# Cp# 状态 设备类型段名称</p><hr><p>2 2 1 1 AVAILABLE DISK /oracle/BACKUP/ITPUX_02LI7BSK_1_1.BAK<br>是否确定要删除以上对象 (输入 YES 或 NO)? yes<br>已删除备份片段<br>备份片段句柄=/oracle/BACKUP/ITPUX_02LI7BSK_1_1.BAK RECID=2<br>STAMP=723758997<br>1 对象已删除<br>使用备份集片，如：<br>change backuppiece 622 delete;<br>change archivelog until logseq=20 delete;<br>最后，可以使用change backuppiece uncataog命令从目录中删除备份集片。 如果删除最后剩余的备份集片，那么它也将删除备份集记录。如：<br>change backuppiece ‘/oracle/BACKUP/ITPUX_02LI7BSK_1_1.BAK’ uncatalog;</p><pre><code>### 4.8 delete 命令&gt;&amp;emsp;&amp;emsp;备份集不是永远存在的。我们可以使用保存策略标记备份有效性和生存期的结束。但是，备份策略的实施不会从RMAN目录中删除备份，而只是将这些备份标记为丢弃状态。&gt;&amp;emsp;&amp;emsp;delete 命令对备份和副本的影响很大。通过delete命令，可以删除基于保存标准被标记为丢弃的任何备份，还可以将恢复目录或控制文件中的备份从expired状态变为* deleted状态```sqldelete expired;delete obsolete;</code></pre><blockquote><p>&emsp;&emsp;执行delete命令时，RMAN会请求用户确认这个删除命令，如果确认了这个删除命令，RMAN 就会完成delete操作。<br>&emsp;&emsp;注意： 如果一个备份被标记为deleted 状态，就不能恢复这个备份。 如果该备份物理可用，我们仍然可以使用dbms_backup_restore过程来恢复这个备份。</p></blockquote><h3 id="4-9-restore命令"><a href="#4-9-restore命令" class="headerlink" title="4.9 restore命令"></a>4.9 restore命令</h3><blockquote><p>&emsp;&emsp;主要功能是从RMAN备份中还原文件，为恢复做准备。<br>使用restore 命令时，该命令会在没有认识提示的情况下重写已经存在的任何文件，除非使用set newname命令。<br><code>`</code>sql<br>set newname for datafile ‘/oracle/app/oradata/itpuxdb/itpux01.dbf’ to ‘E:/app/Administrator/oradata/orcl’;<br>restore database;</p></blockquote><p>restore controlfile from autobackup;<br>restore controlfile to ‘/backup/‘ from autobackup;<br>restore controlfile to ‘/backup’;<br>restore controlfile from autobackup until time “to_date(‘2016-6-27 13:25:00’,’yyyy-mm-dd hh24:mi:ss’)”;<br>restore controlfile from autobackup maxseq 200 maxdays 100;<br>restore spfile to pfile ‘/oracle/backup/spfile.restore’;<br>restore spfile to ‘/oracle/backup/spfile.restore’ from autobackup;<br>restore spfile from autobackup;<br>restore spfile from ‘/oracle/backup/c-1247395743-20160627-00’;<br>restore tablespace tablespace_name ;<br>restore datafile 5;<br>restore datafile ‘/oracle/app/oradata/itpuxdb/USERS01.DBF’;<br>restore database until time “to_date(‘2016-6-28 17:04:00’,’yyyy-mm-dd hh24:mi:ss’)”;<br>restore database until SCN 1000; –注意： 该示例可以将数据库还原到SCN 1000，但是不会包含SCN.<br>restore database until sequence 100 thread 1;</p><p>restore archivelog all;<br>restore archivelog from logseq=20 thread=1;<br>restore archivelog from logseq=20 until logseq=30 thread=1;</p><p>run<br>{<br>set archivelog destination to “d:/arch”;<br>restore archivelog all;<br>}</p><p>restore database check readonly;<br>restore (datafile 5) from datafilecopy</p><pre><code>### 4.10 recover命令&gt;&amp;emsp;&amp;emsp;recover 命令用于恢复数据库。该命令可以执行数据库的完全恢复或者时间点恢复。 Recover 命令确定需要哪些归档的重做日志，并且析取和应用他们。 一旦完成重做的应用，我们就只需要使用alter database open命令打开数据库即可。```sqlrecover databaserecover database noredo; -- 如果联机日志存在，可以用recover database代替recover tablespace tablespace_name ;recover datafile 3;recover datafile &#39;/oracle/app/oradata/itpuxdb/USERS01.DBF&#39;;set until time &quot;to_date(&#39;2016-07-05 14:02:00&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;)&quot;;restore database;recover database;alter database open resetlogs;recover database until time &quot;to_date(&#39;2016-07-05 14:02:00&#39;,&#39;yyyy-mm-dd hh24:mi:ss&#39;)&quot;;recover database until SCN 1000;recover database until sequence 100 thread 1;</code></pre><h3 id="4-10-Switch-命令"><a href="#4-10-Switch-命令" class="headerlink" title="4.10 Switch 命令"></a>4.10 Switch 命令</h3><blockquote><p>Switch 命令可以修改数据库控制文件中数据文件的位置，以反映Oracle数据库文件新的位置。</p><pre class="line-numbers language-sql"><code class="language-sql">Switch datafile <span class="token keyword">all</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 修改控制文件中数据文件位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="4-10-blockrecover"><a href="#4-10-blockrecover" class="headerlink" title="4.10 blockrecover"></a>4.10 blockrecover</h3><blockquote><p>一般出现数据块错误时，都会有错误消息：<br>ORA-01578: ORACLE data block corrupted (file #18,block #88)<br>如果没有BMR时，我们必须从一个备份中恢复这个数据文件，在恢复过程中，用户不能使用该数据块文件中的所有数据。<br>用BMR恢复就很简单，只需要执行blockrecover命令即可：</p><pre class="line-numbers language-sql"><code class="language-sql">blockrecover datafile <span class="token number">1</span> block <span class="token number">88</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有必要，可以同时恢复多个数据文件的多个数据块。如：</p><pre class="line-numbers language-sql"><code class="language-sql">blockrecover datafile <span class="token number">18</span> block <span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">;</span>blcokrecover datafile <span class="token number">18</span> block <span class="token number">88</span> datafile <span class="token number">19</span> blcok <span class="token number">188</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;查询v$database_block_corruption视图可以查看讹误数据块的详细信息。 如下所示，使用具有corruption list restore 参数的blockrecover命令可以方便地修正v$database_block_corruption 视图中的讹误数据块。<br>&emsp;&emsp;blockrecover corruption list restore until time ‘SYSDATE-5’;<br>这条命令将还原讹误列表中最近5天的所有讹误数据块。 在上面的命令中，还可以使用until time 和 until sequence.</p></blockquote><h3 id="4-10convert命令"><a href="#4-10convert命令" class="headerlink" title="4.10convert命令"></a>4.10convert命令</h3><blockquote><p>&emsp;&emsp; Oracle 10g R2以后支持手工跨平台移动数据库，即使这些平台具有不同的尾数格式（endian format）。 尾数格式与字节排序有关，它有两种不同的格式，即大尾数和小尾数。 如果在不同尾数字节格式的平台之间移动数据库，就需要手工操作，并且使用RMAN的convert datafile 或者 convert tablespace命令来将传送的数据文件转换为正确的尾数格式。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">convert</span> <span class="token keyword">tablespace</span> ITPUX <span class="token keyword">to</span> platform<span class="token operator">=</span><span class="token string">'AIX-Based Systems (64-bit)'</span>db_file_name_convert<span class="token operator">=</span><span class="token string">'/oracle/app/oradata/itpux'</span><span class="token punctuation">,</span><span class="token string">'/oracle/itpux'</span><span class="token punctuation">;</span><span class="token keyword">convert</span> datafile <span class="token string">'/oracle/app/oradata/itpux/itpux01.DBF'</span> <span class="token keyword">from</span> platform<span class="token string">'AIX-Based Systems (64-bit)'</span> db_file_name_convert <span class="token string">'/oracle/app/oradata/itpux'</span><span class="token punctuation">,</span><span class="token string">'/oracle/app/itpux'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> RMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Rman 备份2</title>
      <link href="/oracle/oracle-rman-bei-fen-2/"/>
      <url>/oracle/oracle-rman-bei-fen-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-Rman-的备份-（案列）"><a href="#Oracle-Rman-的备份-（案列）" class="headerlink" title="Oracle Rman 的备份 （案列）"></a>Oracle Rman 的备份 （案列）</h1><p><a href="https://docs.oracle.com/cd/E11882_01/index.htm" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a></p><h2 id="1-如何设计一个TB级数据库的RMAN备份策略"><a href="#1-如何设计一个TB级数据库的RMAN备份策略" class="headerlink" title="1.如何设计一个TB级数据库的RMAN备份策略"></a>1.如何设计一个TB级数据库的RMAN备份策略</h2><h3 id="1-1-TB以下"><a href="#1-1-TB以下" class="headerlink" title="1.1 TB以下"></a>1.1 TB以下</h3><ul><li>用ORACLE即可实现（保存在磁盘上，5TB），也可以选择第三方备份软件 集中管理：</li></ul><blockquote><p>1）RMAN全备：每周，每天；开归档模式<br>2）逻辑全导出：每周<br>3）归档备份（第三方管理）</p></blockquote><h3 id="1-2-TB以下"><a href="#1-2-TB以下" class="headerlink" title="1.2 TB以下"></a>1.2 TB以下</h3><ul><li>用ORACLE+结合第三方软件（集中管理，带库，虚拟带库，大的备份存储，10TB）：</li></ul><blockquote><p>1）RMAN全备：每周，开归档模式<br>2）归档备份：每天<br>3）逻辑导出：一个月只导一次结构就行了，或每天导一些重要的表。</p></blockquote><h3 id="1-3-2TB以上（集中管理，虚拟带库，第三方备份介质，几十TB，压缩功能，重复删除）："><a href="#1-3-2TB以上（集中管理，虚拟带库，第三方备份介质，几十TB，压缩功能，重复删除）：" class="headerlink" title="1.3 2TB以上（集中管理，虚拟带库，第三方备份介质，几十TB，压缩功能，重复删除）："></a>1.3 2TB以上（集中管理，虚拟带库，第三方备份介质，几十TB，压缩功能，重复删除）：</h3><blockquote><p>1）RMAN全备：每周，开归档模式；每个月一次加每周增量。<br>2）归档备份：每天<br>3）逻辑导出：一个月只导一次结构就行了，或每天导一些重要的表。</p></blockquote><h3 id="1-4-备份案列"><a href="#1-4-备份案列" class="headerlink" title="1.4 备份案列"></a>1.4 备份案列</h3><ul><li>环境</li></ul><blockquote><p>ORACLE RMAN+存储备份（1TB）<br>数据库1TB，每天的归档量50GB</p></blockquote><ul><li>备份策略</li></ul><blockquote><p>每周5,20:00全备，保留2份。5TB<br>归档保留10天。 1TB<br>恢复，全备+归档。<br>逻辑全导出：每周 2TB</p></blockquote><ul><li>备份脚本 rman_full_orcl.sh</li></ul><pre class="line-numbers language-sql"><code class="language-sql">rman target <span class="token operator">/</span> catalog rman<span class="token operator">/</span>rman<span class="token variable">@rman</span> msglog <span class="token string">'/u01/backup/logs/rman_full_itpux.log'</span> <span class="token operator">&lt;&lt;</span> EOFrun {    CONFIGURE RETENTION POLICY <span class="token keyword">TO</span> REDUNDANCY <span class="token number">2</span><span class="token punctuation">;</span>    allocate channel <span class="token number">d1</span> <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token punctuation">;</span>    allocate channel <span class="token number">d2</span> <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token punctuation">;</span>    setlimit channel <span class="token number">d1</span> kbytes <span class="token number">102428750</span> maxopenfiles <span class="token number">32</span> readrate <span class="token number">200</span><span class="token punctuation">;</span>    setlimit channel <span class="token number">d2</span> kbytes <span class="token number">102428750</span> maxopenfiles <span class="token number">32</span> readrate <span class="token number">200</span><span class="token punctuation">;</span>    sql <span class="token string">'alter system archive log current'</span><span class="token punctuation">;</span>    <span class="token keyword">backup</span>        incremental level <span class="token number">0</span>        skip inaccessible        tag itpux_level0        filesperset <span class="token number">3</span>        format '<span class="token operator">/</span>u01<span class="token comment" spellcheck="true">//backup/datafile/orcl_rman_full_%s_%p_%t'</span>        <span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">release</span> channel <span class="token number">d1</span><span class="token punctuation">;</span>    <span class="token keyword">release</span> channel <span class="token number">d2</span><span class="token punctuation">;</span>    ALLOCATE CHANNEL <span class="token number">d3</span> <span class="token keyword">TYPE</span> <span class="token keyword">disk</span><span class="token punctuation">;</span>        <span class="token keyword">BACKUP</span>            <span class="token comment" spellcheck="true"># recommended format</span>            FORMAT '<span class="token operator">/</span>u01<span class="token comment" spellcheck="true">//backup/orcl_rman_cntrl_%s_%p_%t'</span>            <span class="token keyword">CURRENT</span> CONTROLFILE<span class="token punctuation">;</span>    <span class="token keyword">RELEASE</span> CHANNEL <span class="token number">d3</span><span class="token punctuation">;</span>    ALLOCATE CHANNEL <span class="token number">d4</span> <span class="token keyword">TYPE</span> <span class="token keyword">DISK</span><span class="token punctuation">;</span>        copy <span class="token keyword">current</span> controlfile <span class="token keyword">to</span> '<span class="token operator">/</span>u01<span class="token comment" spellcheck="true">//backup/datafile/control_itpux.bak';</span>    <span class="token keyword">RELEASE</span> CHANNEL <span class="token number">d4</span><span class="token punctuation">;</span>}ALLOCATE CHANNEL <span class="token keyword">FOR</span> MAINTENANCE DEVICE <span class="token keyword">TYPE</span> <span class="token keyword">DISK</span><span class="token punctuation">;</span>run{    report obsolete<span class="token punctuation">;</span>    <span class="token keyword">DELETE</span> noprompt EXPIRED <span class="token keyword">BACKUP</span><span class="token punctuation">;</span>    <span class="token keyword">DELETE</span> noprompt EXPIRED COPY<span class="token punctuation">;</span>    <span class="token keyword">delete</span> noprompt obsolete device <span class="token keyword">type</span> <span class="token keyword">disk</span><span class="token punctuation">;</span>}<span class="token keyword">exit</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除归档 rman_delarch_orcl.sh</li></ul><pre class="line-numbers language-sql"><code class="language-sql">rman target <span class="token operator">/</span> catalog rman<span class="token operator">/</span>rman<span class="token variable">@rman</span> msglog <span class="token string">'/u01/backup/logs/rman_delarch_itpux.log'</span> <span class="token operator">&lt;&lt;</span>EOFrun{    crosscheck archivelog <span class="token keyword">all</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> noprompt archivelog until time <span class="token string">"sysdate-7"</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> noprompt expired archivelog <span class="token keyword">all</span><span class="token punctuation">;</span>}<span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置crontab</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">00</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> su <span class="token operator">-</span> oracle <span class="token operator">-</span><span class="token number">c</span> <span class="token operator">/</span>u01<span class="token operator">/</span><span class="token keyword">backup</span><span class="token operator">/</span>scripts<span class="token operator">/</span>rman_delarch_orcl<span class="token punctuation">.</span>sh<span class="token number">00</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">5</span> su <span class="token operator">-</span> oracle <span class="token operator">-</span><span class="token number">c</span> <span class="token operator">/</span>u01<span class="token operator">/</span><span class="token keyword">backup</span><span class="token operator">/</span>scripts<span class="token operator">/</span>rman_full_orcl<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-在非归档模式的RMAN备份案例"><a href="#2-在非归档模式的RMAN备份案例" class="headerlink" title="2.在非归档模式的RMAN备份案例"></a>2.在非归档模式的RMAN备份案例</h2><blockquote><p>&emsp;&emsp;备份分为一致性备份和不完全性备份，也就是我们所说的归档模式与非归档模式的备份.创建非归档备份可以是在非归档模式下创建，并且数据库必须处于mount状态下，而且恢复的时候值能恢复到最后一次备份的状态。也就说从备份到发生故障的这段时间都将丢失</p></blockquote><ul><li>1.1. 检查归档状态</li></ul><pre class="line-numbers language-sql"><code class="language-sql">archive log list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>1.2 将数据库启动到mount状态</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">shutdown</span> immediatestartup mount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>1.3 执行备份</li></ul><pre class="line-numbers language-sql"><code class="language-sql">rman target <span class="token operator">/</span><span class="token keyword">backup</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>2.1 非归档模式备份</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span>startup mount<span class="token punctuation">;</span>rman target <span class="token operator">/</span><span class="token keyword">backup</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.1 归档模式</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">open</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-在归档模式的RMAN备份与恢复案例-丢失所有文件"><a href="#3-在归档模式的RMAN备份与恢复案例-丢失所有文件" class="headerlink" title="3.在归档模式的RMAN备份与恢复案例-丢失所有文件"></a>3.在归档模式的RMAN备份与恢复案例-丢失所有文件</h2><blockquote><p> &emsp;&emsp;如果要创建正式库的备份，一般不建议用非归档模式备份，也不建议用很简单的命令来完成。而是更多的采用脚本实现归档模式备份，这样将可通过backup+archive log+redo有效的将数据恢复到最近一次改变的状态，可以达到数据的丢失最小化。</p></blockquote><ul><li><p>创建归档模式备份</p><blockquote><p>&emsp;&emsp; 创建归档模式备份数据库必须处于归档(archivelog)模式，因为归档模式备份的数据库文件和控制文件的SCN号可能会不一致。<br>并且可以在数据库打开并不影响业务的情况下完成数据的备份工作；那么这样的备份将是归档模式的备份，那么如果要恢复可以通过backup+archive log+redo来恢复到最近一次日志切换时候的数据，而不是最后一次备份时候的数据。</p></blockquote></li><li><p>寻找dbid</p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.可以在查看数据库警告日志</span>vim <span class="token operator">/</span>u01<span class="token operator">/</span>app<span class="token operator">/</span>oracle<span class="token operator">/</span>diag<span class="token operator">/</span>rdbms<span class="token operator">/</span>orcl<span class="token operator">/</span>orcl<span class="token operator">/</span>trace<span class="token operator">/</span>alert_orcl<span class="token punctuation">.</span>log<span class="token comment" spellcheck="true">--2.在备份的控制文件中查找</span><span class="token comment" spellcheck="true">--3.用BBED在备份的文件中查找</span><span class="token comment" spellcheck="true">--4.在备份日志中查找 </span><span class="token comment" spellcheck="true">--5.配置控制文件强制启动数据库</span><span class="token comment" spellcheck="true">--5.1 添加一个参数文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-RMAN恢复案例-丢失单个数据文件如何恢复"><a href="#4-RMAN恢复案例-丢失单个数据文件如何恢复" class="headerlink" title="4.RMAN恢复案例-丢失单个数据文件如何恢复"></a>4.RMAN恢复案例-丢失单个数据文件如何恢复</h2><h2 id="5-RMAN恢复案例-丢失整个数据表空间如何恢复"><a href="#5-RMAN恢复案例-丢失整个数据表空间如何恢复" class="headerlink" title="5.RMAN恢复案例-丢失整个数据表空间如何恢复"></a>5.RMAN恢复案例-丢失整个数据表空间如何恢复</h2><h2 id="6-RMAN恢复案例-丢失SYSTEM表空间如何恢复"><a href="#6-RMAN恢复案例-丢失SYSTEM表空间如何恢复" class="headerlink" title="6.RMAN恢复案例-丢失SYSTEM表空间如何恢复"></a>6.RMAN恢复案例-丢失SYSTEM表空间如何恢复</h2><h2 id="7-RMAN恢复案例-丢失控制文件如何恢复"><a href="#7-RMAN恢复案例-丢失控制文件如何恢复" class="headerlink" title="7.RMAN恢复案例-丢失控制文件如何恢复"></a>7.RMAN恢复案例-丢失控制文件如何恢复</h2><h2 id="8-RMAN恢复案例-丢失参数文件如何恢复"><a href="#8-RMAN恢复案例-丢失参数文件如何恢复" class="headerlink" title="8.RMAN恢复案例-丢失参数文件如何恢复"></a>8.RMAN恢复案例-丢失参数文件如何恢复</h2><h2 id="9-RMAN恢复案例-丢失重做日志文件如何恢复"><a href="#9-RMAN恢复案例-丢失重做日志文件如何恢复" class="headerlink" title="9.RMAN恢复案例-丢失重做日志文件如何恢复"></a>9.RMAN恢复案例-丢失重做日志文件如何恢复</h2><h2 id="10-RMAN恢复案例-存储损坏数据丢失如何恢复"><a href="#10-RMAN恢复案例-存储损坏数据丢失如何恢复" class="headerlink" title="10.RMAN恢复案例-存储损坏数据丢失如何恢复"></a>10.RMAN恢复案例-存储损坏数据丢失如何恢复</h2><h2 id="11-RMAN恢复案例-不完全恢复"><a href="#11-RMAN恢复案例-不完全恢复" class="headerlink" title="11.RMAN恢复案例-不完全恢复"></a>11.RMAN恢复案例-不完全恢复</h2><h2 id="12-RMAN基于时间点-time-的不完全恢复"><a href="#12-RMAN基于时间点-time-的不完全恢复" class="headerlink" title="12.RMAN基于时间点(time)的不完全恢复"></a>12.RMAN基于时间点(time)的不完全恢复</h2><h2 id="13-RMAN基于系统改变号-scn-的不完全恢复"><a href="#13-RMAN基于系统改变号-scn-的不完全恢复" class="headerlink" title="13.RMAN基于系统改变号(scn)的不完全恢复"></a>13.RMAN基于系统改变号(scn)的不完全恢复</h2><h2 id="14-RMAN基于部分数据文件与部分归档丢失的cancel不完全恢复"><a href="#14-RMAN基于部分数据文件与部分归档丢失的cancel不完全恢复" class="headerlink" title="14.RMAN基于部分数据文件与部分归档丢失的cancel不完全恢复"></a>14.RMAN基于部分数据文件与部分归档丢失的cancel不完全恢复</h2><h2 id="15-RMAN基于当前重做日志丢失的cancel不完全恢复"><a href="#15-RMAN基于当前重做日志丢失的cancel不完全恢复" class="headerlink" title="15.RMAN基于当前重做日志丢失的cancel不完全恢复"></a>15.RMAN基于当前重做日志丢失的cancel不完全恢复</h2><h2 id="16-RMAN基于备份控制文件不完全恢复"><a href="#16-RMAN基于备份控制文件不完全恢复" class="headerlink" title="16.RMAN基于备份控制文件不完全恢复"></a>16.RMAN基于备份控制文件不完全恢复</h2>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> RMAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle SQL之常用函数</title>
      <link href="/oracle/oracle-sql-zhi-chang-yong-han-shu/"/>
      <url>/oracle/oracle-sql-zhi-chang-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="OracleSQL语言之常用函数"><a href="#OracleSQL语言之常用函数" class="headerlink" title="OracleSQL语言之常用函数"></a>OracleSQL语言之常用函数</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><a href="https://docs.oracle.com/cd/E11882_01/index.htm" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a> </p><h2 id="1-聚合函数-数据统计"><a href="#1-聚合函数-数据统计" class="headerlink" title="1. 聚合函数-数据统计"></a>1. 聚合函数-数据统计</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.max 取列和表达式的最大值</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span> <span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.min 取列和表达式的最小值</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span> <span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.avg 取列和表达式的平均值</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span> <span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.sum 求列和表达式的总和</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span> <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span> salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">SUM</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--05.count 求行数总和</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> manager_id <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> manager_id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--06.other</span><span class="token comment" spellcheck="true">--stddev 标准差,variance 协方差，median 求中位数</span><span class="token keyword">SELECT</span> STDDEV <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> VARIANCE <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> MEDIAN <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-分组函数-使用group-by-与having"><a href="#2-分组函数-使用group-by-与having" class="headerlink" title="2. 分组函数-使用group by 与having"></a>2. 分组函数-使用group by 与having</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">01</span><span class="token punctuation">.</span>简单的分组函数应用<span class="token comment" spellcheck="true">--统计各个国家名字的长度</span><span class="token comment" spellcheck="true">--length,avg,round</span>  <span class="token keyword">SELECT</span> country_name<span class="token punctuation">,</span> LENGTH <span class="token punctuation">(</span>country_name<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> countries<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> country_name<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token function">AVG</span> <span class="token punctuation">(</span>LENGTH <span class="token punctuation">(</span>country_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> countries<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--工资</span>  <span class="token keyword">SELECT</span> manager_id<span class="token punctuation">,</span> <span class="token function">MIN</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> min_sal<span class="token punctuation">,</span> <span class="token function">MAX</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> max_sal    <span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> manager_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.多列分组数据</span><span class="token comment" spellcheck="true">--统计简历表中每年辞职的员工数</span><span class="token comment" spellcheck="true">--to_char,count</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> jl<span class="token punctuation">;</span>  <span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>end_date<span class="token punctuation">,</span> <span class="token string">'yyyy'</span><span class="token punctuation">)</span> year<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> job_history<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> TO_CHAR <span class="token punctuation">(</span>end_date<span class="token punctuation">,</span> <span class="token string">'yyyy'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>end_date<span class="token punctuation">,</span> <span class="token string">'yyyy'</span><span class="token punctuation">)</span> year<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> job_history<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> TO_CHAR <span class="token punctuation">(</span>end_date<span class="token punctuation">,</span> <span class="token string">'yyyy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> job_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.使用having 子句</span><span class="token comment" spellcheck="true">--限制：1.对行进行分组，2.应用组函数，3.显示符合having 子句条件的组</span><span class="token comment" spellcheck="true">--查招聘多于等于15 个员工在星期几。</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--to_char,count</span>  <span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>hire_date<span class="token punctuation">,</span> <span class="token string">'Day'</span><span class="token punctuation">)</span> 星期几<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> TO_CHAR <span class="token punctuation">(</span>hire_date<span class="token punctuation">,</span> <span class="token string">'Day'</span><span class="token punctuation">)</span>  <span class="token keyword">HAVING</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--统计部门里最大工资大于10000 的</span><span class="token comment" spellcheck="true">--max</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id  <span class="token keyword">HAVING</span> <span class="token function">MAX</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-字符函数-运算与截取"><a href="#3-字符函数-运算与截取" class="headerlink" title="3. 字符函数-运算与截取"></a>3. 字符函数-运算与截取</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.round（n,[m]） 四舍五入</span><span class="token comment" spellcheck="true">--m=0 整数，m&lt;0 小数点的前m 位,m>0 小数点的后m 位</span><span class="token comment" spellcheck="true">--四舍</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> salary <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--五入</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> salary <span class="token operator">+</span> <span class="token number">0.8</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--小数位</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> salary <span class="token operator">+</span> <span class="token number">0.842</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.842</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.842</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.867</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.867</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> <span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.867</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.trunc(n,[m]) 截取数字.</span><span class="token comment" spellcheck="true">--m=0 去掉小数位，m&lt;0 小数点的前m 位,m>0 小数点的后m 位</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> salary <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> TRUNC <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> TRUNC <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> TRUNC <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.842</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> TRUNC <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.867</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> TRUNC <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.867</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> TRUNC <span class="token punctuation">(</span><span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.867</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.ceil(n) 返回>=数字n 的最小整数</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> salary <span class="token operator">+</span> <span class="token number">0.8567</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> CEIL <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.8567</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> CEIL <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.2567</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.floor(n) 返回&lt;=数字n 的最小整数</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> salary <span class="token operator">+</span> <span class="token number">0.8567</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> FLOOR <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.8567</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span> FLOOR <span class="token punctuation">(</span>salary <span class="token operator">+</span> <span class="token number">0.2567</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--05.length(n) 返回字符串的长度</span><span class="token keyword">SELECT</span> country_name<span class="token punctuation">,</span> LENGTH <span class="token punctuation">(</span>country_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> countries<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-转换函数-大小写转换"><a href="#4-转换函数-大小写转换" class="headerlink" title="4. 转换函数-大小写转换"></a>4. 转换函数-大小写转换</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.lower 转换为小写</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name  <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">'%li%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--Li,lI,LI,li</span><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name  <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> LOWER <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">'%li%'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name  <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> first_name <span class="token operator">=</span> LOWER <span class="token punctuation">(</span><span class="token string">'ITPUX01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> LOWER <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.upper 转换为大写</span><span class="token keyword">SELECT</span> UPPER <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.initcap 将第一个字母大写，其余的小写。</span><span class="token keyword">SELECT</span> first_name<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> INITCAP <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.综合运用</span><span class="token keyword">SELECT</span> UPPER <span class="token punctuation">(</span>first_name<span class="token punctuation">)</span><span class="token punctuation">,</span> LOWER <span class="token punctuation">(</span>last_name<span class="token punctuation">)</span><span class="token punctuation">,</span> INITCAP <span class="token punctuation">(</span>job_id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-转换函数-日期字符数字转换"><a href="#5-转换函数-日期字符数字转换" class="headerlink" title="5. 转换函数-日期字符数字转换"></a>5. 转换函数-日期字符数字转换</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.to_date 字符串>日期类型</span><span class="token comment" spellcheck="true">--Year: yy 16,yyy 016, yyyy 2016</span><span class="token comment" spellcheck="true">--Month: mm 11,mon 11 月/nov,month 11 月/november</span><span class="token comment" spellcheck="true">--Day: dd 当月第几天02, ddd 当年第几天02, dy 当周第几天星期五/fri,day 当周第几天星期五/friday</span><span class="token comment" spellcheck="true">--Hour: hh 12 小时进制01，hh24 24 小时进制13</span><span class="token comment" spellcheck="true">--24 小时的时间范围： 0:00:00 - 23:59:59,12 小时时间范围:1:00:00-12:59:59</span><span class="token comment" spellcheck="true">--Minute: mi 60 进制45</span><span class="token comment" spellcheck="true">--Second: ss 60 进制25</span><span class="token comment" spellcheck="true">--其它: Q 季度4， WW 当年第几周44，W 当月第几周1</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2016-12-18 19:02:02'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD HH24:MI:SS'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2016-12-18 19:02'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD HH24:MI'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2016-12-18 19'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD HH24'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2016-12-18'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2016-12'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2016'</span><span class="token punctuation">,</span> <span class="token string">'YYYY'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'20161218'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.to_char 日期/数字>字符串</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'yyyy'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'dd'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'hh24'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span><span class="token string">'23432.4'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'yyyymmdd'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'mmdd'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_CHAR <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'yyyymm'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.to_number 字符>数字</span><span class="token keyword">SELECT</span> SYSDATE <span class="token operator">-</span> <span class="token punctuation">(</span>TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_NUMBER <span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_NUMBER <span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">365</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TRUNC <span class="token punctuation">(</span>TO_NUMBER <span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">365</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_NUMBER <span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_NUMBER <span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TO_NUMBER <span class="token punctuation">(</span>SYSDATE <span class="token operator">-</span> TO_DATE <span class="token punctuation">(</span><span class="token string">'2006-11-02 15:55:55'</span><span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-日期函数-使用日期函数使用"><a href="#6-日期函数-使用日期函数使用" class="headerlink" title="6. 日期函数-使用日期函数使用"></a>6. 日期函数-使用日期函数使用</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.sysdate</span><span class="token keyword">SELECT</span> SYSDATE <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.add_months 增加/减去月份</span><span class="token keyword">SELECT</span> ADD_MONTHS <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> ADD_MONTHS <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.last_day 返回日期的最后一天</span><span class="token keyword">SELECT</span> LAST_DAY <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> LAST_DAY <span class="token punctuation">(</span>ADD_MONTHS <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.months_between 时间2-时间1 的月份</span><span class="token keyword">SELECT</span> MONTHS_BETWEEN <span class="token punctuation">(</span>TO_DATE <span class="token punctuation">(</span><span class="token string">'2016/11/30'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       TO_DATE <span class="token punctuation">(</span><span class="token string">'2016/05/30'</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--05.next_day</span><span class="token comment" spellcheck="true">--星期日=1，一=2 二=3，三=4，四=5，五=6，六=7</span><span class="token keyword">SELECT</span> NEXT_DAY <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> NEXT_DAY <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--06.current_date 当前日期</span><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_DATE</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--07.current_timestamp 当前日期</span><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--08.sessiontimezone 时区</span><span class="token keyword">SELECT</span> SESSIONTIMEZONE <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--09.trunc( for date)</span><span class="token keyword">SELECT</span> TRUNC <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'YYYY'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TRUNC <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'MM'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TRUNC <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span class="token keyword">SELECT</span> TRUNC <span class="token punctuation">(</span>SYSDATE<span class="token punctuation">,</span> <span class="token string">'DD'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串与日期转换</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd HH24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> to_date<span class="token punctuation">(</span><span class="token string">'2018-02-12 16:35:36'</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd HH24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-集合函数-合并两张表的数据"><a href="#7-集合函数-合并两张表的数据" class="headerlink" title="7. 集合函数-合并两张表的数据"></a>7. 集合函数-合并两张表的数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--01.union (无重并集，去重排序)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> scott<span class="token punctuation">.</span>salgrade<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUM</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span>  <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> y<span class="token punctuation">.</span>salary          <span class="token keyword">FROM</span> employees y        <span class="token keyword">UNION</span>        <span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>hisal          <span class="token keyword">FROM</span> scott<span class="token punctuation">.</span>salgrade s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql06<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sql06<span class="token keyword">AS</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01<span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> sql06      <span class="token keyword">WHERE</span> sql01_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01<span class="token keyword">UNION</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--02.union all（有重并集，不去重排序）</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUM</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span>  <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> y<span class="token punctuation">.</span>salary          <span class="token keyword">FROM</span> employees y        <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>        <span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>hisal          <span class="token keyword">FROM</span> scott<span class="token punctuation">.</span>salgrade s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01<span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--03.intersect （交集,显示相同的）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01<span class="token keyword">INTERSECT</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--04.minus （差集，显示不同的）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01MINUS<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql06<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-分析函数-使用DECODE-函数"><a href="#8-分析函数-使用DECODE-函数" class="headerlink" title="8. 分析函数-使用DECODE 函数"></a>8. 分析函数-使用DECODE 函数</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--decode (条件,值1，返回值1，值2，返回值2,...，缺省值）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>  <span class="token keyword">SELECT</span> DECODE <span class="token punctuation">(</span>job_id<span class="token punctuation">,</span>  <span class="token string">'AD_PRES'</span><span class="token punctuation">,</span> <span class="token string">'CEO'</span><span class="token punctuation">,</span>  <span class="token string">'HR_PEP'</span><span class="token punctuation">,</span> <span class="token string">'HR'</span><span class="token punctuation">,</span>  <span class="token string">'SA'</span><span class="token punctuation">)</span> JOB<span class="token punctuation">,</span>         <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>                                                JOB_COUNT    <span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> DECODE <span class="token punctuation">(</span>job_id<span class="token punctuation">,</span>  <span class="token string">'AD_PRES'</span><span class="token punctuation">,</span> <span class="token string">'CEO'</span><span class="token punctuation">,</span>  <span class="token string">'HR_PEP'</span><span class="token punctuation">,</span> <span class="token string">'HR'</span><span class="token punctuation">,</span>  <span class="token string">'SA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--判断输出</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> salary <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">3100</span><span class="token punctuation">,</span> <span class="token number">2800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> DECODE <span class="token punctuation">(</span>salary<span class="token punctuation">,</span> <span class="token number">3100</span><span class="token punctuation">,</span> <span class="token string">'yes'</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DECODE <span class="token punctuation">(</span>salary<span class="token punctuation">,</span> <span class="token number">2800</span><span class="token punctuation">,</span> <span class="token string">'yes'</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> salary <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">3100</span><span class="token punctuation">,</span> <span class="token number">2800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle DML日常操作和事务处理</title>
      <link href="/oracle/oracle-dml-ri-chang-cao-zuo-he-shi-wu-chu-li/"/>
      <url>/oracle/oracle-dml-ri-chang-cao-zuo-he-shi-wu-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-DML日常操作和事务处理"><a href="#Oracle-DML日常操作和事务处理" class="headerlink" title="Oracle DML日常操作和事务处理"></a>Oracle DML日常操作和事务处理</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><a href="https://docs.oracle.com/cd/E11882_01/index.htm" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a> </p><h2 id="1-使用INSERT-命令"><a href="#1-使用INSERT-命令" class="headerlink" title="1 使用INSERT 命令"></a>1 使用INSERT 命令</h2><h3 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1.1 语法"></a>1.1 语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span><span class="token keyword">TABLE</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">(</span>colum<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">values</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">table</span>： 指定表或视图<span class="token keyword">column</span>：指定列名，多列之间用<span class="token punctuation">,</span>分开<span class="token keyword">value</span>： 指定待插入的数据，多值之间依<span class="token punctuation">,</span>分开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Formatted on 2018/2/12 14:59:34 (QP5 v5.313) */</span><span class="token comment" spellcheck="true">--1.insert 语句</span><span class="token comment" spellcheck="true">--1.1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql02<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">-- for update</span><span class="token comment" spellcheck="true">--1.2</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql03<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql03 <span class="token punctuation">(</span>sql03_id1<span class="token punctuation">,</span> sql03_id2<span class="token punctuation">,</span> sql03_id3<span class="token punctuation">)</span>     <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'sql03_11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--1.3</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql04<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql04     <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>             <span class="token string">'11g sql04 01'</span><span class="token punctuation">,</span>             <span class="token string">'active'</span><span class="token punctuation">,</span>             <span class="token number">60</span><span class="token punctuation">,</span>             SYSDATE<span class="token punctuation">,</span>             <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql04     <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>             <span class="token string">'11g sql04 02'</span><span class="token punctuation">,</span>             <span class="token string">'active'</span><span class="token punctuation">,</span>             <span class="token number">100</span><span class="token punctuation">,</span>             SYSDATE<span class="token punctuation">,</span>             <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--1.4</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql03<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql03     <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>sql03_id1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sql03_id2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sql03_id3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--1.5</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> sql05<span class="token keyword">AS</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql04<span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> sql05<span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql05<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql05    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql04<span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql05<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--1.6</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql04     <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>             <span class="token string">'11g sql04 03'</span><span class="token punctuation">,</span>             <span class="token string">'active'</span><span class="token punctuation">,</span>             <span class="token number">160</span><span class="token punctuation">,</span>             SYSDATE<span class="token punctuation">,</span>             <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql04     <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>             <span class="token string">'11g sql04 04'</span><span class="token punctuation">,</span>             <span class="token string">'active'</span><span class="token punctuation">,</span>             <span class="token number">220</span><span class="token punctuation">,</span>             SYSDATE<span class="token punctuation">,</span>             <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql04<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sql05    <span class="token keyword">SELECT</span> <span class="token operator">*</span>      <span class="token keyword">FROM</span> sql04     <span class="token keyword">WHERE</span> sql04_price <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql05<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用UPDATE-命令"><a href="#2-使用UPDATE-命令" class="headerlink" title="2 使用UPDATE 命令"></a>2 使用UPDATE 命令</h2><h3 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 表名称<span class="token keyword">SET</span> 列名称<span class="token operator">=</span> 新值<span class="token operator">&lt;</span><span class="token keyword">WHERE</span> 条件<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-基本使用"><a href="#2-2-基本使用" class="headerlink" title="2.2 基本使用"></a>2.2 基本使用</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Formatted on 2018/2/12 15:00:37 (QP5 v5.313) */</span><span class="token comment" spellcheck="true">--2.1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> sql02<span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.2</span><span class="token keyword">UPDATE</span> sql02   <span class="token keyword">SET</span> sql02_number <span class="token operator">=</span> <span class="token number">20002</span> <span class="token keyword">WHERE</span> sql02_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> sql02   <span class="token keyword">SET</span> sql02_status <span class="token operator">=</span> <span class="token string">'no'</span> <span class="token keyword">WHERE</span> sql02_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> sql02 <span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.3</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> sql02 <span class="token keyword">update</span> sql02 <span class="token keyword">set</span> sql02_id2<span class="token operator">=</span><span class="token number">222</span><span class="token punctuation">,</span>sql02_status<span class="token operator">=</span><span class="token string">'OK'</span> <span class="token keyword">where</span> sql02_id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.4</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> sql04 <span class="token keyword">update</span> sql04<span class="token keyword">set</span> <span class="token punctuation">(</span>sql04_desc<span class="token punctuation">,</span> sql04_count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> sql04_desc<span class="token punctuation">,</span> sql04_count <span class="token keyword">from</span> sql04 <span class="token keyword">where</span> sql04_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">where</span> sql04_id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用DELETE-命令"><a href="#3-使用DELETE-命令" class="headerlink" title="3 使用DELETE 命令"></a>3 使用DELETE 命令</h2><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span><span class="token keyword">table</span><span class="token operator">/</span><span class="token keyword">view</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>condition<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--3.1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span>  <span class="token keyword">FROM</span> sql02<span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sql02<span class="token comment" spellcheck="true">--3.2</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sql04<span class="token keyword">delete</span> <span class="token keyword">from</span> sql04 <span class="token keyword">where</span> sql04_id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sql04<span class="token comment" spellcheck="true">--3.3</span><span class="token keyword">delete</span> <span class="token keyword">from</span> sql04 <span class="token keyword">where</span> sql04_id<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">and</span> sql04_id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> sql04      <span class="token keyword">WHERE</span> sql04_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> sql04      <span class="token keyword">WHERE</span> sql04_price <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'160'</span><span class="token punctuation">,</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sql04<span class="token comment" spellcheck="true">--3.4</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sql03<span class="token keyword">delete</span> <span class="token keyword">from</span> sql03<span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--truncate table</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-创建PL-SQL-对象"><a href="#4-创建PL-SQL-对象" class="headerlink" title="4 创建PL/SQL 对象"></a>4 创建PL/SQL 对象</h2><h3 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Formatted on 2018/2/12 15:01:26 (QP5 v5.313) */</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> yg<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--创建</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">PROCEDURE</span> yg_count<span class="token keyword">AS</span>    v_yg_count1   NUMBER <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v_yg_count2   NUMBER <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> v_yg_count1 <span class="token keyword">FROM</span> yg<span class="token punctuation">;</span>    <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> yg          <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'SH_CLERK'</span><span class="token punctuation">;</span>    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> v_yg_count2 <span class="token keyword">FROM</span> yg<span class="token punctuation">;</span>    DBMS_OUTPUT<span class="token punctuation">.</span>put_line <span class="token punctuation">(</span><span class="token string">'离职前的员工数：'</span> <span class="token operator">||</span> v_yg_count1<span class="token punctuation">)</span><span class="token punctuation">;</span>    DBMS_OUTPUT<span class="token punctuation">.</span>put_line <span class="token punctuation">(</span><span class="token string">'离职后的员工数：'</span> <span class="token operator">||</span> v_yg_count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">SET</span> SERVEROUTPUT <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> yg_count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--离职前的员工数：107</span><span class="token comment" spellcheck="true">--离职后的员工数：97</span><span class="token comment" spellcheck="true">--删除</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> yg_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-事务概念与控制"><a href="#5-事务概念与控制" class="headerlink" title="5 事务概念与控制"></a>5 事务概念与控制</h2><h3 id="5-1-事务说明"><a href="#5-1-事务说明" class="headerlink" title="5.1 事务说明"></a>5.1 事务说明</h3><pre class="line-numbers language-sql"><code class="language-sql">    事务是对数据库操作的逻辑单位，在一个事务中可以包含一条或多条DML （数据操纵语言）、DDL （数据定义语言）和DCL （数据控制语言）语句，这些语句组成一个逻辑整体。    事务的执行只有两种结果：要么全部执行，把数据库带入一个新的状态，要么全部不执行，对数据库不做任何修改。    一组SQL<span class="token punctuation">,</span>一个逻辑工作单位，执行时整体修改或者整体回退。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-事务相关概念"><a href="#5-2-事务相关概念" class="headerlink" title="5.2 事务相关概念"></a>5.2 事务相关概念</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span>）事务的提交和回滚：<span class="token keyword">COMMIT</span><span class="token operator">/</span><span class="token keyword">ROLLBACK</span><span class="token number">2</span>）事务的开始和结束    开始事务：连接到数据库，执行DML、DCL、DDL 语句    结束事务：<span class="token number">1</span><span class="token punctuation">.</span> 执行DDL<span class="token punctuation">(</span>例如<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>DCL<span class="token punctuation">(</span>例如<span class="token keyword">GRANT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>系统自动执行<span class="token keyword">COMMIT</span> 语句<span class="token number">2</span><span class="token punctuation">.</span> 执行<span class="token keyword">COMMIT</span><span class="token operator">/</span><span class="token keyword">ROLLBACK</span><span class="token number">3</span><span class="token punctuation">.</span> 退出<span class="token operator">/</span>断开数据库的连接自动执行<span class="token keyword">COMMIT</span> 语句<span class="token number">4</span><span class="token punctuation">.</span> 进程意外终止，事务自动<span class="token keyword">rollback</span><span class="token number">5</span><span class="token punctuation">.</span> 事务<span class="token keyword">COMMIT</span> 时会生成一个唯一的系统变化号（SCN）保存到事务表<span class="token number">3</span>）保存点（<span class="token keyword">savepoint</span>）： 可以在事务的任何地方设置保存点，以便<span class="token keyword">ROLLBACK</span><span class="token number">4</span>）事务的四个特性ACID :    <span class="token number">1</span><span class="token punctuation">.</span> Atomicity（原子性）: 事务中sql 语句不可分割，要么都做，要么都不做    <span class="token number">2</span><span class="token punctuation">.</span> Consistency<span class="token punctuation">(</span>一致性<span class="token punctuation">)</span> ： 指事务操作前后，数据库中数据是一致的，数据满足业务规则约束（例如账户金额的转出和转入），与原子性对应。    <span class="token number">3</span><span class="token punctuation">.</span> Isolation（隔离性）：多个并发事务可以独立运行，而不能相互干扰，一个事务修改数据未提交前，其他事务看不到它所做的更改。    <span class="token number">4</span><span class="token punctuation">.</span> Durability（持久性）：事务提交后，数据的修改是永久的。<span class="token number">5</span>） 死锁：当两个事务相互等待对方释放资源时，就会形成死锁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-oracle-事务隔离级别"><a href="#5-3-oracle-事务隔离级别" class="headerlink" title="5.3 oracle 事务隔离级别"></a>5.3 oracle 事务隔离级别</h3><ul><li>1 .两个事务并发访问数据库数据时可能存在的问题</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span> 幻想读：    事务T1 读取一条指定<span class="token keyword">where</span> 条件的语句，返回结果集。此时事务T2 插入一行新记录并<span class="token keyword">commit</span>，恰好满足T1 的<span class="token keyword">where</span> 条件。然后T1 使用相同的条件再次查询，结果集中可以看到T2 插入的记录，这条新纪录就是幻想。<span class="token number">2</span><span class="token punctuation">.</span> 不可重复读取：    事务T1 读取一行记录，紧接着事务T2 修改了T1 刚刚读取的记录并<span class="token keyword">commit</span>，然后T1 再次查询，发现与第一次读取的记录不同，这称为不可重复读。<span class="token number">3</span><span class="token punctuation">.</span> 脏读：    事务T1 更新了一行记录，还未提交所做的修改，这个T2 读取了更新后的数据，然后T1 执行回滚操作，取消刚才的修改，所以T2 所读取的行就无效，也就是脏数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.oracle 事务隔离级别</li></ul><pre class="line-numbers language-sql"><code class="language-sql">oracle 支持的隔离级别：（不支持脏读）<span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token comment" spellcheck="true">--不允许脏读，允许幻想读和不可重复读</span><span class="token keyword">SERIALIZABLE</span><span class="token comment" spellcheck="true">--以上三种都不允许</span>sql 标准还支持<span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token punctuation">(</span>三种都允许<span class="token punctuation">)</span>和<span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span>（不允许不可重复读和脏读，只允许幻想读）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.事务相关语句</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span><span class="token comment" spellcheck="true">----设置事务属性</span><span class="token keyword">SET</span> <span class="token keyword">CONSTRAINT</span> <span class="token comment" spellcheck="true">-----设置约束</span><span class="token keyword">SAVEPOINT</span> <span class="token comment" spellcheck="true">------------建立存储点</span><span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span> <span class="token comment" spellcheck="true">--释放存储点</span><span class="token keyword">ROLLBACK</span><span class="token comment" spellcheck="true">---------------回滚</span><span class="token keyword">COMMIT</span><span class="token comment" spellcheck="true">------------------提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-锁的检测和锁争用"><a href="#6-锁的检测和锁争用" class="headerlink" title="6 锁的检测和锁争用"></a>6 锁的检测和锁争用</h2><h3 id="6-1-解决死锁冲突"><a href="#6-1-解决死锁冲突" class="headerlink" title="6.1 解决死锁冲突"></a>6.1 解决死锁冲突</h3><ul><li>1）执行commit 或者rollback 结束事务<br><code>`</code>sql</li></ul><pre><code>* 2）终止会话```sql在等待资源时执行，查找阻塞会话SELECT sid, serial#, username  FROM v$session WHERE sid IN (SELECT blocking_session FROM v$session);杀掉会话ALTER SYSTEM KILL SESSION &#39;111,222&#39;;关于查看锁的一些视图SELECT * FROM V$SESSION;                        --查看会话和锁的信息SELECT * FROM V$SESSION_WAIT;                             --查看等待的会话信息SELECT * FROM V$LOCK;                     --系统中所有锁SELECT * FROM V$LOCKED_OBJECT;                              --系统中DML 锁SELECT l.sid, s.SERIAL#, sq.sql_text  FROM v$lock l, v$session s, v$sql sq WHERE l.sid = s.sid AND s.sql_id = sq.sql_id AND s.status = &#39;ACTIVE&#39;alter system kill session &#39;139,1431&#39;</code></pre><h2 id="7-了解撤销数据UNDO"><a href="#7-了解撤销数据UNDO" class="headerlink" title="7 了解撤销数据UNDO"></a>7 了解撤销数据UNDO</h2><h3 id="7-1-查看近来数据库生成的撤销数据量"><a href="#7-1-查看近来数据库生成的撤销数据量" class="headerlink" title="7.1 查看近来数据库生成的撤销数据量"></a>7.1 查看近来数据库生成的撤销数据量</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">SESSION</span> <span class="token keyword">SET</span> nls_date_format <span class="token operator">=</span> <span class="token string">'dd-mm-yy hh24:mi:ss'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> begin_time<span class="token punctuation">,</span>end_time<span class="token punctuation">,</span><span class="token punctuation">(</span>undoblks <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">VALUE</span> <span class="token keyword">FROM</span> v$parameter <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'db_block_size'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>undo_bytes<span class="token keyword">FROM</span> v$undostat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
            <tag> DML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle ASM数据库日常管理维护手册</title>
      <link href="/oracle/oracle-asm-shu-ju-ku-ri-chang-guan-li-wei-hu-shou-ce/"/>
      <url>/oracle/oracle-asm-shu-ju-ku-ri-chang-guan-li-wei-hu-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-ASM数据库日常管理维护"><a href="#Oracle-ASM数据库日常管理维护" class="headerlink" title="Oracle ASM数据库日常管理维护"></a>Oracle ASM数据库日常管理维护</h1><p>[Oracle 11G R2 官方文档][1]</p><h2 id="1-单机从ASM到文件系统"><a href="#1-单机从ASM到文件系统" class="headerlink" title="1.单机从ASM到文件系统"></a>1.单机从ASM到文件系统</h2><h3 id="1-1-前期准备"><a href="#1-1-前期准备" class="headerlink" title="1.1  前期准备"></a>1.1  前期准备</h3><ul><li>01.收集信息</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.查看数据文件</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> v$datafile<span class="token punctuation">;</span><span class="token keyword">SELECT</span> file_name <span class="token keyword">FROM</span> dba_data_files<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.查看日志文件</span><span class="token keyword">SELECT</span> MEMBER <span class="token keyword">FROM</span> v$logfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3.查看临时文件</span><span class="token keyword">SELECT</span> file_name <span class="token keyword">FROM</span> dba_temp_files<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--4.查看控制文件</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$controlfile<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>02.备份数据库</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>RMAN 备份<span class="token keyword">backup</span> tag racdb_full format <span class="token string">'/u01/backup/datafile/racdb_full_%s_%p_%t'</span> <span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">backup</span> tag racdb_ctrl format <span class="token string">'/u01/backup/datafile/racdb_ctrl_%s_%p_%t'</span> <span class="token punctuation">(</span><span class="token keyword">current</span> controlfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">backup</span> tag racdb_pfile format '<span class="token operator">/</span>u01<span class="token comment" spellcheck="true">//backup/datafile/racdb_spfile_%s_%p_%t' (spfile);</span><span class="token comment" spellcheck="true">--2.SQLPLUS</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">backup</span> controlfile <span class="token keyword">to</span> <span class="token string">'/u01/backup/datafile/control.ctl'</span><span class="token punctuation">;</span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">backup</span> controlfile <span class="token keyword">to</span> trace <span class="token keyword">as</span>  <span class="token string">'/u01/backup/datafile/control.trc'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>03.准备目录等环境</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>04.开始迁移</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.控制文件</span> <span class="token keyword">alter</span> system <span class="token keyword">set</span> control_files<span class="token operator">=</span><span class="token string">'/oracle/oradata/racdb/control01.ctl'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.参数文件</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> db_create_file_dest<span class="token operator">=</span><span class="token string">'/oracle/oradata/racdb/'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3.归档日志</span><span class="token keyword">show</span> parameter recover；<span class="token keyword">alter</span> system <span class="token keyword">set</span> db_recovery_file_dest<span class="token operator">=</span><span class="token string">'/oracle/recovery'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--4.将参数文件导出(需要手动删除ASM信息)</span><span class="token keyword">create</span> pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span> <span class="token keyword">from</span> spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--5.关机后用新的PFILE启动数据库到NOMOUNT</span><span class="token keyword">shutdown</span> immediatestartup pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span> nomount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--6.根据现在的PFILE生成SPFILE</span><span class="token keyword">create</span> spfile <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--7.关闭数据库后用SPFILE启动数据库</span><span class="token keyword">shutdown</span> immediatestartup nomount<span class="token keyword">show</span> parameter spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--8.RMAN恢复控制文件</span><span class="token keyword">restore</span> controlfile <span class="token keyword">from</span> <span class="token string">'+DG_DATA/RACDB/CONTROLFILE/Current.256.966890297'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--10.挂载数据库</span><span class="token keyword">alter</span> <span class="token keyword">database</span> mount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--11.RMAN将数据文件从ASM到文件系统</span><span class="token keyword">backup</span> <span class="token keyword">as</span> copy <span class="token keyword">database</span> format <span class="token string">'/oracle/oradata/racdb/%U'</span><span class="token punctuation">;</span>switch <span class="token keyword">database</span> <span class="token keyword">to</span> copy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--12.恢复数据库(不恢复)</span> recover <span class="token keyword">database</span> <span class="token keyword">using</span> <span class="token keyword">backup</span> controlfile until cancel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--13.打开数据库</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">open</span> resetlogs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--14.处理临时文件（删掉再添加）</span><span class="token keyword">select</span> file_name <span class="token keyword">from</span> dba_temp_files<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> tempfile <span class="token string">'+DG_DATA/racdb/tempfile/temp.263.966890331'</span> <span class="token keyword">drop</span> including datafiles<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">tablespace</span> <span class="token keyword">temp</span> <span class="token keyword">add</span> tempfile <span class="token string">'/oracle/oradata/racdb/temp01.dbf'</span> size 100m autoextend <span class="token keyword">off</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--注意：如果临时文件删不掉可以重启数据库再删</span><span class="token comment" spellcheck="true">--15.处理日志</span><span class="token keyword">select</span> member <span class="token keyword">from</span> v$log<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">drop</span> logfile <span class="token keyword">group</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> logfile <span class="token keyword">group</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">'/oracle/oradata/racdb/redo01.log'</span><span class="token punctuation">)</span> size 100m<span class="token punctuation">;</span> <span class="token keyword">alter</span> system <span class="token keyword">checkpoint</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--注意:这个步骤再文件系统和ASM中相互转换</span><span class="token comment" spellcheck="true">--16.添加控制文件（重启后生效）</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> control_files<span class="token operator">=</span><span class="token string">'/oracle/oradata/racdb/control01.ctl'</span><span class="token punctuation">,</span><span class="token string">'/oracle/recovery/racdb/control02.ctl'</span>scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--17.修改数据文件名字</span>mv data_D<span class="token operator">-</span>RACDB_I<span class="token operator">-</span>964507061_TS<span class="token operator">-</span>SYSTEM_FNO<span class="token operator">-</span>1_0ksq4vvu    SYSTEM01<span class="token number">.dbf</span>mv data_D<span class="token operator">-</span>RACDB_I<span class="token operator">-</span>964507061_TS<span class="token operator">-</span>SYSAUX_FNO<span class="token operator">-</span>2_0lsq5012    SYSAUX01<span class="token number">.dbf</span>mv data_D<span class="token operator">-</span>RACDB_I<span class="token operator">-</span>964507061_TS<span class="token operator">-</span>UNDOTBS1_FNO<span class="token operator">-</span>3_0jsq4vur    UNDOTBS01<span class="token number">.dbf</span>mv data_D<span class="token operator">-</span>RACDB_I<span class="token operator">-</span>964507061_TS<span class="token operator">-</span>USERS_FNO<span class="token operator">-</span>4_0msq501r    USERS01<span class="token number">.dbf</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">rename</span> <span class="token keyword">file</span> <span class="token string">'/oracle/oradata/racdb/data_D-RACDB_I-964507061_TS-SYSTEM_FNO-1_0ksq4vvu'</span> <span class="token keyword">to</span> <span class="token string">'/oracle/oradata/racdb/SYSTEM01.dbf'</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">rename</span> <span class="token keyword">file</span> <span class="token string">'/oracle/oradata/racdb/data_D-RACDB_I-964507061_TS-SYSAUX_FNO-2_0lsq5012'</span> <span class="token keyword">to</span> <span class="token string">'/oracle/oradata/racdb/SYSAUX01.dbf'</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">rename</span> <span class="token keyword">file</span> <span class="token string">'/oracle/oradata/racdb/data_D-RACDB_I-964507061_TS-UNDOTBS1_FNO-3_0jsq4vur'</span> <span class="token keyword">to</span> <span class="token string">'/oracle/oradata/racdb/UNDOTBS01.dbf'</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">rename</span> <span class="token keyword">file</span> <span class="token string">'/oracle/oradata/racdb/data_D-RACDB_I-964507061_TS-USERS_FNO-4_0msq501r'</span> <span class="token keyword">to</span> <span class="token string">'/oracle/oradata/racdb/USERS01.dbf'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>转换前文件目录</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> v$datafile<span class="token punctuation">;</span><span class="token keyword">SELECT</span> file_name <span class="token keyword">FROM</span> dba_data_files<span class="token punctuation">;</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>system<span class="token number">.260</span><span class="token punctuation">.</span><span class="token number">966890307</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>sysaux<span class="token number">.261</span><span class="token punctuation">.</span><span class="token number">966890319</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>undotbs1<span class="token number">.262</span><span class="token punctuation">.</span><span class="token number">966890327</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>users<span class="token number">.264</span><span class="token punctuation">.</span><span class="token number">966890339</span><span class="token keyword">SELECT</span> MEMBER <span class="token keyword">FROM</span> v$logfile<span class="token punctuation">;</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>onlinelog<span class="token operator">/</span>group_1<span class="token number">.257</span><span class="token punctuation">.</span><span class="token number">966890301</span><span class="token operator">+</span>DG_BACKUP<span class="token operator">/</span>racdb<span class="token operator">/</span>onlinelog<span class="token operator">/</span>group_1<span class="token number">.257</span><span class="token punctuation">.</span><span class="token number">966890301</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>onlinelog<span class="token operator">/</span>group_2<span class="token number">.258</span><span class="token punctuation">.</span><span class="token number">966890303</span><span class="token operator">+</span>DG_BACKUP<span class="token operator">/</span>racdb<span class="token operator">/</span>onlinelog<span class="token operator">/</span>group_2<span class="token number">.258</span><span class="token punctuation">.</span><span class="token number">966890303</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>onlinelog<span class="token operator">/</span>group_3<span class="token number">.259</span><span class="token punctuation">.</span><span class="token number">966890305</span><span class="token operator">+</span>DG_BACKUP<span class="token operator">/</span>racdb<span class="token operator">/</span>onlinelog<span class="token operator">/</span>group_3<span class="token number">.259</span><span class="token punctuation">.</span><span class="token number">966890305</span><span class="token keyword">SELECT</span> file_name <span class="token keyword">FROM</span> dba_temp_files<span class="token punctuation">;</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>tempfile<span class="token operator">/</span><span class="token keyword">temp</span><span class="token punctuation">.</span><span class="token number">263.966890331</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$controlfile<span class="token punctuation">;</span>        <span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>controlfile<span class="token operator">/</span>cur <span class="token keyword">NO</span>       <span class="token number">16384</span>           <span class="token number">2924</span>        rent<span class="token number">.256</span><span class="token punctuation">.</span><span class="token number">966890297</span>        <span class="token operator">+</span>DG_BACKUP<span class="token operator">/</span>racdb<span class="token operator">/</span>controlfile<span class="token operator">/</span><span class="token number">c</span> YES      <span class="token number">16384</span>           <span class="token number">2924</span>        urrent<span class="token number">.256</span><span class="token punctuation">.</span><span class="token number">966890299</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>转换后文件目录</li></ul><p>![数据文件][2]</p><p>![日志文件][3]</p><p>![临时文件][4]</p><p>![控制文件][5]</p><h2 id="2-单机从ASM到文件系统"><a href="#2-单机从ASM到文件系统" class="headerlink" title="2.单机从ASM到文件系统"></a>2.单机从ASM到文件系统</h2><ul><li>步骤</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>利用PFILE和SPFILE将一个包含控制文件文字的SPFILE存到ASM<span class="token number">2</span><span class="token punctuation">.</span>RMAN将备份的控制文件恢复到指定目录<span class="token number">3</span><span class="token punctuation">.</span>恢复数据文件<span class="token number">4</span><span class="token punctuation">.</span>处理日志文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>操作</li></ul><pre class="line-numbers language-sql"><code class="language-sql">SQL<span class="token operator">></span>  <span class="token keyword">alter</span> system <span class="token keyword">set</span> control_files<span class="token operator">=</span><span class="token string">'+DG_DATA'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">set</span> db_create_file_dest<span class="token operator">=</span><span class="token string">'+DG_DATA/'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">set</span> db_recovery_file_dest<span class="token operator">=</span><span class="token string">'+DG_BACKUP'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">set</span> control_files<span class="token operator">=</span><span class="token string">'+DG_DATA/racdb/control01.ctl'</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">create</span> pfile <span class="token string">'/oracle/racdbpfile.ora'</span> <span class="token keyword">from</span> spfile<span class="token punctuation">;</span><span class="token keyword">create</span> pfile <span class="token string">'/oracle/racdbpfile.ora'</span> <span class="token keyword">from</span> spfile             <span class="token operator">*</span>ERROR at line <span class="token number">1</span>:ORA<span class="token number">-00923</span>: <span class="token keyword">FROM</span> keyword <span class="token operator">not</span> found <span class="token keyword">where</span> expectedSQL<span class="token operator">></span> <span class="token keyword">create</span> pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span> <span class="token keyword">from</span> spfile<span class="token punctuation">;</span><span class="token keyword">File</span> created<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span><span class="token keyword">Database</span> closed<span class="token punctuation">.</span><span class="token keyword">Database</span> dismounted<span class="token punctuation">.</span>ORACLE instance shut down<span class="token punctuation">.</span>SQL<span class="token operator">></span> SQL<span class="token operator">></span> startup pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span> nomount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area <span class="token number">1043886080</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2259840</span> bytesVariable Size             <span class="token number">335545472</span> bytes<span class="token keyword">Database</span> Buffers          <span class="token number">700448768</span> bytesRedo Buffers                <span class="token number">5632000</span> bytesSQL<span class="token operator">></span> <span class="token keyword">create</span> spfile <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span><span class="token punctuation">;</span><span class="token keyword">File</span> created<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">create</span> spfile<span class="token operator">=</span><span class="token string">'+DG_DATA/racdb/spfileracdb.ora'</span> <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oralce/racdbpfile.ora'</span>  <span class="token number">2</span>  <span class="token punctuation">;</span><span class="token keyword">create</span> spfile<span class="token operator">=</span><span class="token string">'+DG_DATA/racdb/spfileracdb.ora'</span> <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oralce/racdbpfile.ora'</span><span class="token operator">*</span>ERROR at line <span class="token number">1</span>:ORA<span class="token number">-01078</span>: failure <span class="token operator">in</span> processing system parametersLRM<span class="token number">-00109</span>: could <span class="token operator">not</span> <span class="token keyword">open</span> parameter <span class="token keyword">file</span> <span class="token string">'/oralce/racdbpfile.ora'</span>SQL<span class="token operator">></span> <span class="token keyword">create</span> spfile<span class="token operator">=</span><span class="token string">'+DG_DATA/racdb/spfileracdb.ora'</span> <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oralce/racdbpfile.ora'</span>  <span class="token number">2</span>  <span class="token punctuation">;</span><span class="token keyword">create</span> spfile<span class="token operator">=</span><span class="token string">'+DG_DATA/racdb/spfileracdb.ora'</span> <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oralce/racdbpfile.ora'</span><span class="token operator">*</span>ERROR at line <span class="token number">1</span>:ORA<span class="token number">-01078</span>: failure <span class="token operator">in</span> processing system parametersLRM<span class="token number">-00109</span>: could <span class="token operator">not</span> <span class="token keyword">open</span> parameter <span class="token keyword">file</span> <span class="token string">'/oralce/racdbpfile.ora'</span>SQL<span class="token operator">></span> <span class="token keyword">create</span> spfile<span class="token operator">=</span><span class="token string">'+DG_DATA/racdb/spfileracdb.ora'</span> <span class="token keyword">from</span> pfile<span class="token operator">=</span><span class="token string">'/oracle/racdbpfile.ora'</span><span class="token punctuation">;</span><span class="token keyword">File</span> created<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span>ORA<span class="token number">-01507</span>: <span class="token keyword">database</span> <span class="token operator">not</span> mountedORACLE instance shut down<span class="token punctuation">.</span>SQL<span class="token operator">></span> startup nomount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area <span class="token number">1043886080</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2259840</span> bytesVariable Size             <span class="token number">335545472</span> bytes<span class="token keyword">Database</span> Buffers          <span class="token number">700448768</span> bytesRedo Buffers                <span class="token number">5632000</span> bytesSQL<span class="token operator">></span> <span class="token keyword">show</span> parameter spfileSQL<span class="token operator">></span> <span class="token keyword">show</span> parameter controlNAME                                 <span class="token keyword">TYPE</span>                   <span class="token keyword">VALUE</span><span class="token comment" spellcheck="true">------------------------------------ ---------------------- ------------------------------</span>control_file_record_keep_time        <span class="token keyword">integer</span>                <span class="token number">7</span>control_files                        string                 <span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>control01<span class="token punctuation">.</span>ctlcontrol_management_pack_access       string                 DIAGNOSTIC<span class="token operator">+</span>TUNING<span class="token punctuation">[</span>oracle<span class="token variable">@rac1</span>:<span class="token operator">/</span><span class="token punctuation">]</span>$rman target <span class="token operator">/</span>Recovery Manager: <span class="token keyword">Release</span> <span class="token number">11.2</span><span class="token punctuation">.</span><span class="token number">0.4</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span> Production <span class="token keyword">on</span> Thu Feb <span class="token number">1</span> <span class="token number">15</span>:<span class="token number">37</span>:<span class="token number">25</span> <span class="token number">2018</span>Copyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">1982</span><span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span>  <span class="token keyword">All</span> rights reserved<span class="token punctuation">.</span>connected <span class="token keyword">to</span> target <span class="token keyword">database</span>: RACDB <span class="token punctuation">(</span><span class="token operator">not</span> mounted<span class="token punctuation">)</span>RMAN<span class="token operator">></span> <span class="token keyword">restore</span> controlfile <span class="token keyword">from</span> <span class="token string">'/u01/backup/datafile/racdb_ctrl_32_1_966957454'</span><span class="token punctuation">;</span>Starting <span class="token keyword">restore</span> at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">37</span>:<span class="token number">57</span><span class="token keyword">using</span> target <span class="token keyword">database</span> control <span class="token keyword">file</span> instead <span class="token keyword">of</span> recovery catalogallocated channel: ORA_DISK_1channel ORA_DISK_1: SID<span class="token operator">=</span><span class="token number">10</span> device <span class="token keyword">type</span><span class="token operator">=</span><span class="token keyword">DISK</span>channel ORA_DISK_1: restoring control <span class="token keyword">file</span>channel ORA_DISK_1: <span class="token keyword">restore</span> complete<span class="token punctuation">,</span> elapsed time: <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">03</span>output <span class="token keyword">file</span> name<span class="token operator">=</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>control01<span class="token punctuation">.</span>ctlFinished <span class="token keyword">restore</span> at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">38</span>:<span class="token number">01</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> mount<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>RMAN<span class="token operator">></span> list <span class="token keyword">backup</span><span class="token punctuation">;</span>released channel: ORA_DISK_1List <span class="token keyword">of</span> <span class="token keyword">Backup</span> Sets<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span>BS <span class="token keyword">Key</span>  <span class="token keyword">Type</span> LV Size       Device <span class="token keyword">Type</span> Elapsed Time Completion Time    <span class="token comment" spellcheck="true">------- ---- -- ---------- ----------- ------------ -------------------</span><span class="token number">24</span>      <span class="token keyword">Full</span>    <span class="token number">1</span><span class="token punctuation">.</span>05G      <span class="token keyword">DISK</span>        <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">15</span>     <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">28</span>        BP <span class="token keyword">Key</span>: <span class="token number">24</span>   <span class="token keyword">Status</span>: AVAILABLE  Compressed: <span class="token keyword">NO</span>  Tag: RACDB_FULL        Piece Name: <span class="token operator">/</span>u01<span class="token operator">/</span><span class="token keyword">backup</span><span class="token operator">/</span>datafile<span class="token operator">/</span>racdb_full_30_1_966957433  List <span class="token keyword">of</span> Datafiles <span class="token operator">in</span> <span class="token keyword">backup</span> <span class="token keyword">set</span> <span class="token number">24</span>  <span class="token keyword">File</span> LV <span class="token keyword">Type</span> Ckp SCN    Ckp Time            Name  <span class="token comment" spellcheck="true">---- -- ---- ---------- ------------------- ----</span>  <span class="token number">1</span>       <span class="token keyword">Full</span> <span class="token number">874708</span>     <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">14</span> <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>SYSTEM01<span class="token number">.dbf</span>  <span class="token number">2</span>       <span class="token keyword">Full</span> <span class="token number">874708</span>     <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">14</span> <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>SYSAUX01<span class="token number">.dbf</span>  <span class="token number">3</span>       <span class="token keyword">Full</span> <span class="token number">874708</span>     <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">14</span> <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>UNDOTBS01<span class="token number">.dbf</span>  <span class="token number">4</span>       <span class="token keyword">Full</span> <span class="token number">874708</span>     <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">14</span> <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>USERS01<span class="token number">.dbf</span>BS <span class="token keyword">Key</span>  <span class="token keyword">Type</span> LV Size       Device <span class="token keyword">Type</span> Elapsed Time Completion Time    <span class="token comment" spellcheck="true">------- ---- -- ---------- ----------- ------------ -------------------</span><span class="token number">25</span>      <span class="token keyword">Full</span>    <span class="token number">46</span><span class="token punctuation">.</span>05M     <span class="token keyword">DISK</span>        <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">01</span>     <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">30</span>        BP <span class="token keyword">Key</span>: <span class="token number">25</span>   <span class="token keyword">Status</span>: AVAILABLE  Compressed: <span class="token keyword">NO</span>  Tag: TAG20180201T151729        Piece Name: <span class="token operator">+</span>DG_BACKUP<span class="token operator">/</span>racdb<span class="token operator">/</span>autobackup<span class="token operator">/</span>2018_02_01<span class="token operator">/</span>s_966957449<span class="token number">.256</span><span class="token punctuation">.</span><span class="token number">966957449</span>  SPFILE Included: Modification time: <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">14</span>:<span class="token number">40</span>:<span class="token number">33</span>  SPFILE db_unique_name: RACDB  Control <span class="token keyword">File</span> Included: Ckp SCN: <span class="token number">874719</span>       Ckp time: <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">17</span>:<span class="token number">29</span>  List <span class="token keyword">of</span> Permanent Datafiles<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">File</span> Size<span class="token punctuation">(</span>MB<span class="token punctuation">)</span> <span class="token keyword">Tablespace</span>           RB segs Datafile Name<span class="token comment" spellcheck="true">---- -------- -------------------- ------- ------------------------</span><span class="token number">1</span>    <span class="token number">750</span>      SYSTEM               <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>SYSTEM01<span class="token number">.dbf</span><span class="token number">2</span>    <span class="token number">600</span>      SYSAUX               <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>SYSAUX01<span class="token number">.dbf</span><span class="token number">3</span>    <span class="token number">885</span>      UNDOTBS1             <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>UNDOTBS01<span class="token number">.dbf</span><span class="token number">4</span>    <span class="token number">5</span>        USERS                <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>USERS01<span class="token number">.dbf</span>List <span class="token keyword">of</span> <span class="token keyword">Temporary</span> Files<span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span><span class="token keyword">File</span> Size<span class="token punctuation">(</span>MB<span class="token punctuation">)</span> <span class="token keyword">Tablespace</span>           Maxsize<span class="token punctuation">(</span>MB<span class="token punctuation">)</span> Tempfile Name<span class="token comment" spellcheck="true">---- -------- -------------------- ----------- --------------------</span><span class="token number">1</span>    <span class="token number">100</span>      <span class="token keyword">TEMP</span>                 <span class="token number">100</span>         <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>temp01<span class="token number">.dbf</span>RMAN<span class="token operator">></span> run{<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">set</span> newname <span class="token keyword">for</span> datafile <span class="token number">1</span> <span class="token keyword">to</span> <span class="token string">"+DG_DATA"</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token operator">></span> <span class="token keyword">set</span> newname <span class="token keyword">for</span> datafile <span class="token number">2</span> <span class="token keyword">to</span> <span class="token string">"+DG_DATA"</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token operator">></span> <span class="token keyword">set</span> newname <span class="token keyword">for</span> datafile <span class="token number">3</span> <span class="token keyword">to</span> <span class="token string">"+DG_DATA"</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token operator">></span> <span class="token keyword">set</span> newname <span class="token keyword">for</span> datafile <span class="token number">4</span> <span class="token keyword">to</span> <span class="token string">"+DG_DATA"</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token operator">></span> <span class="token keyword">set</span> newname <span class="token keyword">for</span> tempfile <span class="token number">1</span> <span class="token keyword">to</span> <span class="token string">"+DG_DATA"</span><span class="token punctuation">;</span><span class="token number">7</span><span class="token operator">></span> <span class="token keyword">restore</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token number">8</span><span class="token operator">></span> switch datafile <span class="token keyword">all</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token operator">></span> recover <span class="token keyword">database</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token operator">></span> }executing command: <span class="token keyword">SET</span> NEWNAMEexecuting command: <span class="token keyword">SET</span> NEWNAMEexecuting command: <span class="token keyword">SET</span> NEWNAMEexecuting command: <span class="token keyword">SET</span> NEWNAMEexecuting command: <span class="token keyword">SET</span> NEWNAMEStarting <span class="token keyword">restore</span> at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">44</span>:<span class="token number">20</span><span class="token keyword">using</span> channel ORA_DISK_1channel ORA_DISK_1: starting datafile <span class="token keyword">backup</span> <span class="token keyword">set</span> <span class="token keyword">restore</span>channel ORA_DISK_1: specifying datafile<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">to</span> <span class="token keyword">restore</span> <span class="token keyword">from</span> <span class="token keyword">backup</span> <span class="token keyword">set</span>channel ORA_DISK_1: restoring datafile <span class="token number">00001</span> <span class="token keyword">to</span> <span class="token operator">+</span>DG_DATAchannel ORA_DISK_1: restoring datafile <span class="token number">00002</span> <span class="token keyword">to</span> <span class="token operator">+</span>DG_DATAchannel ORA_DISK_1: restoring datafile <span class="token number">00003</span> <span class="token keyword">to</span> <span class="token operator">+</span>DG_DATAchannel ORA_DISK_1: restoring datafile <span class="token number">00004</span> <span class="token keyword">to</span> <span class="token operator">+</span>DG_DATAchannel ORA_DISK_1: reading <span class="token keyword">from</span> <span class="token keyword">backup</span> piece <span class="token operator">/</span>u01<span class="token operator">/</span><span class="token keyword">backup</span><span class="token operator">/</span>datafile<span class="token operator">/</span>racdb_full_30_1_966957433channel ORA_DISK_1: piece handle<span class="token operator">=</span><span class="token operator">/</span>u01<span class="token operator">/</span><span class="token keyword">backup</span><span class="token operator">/</span>datafile<span class="token operator">/</span>racdb_full_30_1_966957433 tag<span class="token operator">=</span>RACDB_FULLchannel ORA_DISK_1: restored <span class="token keyword">backup</span> piece <span class="token number">1</span>channel ORA_DISK_1: <span class="token keyword">restore</span> complete<span class="token punctuation">,</span> elapsed time: <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">45</span>Finished <span class="token keyword">restore</span> at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">45</span>:<span class="token number">05</span>datafile <span class="token number">1</span> switched <span class="token keyword">to</span> datafile copyinput datafile copy RECID<span class="token operator">=</span><span class="token number">15</span> STAMP<span class="token operator">=</span><span class="token number">966959106</span> <span class="token keyword">file</span> name<span class="token operator">=</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>system<span class="token number">.261</span><span class="token punctuation">.</span><span class="token number">966959061</span>datafile <span class="token number">2</span> switched <span class="token keyword">to</span> datafile copyinput datafile copy RECID<span class="token operator">=</span><span class="token number">16</span> STAMP<span class="token operator">=</span><span class="token number">966959106</span> <span class="token keyword">file</span> name<span class="token operator">=</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>sysaux<span class="token number">.260</span><span class="token punctuation">.</span><span class="token number">966959061</span>datafile <span class="token number">3</span> switched <span class="token keyword">to</span> datafile copyinput datafile copy RECID<span class="token operator">=</span><span class="token number">17</span> STAMP<span class="token operator">=</span><span class="token number">966959106</span> <span class="token keyword">file</span> name<span class="token operator">=</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>undotbs1<span class="token number">.262</span><span class="token punctuation">.</span><span class="token number">966959061</span>datafile <span class="token number">4</span> switched <span class="token keyword">to</span> datafile copyinput datafile copy RECID<span class="token operator">=</span><span class="token number">18</span> STAMP<span class="token operator">=</span><span class="token number">966959106</span> <span class="token keyword">file</span> name<span class="token operator">=</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token operator">/</span>users<span class="token number">.265</span><span class="token punctuation">.</span><span class="token number">966959061</span>Starting recover at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">45</span>:<span class="token number">08</span><span class="token keyword">using</span> channel ORA_DISK_1starting media recoveryarchived log <span class="token keyword">for</span> thread <span class="token number">1</span> <span class="token keyword">with</span> sequence <span class="token number">33</span> <span class="token operator">is</span> already <span class="token keyword">on</span> <span class="token keyword">disk</span> <span class="token keyword">as</span> <span class="token keyword">file</span> <span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>redo03<span class="token punctuation">.</span>logarchived log <span class="token keyword">file</span> name<span class="token operator">=</span><span class="token operator">/</span>oracle<span class="token operator">/</span>oradata<span class="token operator">/</span>racdb<span class="token operator">/</span>redo03<span class="token punctuation">.</span>log thread<span class="token operator">=</span><span class="token number">1</span> sequence<span class="token operator">=</span><span class="token number">33</span>media recovery complete<span class="token punctuation">,</span> elapsed time: <span class="token number">00</span>:<span class="token number">00</span>:<span class="token number">01</span>Finished recover at <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">45</span>:<span class="token number">11</span><span class="token comment" spellcheck="true">--这里不知道为什么控制文件也帮我恢复了</span>ASMCMD <span class="token punctuation">[</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token punctuation">]</span> <span class="token operator">></span> lsCONTROLFILE<span class="token operator">/</span>DATAFILE<span class="token operator">/</span>PARAMETERFILE<span class="token operator">/</span>control01<span class="token punctuation">.</span>ctlspfileracdb<span class="token punctuation">.</span>oraASMCMD <span class="token punctuation">[</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">cd</span> datafileASMCMD <span class="token punctuation">[</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token punctuation">]</span> <span class="token operator">></span> lsSYSAUX<span class="token number">.260</span><span class="token punctuation">.</span><span class="token number">966959061</span>SYSTEM<span class="token number">.261</span><span class="token punctuation">.</span><span class="token number">966959061</span>UNDOTBS1<span class="token number">.262</span><span class="token punctuation">.</span><span class="token number">966959061</span>USERS<span class="token number">.265</span><span class="token punctuation">.</span><span class="token number">966959061</span>ASMCMD <span class="token punctuation">[</span><span class="token operator">+</span>DG_DATA<span class="token operator">/</span>racdb<span class="token operator">/</span>datafile<span class="token punctuation">]</span> <span class="token operator">></span>  QL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> logfile <span class="token keyword">group</span> <span class="token number">3</span> <span class="token punctuation">(</span><span class="token string">'+DG_DATA'</span><span class="token punctuation">)</span> size 100m<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> logfile <span class="token keyword">group</span> <span class="token number">4</span> <span class="token punctuation">(</span><span class="token string">'+DG_DATA'</span><span class="token punctuation">)</span> size 100m<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system switch logfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> member <span class="token keyword">from</span> v$log<span class="token punctuation">;</span><span class="token keyword">select</span> member <span class="token keyword">from</span> v$log       <span class="token operator">*</span>ERROR at line <span class="token number">1</span>:ORA<span class="token number">-00904</span>: <span class="token string">"MEMBER"</span>: invalid identifierSQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$log<span class="token punctuation">;</span>    <span class="token keyword">GROUP</span><span class="token comment" spellcheck="true">#    THREAD#  SEQUENCE#      BYTES  BLOCKSIZE    MEMBERS ARC STATUS         FIRST_CHANGE# FIRST_TIME   NEXT_CHANGE# NEXT_TIME</span><span class="token comment" spellcheck="true">---------- ---------- ---------- ---------- ---------- ---------- --- ---------------- ------------- ------------------- ------------ -------------------</span>         <span class="token number">1</span>          <span class="token number">1</span>          <span class="token number">1</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES ACTIVE        <span class="token number">875061</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">50</span>:<span class="token number">41</span>       <span class="token number">876161</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">02</span>:<span class="token number">43</span>         <span class="token number">2</span>          <span class="token number">1</span>          <span class="token number">2</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> <span class="token keyword">NO</span>  <span class="token keyword">CURRENT</span>       <span class="token number">876161</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">02</span>:<span class="token number">43</span>   <span class="token number">2</span><span class="token punctuation">.</span>8147E<span class="token operator">+</span><span class="token number">14</span>         <span class="token number">3</span>          <span class="token number">1</span>          <span class="token number">0</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES UNUSED     <span class="token number">0</span>                                 <span class="token number">0</span>         <span class="token number">4</span>          <span class="token number">1</span>          <span class="token number">0</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES UNUSED     <span class="token number">0</span>                                 <span class="token number">0</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system switch logfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system switch logfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$log<span class="token punctuation">;</span>    <span class="token keyword">GROUP</span><span class="token comment" spellcheck="true">#    THREAD#  SEQUENCE#      BYTES  BLOCKSIZE    MEMBERS ARC STATUS         FIRST_CHANGE# FIRST_TIME   NEXT_CHANGE# NEXT_TIME</span><span class="token comment" spellcheck="true">---------- ---------- ---------- ---------- ---------- ---------- --- ---------------- ------------- ------------------- ------------ -------------------</span>         <span class="token number">1</span>          <span class="token number">1</span>          <span class="token number">1</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES ACTIVE        <span class="token number">875061</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">50</span>:<span class="token number">41</span>       <span class="token number">876161</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">02</span>:<span class="token number">43</span>         <span class="token number">2</span>          <span class="token number">1</span>          <span class="token number">2</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES ACTIVE        <span class="token number">876161</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">02</span>:<span class="token number">43</span>       <span class="token number">876177</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">03</span>         <span class="token number">3</span>          <span class="token number">1</span>          <span class="token number">3</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES ACTIVE        <span class="token number">876177</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">03</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>         <span class="token number">4</span>          <span class="token number">1</span>          <span class="token number">4</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> <span class="token keyword">NO</span>  <span class="token keyword">CURRENT</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>   <span class="token number">2</span><span class="token punctuation">.</span>8147E<span class="token operator">+</span><span class="token number">14</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">checkpoint</span><span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">checkpoint</span><span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$log<span class="token punctuation">;</span>    <span class="token keyword">GROUP</span><span class="token comment" spellcheck="true">#    THREAD#  SEQUENCE#      BYTES  BLOCKSIZE    MEMBERS ARC STATUS         FIRST_CHANGE# FIRST_TIME   NEXT_CHANGE# NEXT_TIME</span><span class="token comment" spellcheck="true">---------- ---------- ---------- ---------- ---------- ---------- --- ---------------- ------------- ------------------- ------------ -------------------</span>         <span class="token number">1</span>          <span class="token number">1</span>          <span class="token number">1</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES INACTIVE      <span class="token number">875061</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">15</span>:<span class="token number">50</span>:<span class="token number">41</span>       <span class="token number">876161</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">02</span>:<span class="token number">43</span>         <span class="token number">2</span>          <span class="token number">1</span>          <span class="token number">2</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES INACTIVE      <span class="token number">876161</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">02</span>:<span class="token number">43</span>       <span class="token number">876177</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">03</span>         <span class="token number">3</span>          <span class="token number">1</span>          <span class="token number">3</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES INACTIVE      <span class="token number">876177</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">03</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>         <span class="token number">4</span>          <span class="token number">1</span>          <span class="token number">4</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> <span class="token keyword">NO</span>  <span class="token keyword">CURRENT</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>   <span class="token number">2</span><span class="token punctuation">.</span>8147E<span class="token operator">+</span><span class="token number">14</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">drop</span> logfile <span class="token keyword">group</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">alter</span> system <span class="token keyword">drop</span> logfile <span class="token keyword">group</span> <span class="token number">1</span>             <span class="token operator">*</span>ERROR at line <span class="token number">1</span>:ORA<span class="token number">-02065</span>: illegal <span class="token keyword">option</span> <span class="token keyword">for</span> <span class="token keyword">ALTER</span> SYSTEMSQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">drop</span> logfile <span class="token keyword">group</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">drop</span> logfile <span class="token keyword">group</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> SQL<span class="token operator">></span> SQL<span class="token operator">></span> SQL<span class="token operator">></span> SQL<span class="token operator">></span> SQL<span class="token operator">></span> SQL<span class="token operator">></span> SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> logfile <span class="token keyword">group</span> <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">'+DG_DATA'</span><span class="token punctuation">)</span> size 100m<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> logfile <span class="token keyword">group</span> <span class="token number">1</span><span class="token punctuation">(</span><span class="token string">'+DG_DATA'</span><span class="token punctuation">)</span> size 100m<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$log<span class="token punctuation">;</span>    <span class="token keyword">GROUP</span><span class="token comment" spellcheck="true">#    THREAD#  SEQUENCE#      BYTES  BLOCKSIZE    MEMBERS ARC STATUS         FIRST_CHANGE# FIRST_TIME   NEXT_CHANGE# NEXT_TIME</span><span class="token comment" spellcheck="true">---------- ---------- ---------- ---------- ---------- ---------- --- ---------------- ------------- ------------------- ------------ -------------------</span>         <span class="token number">1</span>          <span class="token number">1</span>          <span class="token number">0</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES UNUSED     <span class="token number">0</span>                                 <span class="token number">0</span>         <span class="token number">2</span>          <span class="token number">1</span>          <span class="token number">0</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES UNUSED     <span class="token number">0</span>                                 <span class="token number">0</span>         <span class="token number">3</span>          <span class="token number">1</span>          <span class="token number">3</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES INACTIVE      <span class="token number">876177</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">03</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>         <span class="token number">4</span>          <span class="token number">1</span>          <span class="token number">4</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> <span class="token keyword">NO</span>  <span class="token keyword">CURRENT</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>   <span class="token number">2</span><span class="token punctuation">.</span>8147E<span class="token operator">+</span><span class="token number">14</span>SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$log<span class="token punctuation">;</span>    <span class="token keyword">GROUP</span><span class="token comment" spellcheck="true">#    THREAD#  SEQUENCE#      BYTES  BLOCKSIZE    MEMBERS ARC STATUS         FIRST_CHANGE# FIRST_TIME   NEXT_CHANGE# NEXT_TIME</span><span class="token comment" spellcheck="true">---------- ---------- ---------- ---------- ---------- ---------- --- ---------------- ------------- ------------------- ------------ -------------------</span>         <span class="token number">1</span>          <span class="token number">1</span>          <span class="token number">0</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES UNUSED     <span class="token number">0</span>                                 <span class="token number">0</span>         <span class="token number">2</span>          <span class="token number">1</span>          <span class="token number">0</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES UNUSED     <span class="token number">0</span>                                 <span class="token number">0</span>         <span class="token number">3</span>          <span class="token number">1</span>          <span class="token number">3</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> YES INACTIVE      <span class="token number">876177</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">03</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>         <span class="token number">4</span>          <span class="token number">1</span>          <span class="token number">4</span>  <span class="token number">104857600</span>        <span class="token number">512</span>          <span class="token number">1</span> <span class="token keyword">NO</span>  <span class="token keyword">CURRENT</span>       <span class="token number">876180</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span>:<span class="token number">03</span>:<span class="token number">04</span>   <span class="token number">2</span><span class="token punctuation">.</span>8147E<span class="token operator">+</span><span class="token number">14</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system switch logfile<span class="token punctuation">;</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token operator">/</span>System altered<span class="token punctuation">.</span>SQL<span class="token operator">></span> <span class="token keyword">alter</span> system <span class="token keyword">checkpoint</span>  <span class="token number">2</span>  <span class="token punctuation">;</span>System altered<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
            <tag> DML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle之DDL和对象管理</title>
      <link href="/oracle/oracle-zhi-ddl-he-dui-xiang-guan-li/"/>
      <url>/oracle/oracle-zhi-ddl-he-dui-xiang-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语言之DDL和对象管理"><a href="#SQL语言之DDL和对象管理" class="headerlink" title="SQL语言之DDL和对象管理"></a>SQL语言之DDL和对象管理</h1><p><a href="https://docs.oracle.com/cd/E11882_01/index.htm" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a></p><h2 id="1-介绍用户模拟下可以访问的模式对象"><a href="#1-介绍用户模拟下可以访问的模式对象" class="headerlink" title="1 介绍用户模拟下可以访问的模式对象"></a>1 介绍用户模拟下可以访问的模式对象</h2><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token keyword">SELECT</span> object_type<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> user_objects<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> object_type<span class="token punctuation">;</span>  <span class="token keyword">SELECT</span> object_type<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> all_objects<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> object_type<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> owner  <span class="token keyword">FROM</span> all_objects<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-研究模式中的数据类型"><a href="#2-研究模式中的数据类型" class="headerlink" title="2 研究模式中的数据类型"></a>2 研究模式中的数据类型</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.DESC</span><span class="token comment" spellcheck="true">-- 2.SQL</span><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span> data_type  <span class="token keyword">FROM</span> user_tab_columns <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">'EMPLOYEES'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> data_type  <span class="token keyword">FROM</span> user_tab_columns <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">'EMPLOYEES'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-表的创建与管理"><a href="#3-表的创建与管理" class="headerlink" title="3 表的创建与管理"></a>3 表的创建与管理</h2><h3 id="3-1-表的创建"><a href="#3-1-表的创建" class="headerlink" title="3.1 表的创建"></a>3.1 表的创建</h3><ul><li>语法</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">schema</span><span class="token punctuation">,</span><span class="token punctuation">]</span> table_name<span class="token punctuation">(</span>column_name data_type <span class="token punctuation">[</span><span class="token keyword">default</span> express<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">constraint</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>column_name data_type <span class="token punctuation">[</span><span class="token keyword">default</span> express<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">constraint</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>column_name data_type <span class="token punctuation">[</span><span class="token keyword">default</span> express<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">constraint</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--1.表的创建与结构变更</span><span class="token comment" spellcheck="true">--01.工具</span><span class="token comment" spellcheck="true">--A：创建表</span><span class="token comment" spellcheck="true">--B：写入数据</span><span class="token comment" spellcheck="true">--C：更改结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SQL 语法</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建sql02,sql03,sql04</span> <span class="token comment" spellcheck="true">--创建sql02,sql03,sql04</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SQL02<span class="token punctuation">(</span>    sql02_id        NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql02_id2       NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql02_date      <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql02_status    VARCHAR2 <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql02_number NUMBER <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SQL03<span class="token punctuation">(</span>    sql03_id1    NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql03_id2    NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql03_id3    NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> sql03    <span class="token keyword">MODIFY</span> <span class="token punctuation">(</span>sql03_id3 VARCHAR2 <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> SQL04<span class="token punctuation">(</span>    sql04_id        NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql04_desc      VARCHAR2 <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql04_status    VARCHAR2 <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql04_price     NUMBER <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql04_date      <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    sql04_count     NUMBER <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-表的重命名"><a href="#3-2-表的重命名" class="headerlink" title="3.2 表的重命名"></a>3.2 表的重命名</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">RENAME</span> sql044 <span class="token keyword">TO</span> sql04<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SQL04    <span class="token keyword">MODIFY</span> sql04_count NUMBER <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SQL04    <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> sql04_count <span class="token keyword">TO</span> SQL04_COUNT2<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> SQL04    <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> sql04_count02 <span class="token keyword">TO</span> SQL04_COUNT<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tab <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-表的复制"><a href="#3-3-表的复制" class="headerlink" title="3.3 表的复制"></a>3.3 表的复制</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> itpux05<span class="token keyword">AS</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql04<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sql01<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> itpux06<span class="token keyword">AS</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span>      <span class="token keyword">FROM</span> sql01     <span class="token keyword">WHERE</span> sql01_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> itpux06<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-表的截断"><a href="#3-4-表的截断" class="headerlink" title="3.4 表的截断"></a>3.4 表的截断</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--100g delete 2h,truncate 2 分钟。</span><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> itpux07<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> itpux07<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-表的删除"><a href="#3-4-表的删除" class="headerlink" title="3.4 表的删除"></a>3.4 表的删除</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> itpux06<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-删除表的定义"><a href="#3-4-删除表的定义" class="headerlink" title="3.4 .删除表的定义"></a>3.4 .删除表的定义</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">CASCADE</span> CONSTRAINTS<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">--相关的视图，约束，等相关所有的关系对象。</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">PURGE</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">--释放资源，不经过回收站。</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> itpux05 <span class="token keyword">CASCADE</span> CONSTRAINTS<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> itpux05 <span class="token keyword">PURGE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-簇的概念与介绍"><a href="#4-簇的概念与介绍" class="headerlink" title="4 簇的概念与介绍"></a>4 簇的概念与介绍</h2><blockquote><p>簇(cluster)其实就是一组表，由一组共享相同数据块的多个表组成，将经常一起使用的表<br>组合在一起成簇可以提高处理效率；在一个簇中的表就叫做簇表。</p></blockquote><ul><li>不宜用聚簇表的情况</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">)</span>如果预料到聚簇中的表会大量修改<span class="token punctuation">,</span>聚簇表会对DML 的性能产生负面影响<span class="token number">2</span><span class="token punctuation">)</span>非常不适合对单表的全表扫描<span class="token punctuation">,</span>因为只能引起对其它表的全表扫描<span class="token number">3</span><span class="token punctuation">)</span>频繁对表进行<span class="token keyword">TRUNCATE</span> 和加载<span class="token punctuation">,</span>因为聚簇中的表是不能<span class="token keyword">TRUNCATE</span> 的，只能<span class="token keyword">TRUNCATE</span> 簇<span class="token number">4</span><span class="token punctuation">)</span>如果表只是偶尔被连接或者它们的公共列经常被修改，则不要聚簇表<span class="token number">5</span><span class="token punctuation">)</span>如果经常从所有有相同聚簇键值的表查询出的结果数据超过一个或两个Oracle 块，则不要聚簇表<span class="token number">6</span><span class="token punctuation">)</span>如果空间不够，并且不能为将要插入的新记录分配额外的空间，那么不要使用聚簇<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-临时表的创建与使用"><a href="#5-临时表的创建与使用" class="headerlink" title="5 临时表的创建与使用"></a>5 临时表的创建与使用</h2><h3 id="5-1-会话级临时表"><a href="#5-1-会话级临时表" class="headerlink" title="5.1 会话级临时表"></a>5.1 会话级临时表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--会话结束自动清空数据</span><span class="token keyword">CREATE</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span>    col1 type1<span class="token punctuation">,</span>    col2 type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">on</span> <span class="token keyword">commit</span> preserve <span class="token keyword">rows</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-事务级临时表"><a href="#5-2-事务级临时表" class="headerlink" title="5.2 事务级临时表"></a>5.2 事务级临时表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--事务结束（commit,rollback） ，清除数据。</span><span class="token keyword">CREATE</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">(</span>    col1 type1<span class="token punctuation">,</span>    col2 type2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">on</span> <span class="token keyword">commit</span> <span class="token keyword">delete</span> <span class="token keyword">rows</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-索引的创建与管理"><a href="#6-索引的创建与管理" class="headerlink" title="6 索引的创建与管理"></a>6 索引的创建与管理</h2><h2 id="6-1-索引分类"><a href="#6-1-索引分类" class="headerlink" title="6.1 索引分类"></a>6.1 索引分类</h2><ul><li><p>逻辑分类</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>单列或多列<span class="token number">2</span><span class="token punctuation">.</span>唯一索引和非唯一索引<span class="token number">3</span><span class="token punctuation">.</span>函数索引Doman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>物理分类<br><code>`</code>sql<br>物理分类:<br>B-TREE<br>Bitmap</p></li></ul><p>B<em>Tree 索引<br>B</em>Tree 索引是最常见的索引结构，默认建立的索引就是这种类型的索引。</p><p>DML 语句：<br>Create index indexname on tablename(columnname[columnname…])<br>Bitmap 索引<br>位图索引主要用于决策支持系统或静态数据，不支持行级锁定</p><pre><code>## 6.2 索引的日常管理* 基本语法```sqlCREATE [UNIQUE] | [BITMAP] INDEX index_name --unique 表示唯一索引ON table_name([column1 [ASC|DESC],column2 --bitmap，创建位图索引[ASC|DESC],…] | [express])[TABLESPACE tablespace_name][PCTFREE n1] --指定索引在数据块中空闲空间[STORAGE (INITIAL n2)][NOLOGGING] --表示创建和重建索引时允许对表做DML 操作，默认情况下不应该使用[NOLINE][NOSORT]; --表示创建索引时不进行排序，默认不适用，如果数据已经是按照该索引顺序排列的可以使用</code></pre><ul><li>1.添加/创建索引<br><code>`</code>sql<br>–工具</li></ul><p>CREATE INDEX cust_name_i1<br>    ON SQL01 (sql01_name);       –单列索引</p><p>CREATE INDEX cust_name_i1<br>    ON SQL01 (sql01_name)<br>    TABLESPACE ITPUX;            –单列<br>索引指定表空间<br>–命令</p><p>CREATE INDEX cust_name_i2<br>    ON sql01 (sql01_name, sql01_status);    –组合索引</p><p>CREATE BITMAP INDEX sql01_level_i3<br>    ON sql01 (sql01_level);      –位图索引</p><pre><code>* 2.修改索引```sql--重命名索引ALTER INDEX cust_name_i1    RENAME TO idx1_sql01_name;--合并索引ALTER INDEX idx1_sql01_name    COALESCE;</code></pre><ul><li>3.重建索引<br><code>`</code>sql<br>–重命名索引</li></ul><p>–删除原来的索引，重新建立索引。<br>DROP INDEX idx1_sql01_name;</p><p>CREATE INDEX idx1_sql01_name<br>    ON SQL01 (sql01_name);</p><p>–直接rebuild</p><p>ALTER INDEX idx1_sql01_name<br>    REBUILD;                                    –会锁表。</p><p>ALTER INDEX idx1_sql01_name<br>    REBUILD ONLINE;</p><pre><code>* 4.删除索引```sqlDROP INDEX idx1_sql01_name;</code></pre><ul><li>5.查看索引<br><code>`</code>sql<br>–select * from user_indexes;</li></ul><p>SELECT *<br>  FROM dba_indexes<br> WHERE owner = ‘ITPUX’;</p><p>SELECT *<br>  FROM dba_indexes<br> WHERE table_name = ‘SQL01’;</p><p>–select <em> from all_indexes;<br>–select </em> from user_ind_columns;</p><p>SELECT *<br>  FROM dba_ind_columns<br> WHERE index_owner = ‘ITPUX’ AND table_name = ‘SQL01’;</p><p>–select * from all_ind_columns;</p><p>SELECT index_name,<br>       column_name,<br>       index_type,<br>       uniqueness,<br>       tablespace_name<br>  FROM dba_indexes NATURAL JOIN dba_ind_columns<br> WHERE table_name = ‘SQL01’;</p><pre><code>## 7 约束的创建与管理### 7.1  5种约束* 1.not null (非空约束)```sql--1.1 创建表的时候CREATE TABLE itpux01(    id    NUMBER NOT NULL PRIMARY KEY,    name VARCHAR2 (20));--1.2 在已经创建的表加添加CREATE TABLE itpux02(    id NUMBER,    name VARCHAR2 (20));ALTER TABLE itpux02    MODIFY id NOT NULL;--1.3 验证。INSERT INTO itpux02     VALUES (NULL, &#39;name&#39;);INSERT INTO itpux02     VALUES (1, &#39;name&#39;);SELECT * FROM itpux02;--1.4 删除ALTER TABLE itpux02    MODIFY id NULL;INSERT INTO itpux02     VALUES (NULL, &#39;name&#39;);SELECT * FROM itpux02;INSERT INTO itpux02     VALUES (2, &#39;name&#39;);</code></pre><ul><li>2.primary key 约束<br><code>`</code>sql<br>DROP TABLE itpux01;<br>CREATE TABLE itpux01<br>(<br>  id    NUMBER NOT NULL PRIMARY KEY,<br>  name VARCHAR2 (20)<br>);<br>–1.2 在已经创建的表加添加<br>DROP TABLE itpux02;</li></ul><p>CREATE TABLE itpux02<br>(<br>    id NUMBER,<br>    name VARCHAR2 (20)<br>);</p><p>ALTER TABLE itpux02<br>    ADD CONSTRAINT itpux02_id_con PRIMARY KEY (id); –建议命名<br>–alter table itpux02 drop constraint itpux02_id_con;</p><p>ALTER TABLE itpux02<br>    ADD PRIMARY KEY (id);</p><p>–1.3 删除</p><p>ALTER TABLE itpux02<br>    DROP CONSTRAINT itpux02_id_con;</p><p>ALTER TABLE itpux02<br>    DROP CONSTRAINT SYS_C0011169;</p><pre><code>* 3.unique 约束```sql--3.1 创建表的时候CREATE TABLE itpux03(    id      NUMBER NOT NULL,    name    VARCHAR2 (20) UNIQUE);INSERT INTO itpux03     VALUES (1, &#39;name1&#39;);INSERT INTO itpux03     VALUES (2, &#39;name2&#39;);--3.2 删除ALTER TABLE itpux03    DROP UNIQUE (name);INSERT INTO itpux03     VALUES (3, &#39;name2&#39;);--3.3 后期添加ALTER TABLE itpux03    ADD UNIQUE (name);DELETE FROM itpux03      WHERE id = 3;ALTER TABLE itpux03    ADD UNIQUE (name);</code></pre><ul><li>4.Check 约束<br><code>`</code>sql<br>–4.1 新建表添加约束</li></ul><p>CREATE TABLE itpux04<br>(<br>    id     NUMBER NOT NULL PRIMARY KEY,<br>    name VARCHAR2 (20),<br>    age    NUMBER CONSTRAINT itpux04_age_con CHECK (age &gt; 17)<br>);</p><p>INSERT INTO itpux04<br>     VALUES (1, ‘mm’, 16);</p><p>INSERT INTO itpux04<br>     VALUES (2, ‘mm’, 18);</p><p>–4.2 删除</p><p>ALTER TABLE itpux04<br>    DROP CONSTRAINT itpux04_age_con;</p><p>–4.3 后期<br>alter table itpux04 add constraint itpux04_age_con check(age&gt;17);</p><pre><code>* 5.Foreign key 约束```sqlCREATE TABLE itpux051(    jobid    NUMBER NOT NULL PRIMARY KEY,    name1 VARCHAR2 (20),    age NUMBER (3));CREATE TABLE itpux052(    no      NUMBER NOT NULL PRIMARY KEY,    dcname VARCHAR2 (20),    dcid    NUMBER REFERENCES itpux051 (jobid));INSERT INTO itpux052     VALUES (1, &#39;dc1008&#39;, 20161218);                                                  --errorINSERT INTO itpux051     VALUES (20161218, &#39;风哥&#39;, 31);INSERT INTO itpux052     VALUES (1, &#39;dc1008&#39;, 20161218);SELECT * FROM itpux051;SELECT * FROM itpux052;--删除ALTER TABLE itpux052    DROP CONSTRAINT SYS_C0011182;DROP TABLE itpux051;DROP TABLE itpux051 CASCADE CONSTRAINTS;--后期增加ALTER TABLE itpux052    ADD CONSTRAINT itpux052_dcid_con FOREIGN KEY (dcid)        REFERENCES itpux051 (jobid);</code></pre><h3 id="7-1-约束的管理"><a href="#7-1-约束的管理" class="headerlink" title="7.1  约束的管理"></a>7.1  约束的管理</h3><ul><li>1.约束表级定义与列级定义<br><code>`</code>sql<br>–1.1 表级定义<br>CREATE TABLE itpux08<br>(<br>  id NUMBER (8),<br>  name VARCHAR2 (50),<br>  CONSTRAINT pk_itpux08_id PRIMARY KEY (id)<br>);</li></ul><p>–1.2 列级定义<br>CREATE TABLE itpux09<br>(<br>    id    NUMBER (8) CONSTRAINT pk_itpux09_id PRIMARY KEY,<br>    name VARCHAR2 (50)<br>);</p><pre><code>* 2.约束的disable/enable,validate/novalidate 的区别```sql--disable 禁用--disable validate --关闭后，不能增删改--disable novalidate --关闭后，可以增删改--enable 启用--enable validate --启用后，进行所有约束，有的，新加的--enable novalidate --启用后，对新加入的约束，对旧的不约束--2.1 非主键的CREATE TABLE itpux06(    id     NUMBER NOT NULL PRIMARY KEY,    name VARCHAR2 (20),    age    NUMBER CONSTRAINT itpux06_age_con CHECK (age &gt; 17));ALTER TABLE itpux06    DISABLE CONSTRAINT itpux06_age_con;   --novalidateINSERT INTO itpux06     VALUES (2, &#39;name2&#39;, 18);ALTER TABLE itpux06    ENABLE CONSTRAINT itpux06_age_con;     --validateALTER TABLE itpux06    DISABLE VALIDATE CONSTRAINT itpux06_age_con;                                                                 --validateINSERT INTO itpux06     VALUES (3, &#39;name3&#39;, 18);              --errorALTER TABLE itpux06    ENABLE CONSTRAINT itpux06_age_con;     --validateINSERT INTO itpux06     VALUES (3, &#39;name3&#39;, 18);ALTER TABLE itpux06    DISABLE CONSTRAINT itpux06_age_con;    --novalidateINSERT INTO itpux06     VALUES (4, &#39;name4&#39;, 16);ALTER TABLE itpux06    ENABLE CONSTRAINT itpux06_age_con;     --errprALTER TABLE itpux06    ENABLE NOVALIDATE CONSTRAINT itpux06_age_con;--2.2 主键的CREATE TABLE itpux07(    id NUMBER,    name VARCHAR2 (20));ALTER TABLE itpux07    ADD CONSTRAINT itpux07_id_con PRIMARY KEY (id);INSERT INTO itpux07     VALUES (1, &#39;name1&#39;);ALTER TABLE itpux07    DISABLE CONSTRAINT itpux07_id_con;    --novalidateINSERT INTO itpux07     VALUES (1, &#39;name2&#39;);SELECT * FROM itpux07;ALTER TABLE itpux07    ENABLE CONSTRAINT itpux07_id_con;    --errorALTER TABLE itpux07    ENABLE NOVALIDATE CONSTRAINT itpux07_id_con;                                                                 --errorCREATE INDEX idx_itpux07_id    ON itpux07 (id);ALTER TABLE itpux07    ENABLE NOVALIDATE CONSTRAINT itpux07_id_con;                                                                 --okSELECT * FROM itpux07;</code></pre><h3 id="7-3-显示约束的信息"><a href="#7-3-显示约束的信息" class="headerlink" title="7.3 显示约束的信息"></a>7.3 显示约束的信息</h3><ul><li><p>1.约束的数据字典</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_constraints<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_constraints<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_constraints<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> constraint_type <span class="token keyword">from</span> user_constraints <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- R references : column</span><span class="token comment" spellcheck="true">-- U unique : column</span><span class="token comment" spellcheck="true">-- P primary key : column</span><span class="token comment" spellcheck="true">-- C check : column</span><span class="token comment" spellcheck="true">-- O read only on a view : object</span><span class="token comment" spellcheck="true">-- V Check on a view : object</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_cons_columns<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_cons_columns<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_cons_columns<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_constraints <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'ITPUX08'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.约束的可延迟属性<br><code>`</code>sql<br>select * from dba_constraints where table_name=’ITPUX08’;</p></li></ul><p>–DEFERRABLE(延迟条件): NOT DEFERRABLE(默认，立即验证), DEFERRABLE（提<br>交时验证）<br>–DEFERRED ： IMMEDIATE(默认，立即验证)，DEFERRED（提交时才验证）,<br>–set constraint 名字immediate;<br>–用途：物化视图，级联更新。</p><p>create table itpux10(<br>id number not null primary key DEFERRABLE initially IMMEDIATE,<br>name varchar2(20),<br>age number constraint itpux10_age_con check(age&gt;17) DEFERRABLE<br>initially DEFERRED);</p><p>select * from dba_constraints where table_name=’ITPUX10’;</p><pre><code>## 8 视图的创建与管理### 8.1 语法```sqlCREATE [OR REPLACE] [FORCE|NOFORCE] VIEW view_name[(alias[, alias]...)]AS subquery[WITH CHECK OPTION [CONSTRAINT constraint]][WITH READ ONLY]OR REPLACE ：若所创建的试图已经存在，ORACLE 自动重建该视图；FORCE ：不管基表是否存在ORACLE 都会自动创建该视图；NOFORCE ：只有基表都存在ORACLE 才会创建该视图：alias ：为视图产生的列定义的别名；subquery ：一条完整的SELECT 语句，可以在该语句中定义别名；WITH CHECK OPTION ：插入或修改的数据行必须满足视图定义的约束；WITH READ ONLY ：该视图上不能进行任何DML 操作。-- O read only on a view : object-- V Check OPTION on a view : object</code></pre><h2 id="9-同义词创建和使用"><a href="#9-同义词创建和使用" class="headerlink" title="9 同义词创建和使用"></a>9 同义词创建和使用</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.创建同义词</span><span class="token keyword">create</span> synonym yg_s <span class="token keyword">for</span> yg_v<span class="token punctuation">;</span><span class="token keyword">create</span> synonym bm_s <span class="token keyword">for</span> bm_v<span class="token punctuation">;</span><span class="token keyword">create</span> synonym bm_sum_s <span class="token keyword">for</span> bm_sum_v<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> yg_s<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bm_s<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> yg_v<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> bm_v<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">view</span> bm_sum_v compile<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> bm_sum_v<span class="token punctuation">;</span><span class="token keyword">alter</span> synonym yg_s compile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--2.删除同义词</span><span class="token keyword">drop</span> synonym yg_s<span class="token punctuation">;</span><span class="token keyword">drop</span> synonym bm_s<span class="token punctuation">;</span><span class="token keyword">drop</span> synonym bm_sum_s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--3.查看同义词</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_synonyms <span class="token keyword">where</span> owner<span class="token operator">=</span><span class="token string">'ITPUX'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_synonyms<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_synonyms<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>emp<span class="token punctuation">;</span><span class="token keyword">create</span> synonym emp_s <span class="token keyword">for</span> scott<span class="token punctuation">.</span>emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp_s<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> scott<span class="token punctuation">.</span>emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--4.权限</span><span class="token keyword">grant</span> <span class="token keyword">create</span> synonym <span class="token keyword">to</span> itpux01<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">any</span> synonym <span class="token keyword">to</span> itpux01<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">public</span> synonym <span class="token keyword">to</span> itpux01<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-序列创建和使用"><a href="#10-序列创建和使用" class="headerlink" title="10 序列创建和使用."></a>10 序列创建和使用.</h2><h3 id="10-1-语法"><a href="#10-1-语法" class="headerlink" title="10.1 语法"></a>10.1 语法</h3><pre class="line-numbers language-sql"><code class="language-sql">创建序列：<span class="token number">1</span>、要有创建序列的权限<span class="token keyword">create</span> sequence 或<span class="token keyword">create</span> <span class="token keyword">any</span> sequence<span class="token number">2</span>、创建序列的语法<span class="token keyword">CREATE</span> SEQUENCE sequence <span class="token comment" spellcheck="true">//创建序列名称</span>        <span class="token punctuation">[</span>INCREMENT <span class="token keyword">BY</span> n<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//递增的序列值是n 如果n 是正数就递增,如果是负数</span>        就递减默认是<span class="token number">1</span>        <span class="token punctuation">[</span><span class="token keyword">START</span> <span class="token keyword">WITH</span> n<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//开始的值,递增默认是minvalue 递减是maxvalue</span>        <span class="token punctuation">[</span>{MAXVALUE n <span class="token operator">|</span> NOMAXVALUE}<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//最大值</span>        <span class="token punctuation">[</span>{MINVALUE n <span class="token operator">|</span> NOMINVALUE}<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//最小值</span>        <span class="token punctuation">[</span>{CYCLE <span class="token operator">|</span> <span class="token keyword">NOCYCLE</span>}<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//循环/不循环</span>        <span class="token punctuation">[</span>{CACHE n <span class="token operator">|</span> NOCACHE}<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配并存入到内存中</span>    NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用    CURRVAL 中存放序列的当前值    NEXTVAL 应在CURRVAL 之前指定，二者应同时有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-日常使用"><a href="#10-2-日常使用" class="headerlink" title="10.2 日常使用"></a>10.2 日常使用</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建普通序列</span><span class="token keyword">create</span> sequence seql <span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">10</span> nocache maxvalue <span class="token number">15</span> cycle<span class="token punctuation">;</span><span class="token keyword">create</span> sequence seql1<span class="token comment" spellcheck="true">--创建一个带主键的表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> seqtest<span class="token keyword">create</span> <span class="token keyword">table</span> seqtest<span class="token punctuation">(</span>    <span class="token number">c1</span> number<span class="token punctuation">,</span>    <span class="token number">c2</span> varchar2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> seqtest <span class="token keyword">add</span> <span class="token keyword">constraint</span> seqtest_pk <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span><span class="token number">c1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> sequence seq_test_pk_s    minvalue <span class="token number">1</span>    maxvalue <span class="token number">9999999999999999</span>    <span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">1</span>    increment <span class="token keyword">by</span> <span class="token number">1</span>    cache <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--间断</span>A:<span class="token keyword">insert</span> <span class="token keyword">into</span> seqtest <span class="token keyword">values</span> <span class="token punctuation">(</span>seq_test_pk_s<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span>B:<span class="token keyword">insert</span> <span class="token keyword">into</span> seqtest <span class="token keyword">values</span> <span class="token punctuation">(</span>seq_test_pk_s<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span><span class="token string">'22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>A:<span class="token keyword">insert</span> <span class="token keyword">into</span> seqtest <span class="token keyword">values</span> <span class="token punctuation">(</span>seq_test_pk_s<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span><span class="token string">'33'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> seqtest<span class="token punctuation">;</span>B:<span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> seqtest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--删除</span><span class="token keyword">drop</span> <span class="token keyword">table</span> seqtest<span class="token keyword">drop</span> sequence SEQ_TEST_PK_S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-存储过程创建和使用"><a href="#11-存储过程创建和使用" class="headerlink" title="11 存储过程创建和使用"></a>11 存储过程创建和使用</h2><h3 id="11-1-语法"><a href="#11-1-语法" class="headerlink" title="11.1 语法"></a>11.1 语法</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> REPLACE<span class="token punctuation">]</span> <span class="token keyword">PROCEDURE</span> procedure_name<span class="token punctuation">[</span><span class="token punctuation">(</span>parameter1<span class="token punctuation">[</span>model<span class="token punctuation">]</span> datatype1<span class="token punctuation">,</span> parameter2 <span class="token punctuation">[</span>model<span class="token punctuation">]</span> datatype2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">IS</span><span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span><span class="token keyword">BEGIN</span>PL<span class="token operator">/</span>SQL<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token punctuation">[</span>procedure_name<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2日常使用"><a href="#11-2日常使用" class="headerlink" title="11.2日常使用"></a>11.2日常使用</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--1.编写存储过程</span><span class="token comment" spellcheck="true">--显示当前系统时间</span><span class="token comment" spellcheck="true">--通过pl/sql dev 菜单</span><span class="token comment" spellcheck="true">--手写</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> print_sysdate<span class="token operator">is</span><span class="token keyword">begin</span>    dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>sysdate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> print_sysdate<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">--2.存储过程的调用</span><span class="token comment" spellcheck="true">--sqlplus,pl/sql 代码块</span><span class="token keyword">exec</span> print_sysdate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--set serverout on;</span><span class="token comment" spellcheck="true">--exec print_sysdate();</span><span class="token comment" spellcheck="true">--3.存储过程的删除</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> test1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--4.编译存储过程</span><span class="token comment" spellcheck="true">--界面</span><span class="token comment" spellcheck="true">--命令</span><span class="token keyword">alter</span> <span class="token keyword">procedure</span> print_sysdate compile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--5.查询存储过程</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_objects <span class="token keyword">where</span> object_type<span class="token operator">=</span><span class="token string">'PROCEDURE'</span> <span class="token operator">and</span>owner<span class="token operator">=</span><span class="token string">'ITPUX'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_objects <span class="token keyword">where</span> object_type<span class="token operator">=</span><span class="token string">'PROCEDURE'</span> <span class="token operator">and</span> owner<span class="token operator">=</span><span class="token string">'ITPUX'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_objects <span class="token keyword">where</span> object_type<span class="token operator">=</span><span class="token string">'PROCEDURE'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--6.查看存储过程的内容</span><span class="token comment" spellcheck="true">--界面</span><span class="token comment" spellcheck="true">--命令</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_source <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'PRINT_SYSDATE'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_source <span class="token keyword">where</span> owner<span class="token operator">=</span><span class="token string">'ITPUX'</span> <span class="token operator">and</span> name<span class="token operator">=</span><span class="token string">'PRINT_SYSDATE'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_source<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">text</span> <span class="token keyword">from</span> user_source <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'PRINT_SYSDATE'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_source <span class="token keyword">where</span> <span class="token keyword">type</span><span class="token operator">=</span><span class="token string">'PROCEDURE'</span> <span class="token operator">and</span> <span class="token keyword">text</span> <span class="token operator">like</span> <span class="token string">'%sysdate%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-存储过程中事务处理"><a href="#11-3-存储过程中事务处理" class="headerlink" title="11.3 存储过程中事务处理"></a>11.3 存储过程中事务处理</h3><ul><li>存储过程中事务处理<br><code>`</code>sql<br>–案例1 显示YG 表中员工人数的存储过程。<br>create or replace procedure yg_count<br>as<br>v_total number(10);<br>begin<br>  select count(*) into v_total from yg;<br>  dbms_output.put_line(‘员工总人数为：’||v_total);<br>end;<br>set serverout on;<br>execute yg_count;<br>–员工总人数为：107</li></ul><p>–案例2 存储过程中的增删改DML 事务操作。<br>–准备<br>create table itpux_st(id int,name varchar2(10));<br>insert into itpux_st values(1,’itpux01’);<br>insert into itpux_st values(2,’itpux02’);<br>commit;</p><p>–2.1 增加<br>–创建过程<br>create or replace procedure pro_insert<br>(v_id int,v_name varchar2)<br>is<br>begin<br>    insert into itpux_st values(v_id,v_name);<br>commit;<br>end;<br>–执行<br>begin<br>    pro_insert(3,’itpux03’);<br>end;<br>–检查<br>select * from itpux_st;</p><p>–2.2 删除<br>–创建过程<br>create or replace procedure pro_delete<br>(v_id int)<br>is<br>begin<br>    delete from itpux_st where id=v_id;<br>commit;<br>end;<br>–执行<br>begin<br>pro_delete(3);<br>end;<br>–检查<br>select * from itpux_st;</p><p>–2.3 更新/更改<br>–创建过程<br>create or replace procedure pro_update<br>(v_id int,v_name varchar2)<br>is<br>begin<br>    update itpux_st set name=v_name where id=v_id;<br>commit;<br>end;<br>–执行<br>begin<br>    pro_update(2,’itpux02222’);<br>end;<br>–检查<br>select * from itpux_st;</p><p>–2.4 查询<br>–创建过程<br>create or replace procedure pro_select<br>(v_id int) –定义输入变量<br>is<br>    v_name varchar2(10);–定义输出变量<br>begin<br>    select name into v_name from itpux_st where id=v_id;–执行查询<br>    dbms_output.put_line(‘学生姓名为：’||v_name);–输出结果<br>end;<br>–执行<br>–set serverout on;<br>begin<br>pro_select(2);<br>end;</p><pre><code>## 12 触发器创建和使用* 1.触发器的语法```sqlCREATE [OR REPLACE] TIGGER 触发器名触发时间触发事件    ON 表名/视图名    [FOR EACH ROW] //加上FOR EACH ROW 即为行级触发器，不加时为语句    级触发器    BEGIN    pl/sql 语句    END</code></pre><h3 id="12-1-DML-触发器及案例"><a href="#12-1-DML-触发器及案例" class="headerlink" title="12.1 DML 触发器及案例"></a>12.1 DML 触发器及案例</h3><ul><li><p>语法</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> replace<span class="token punctuation">]</span> <span class="token keyword">trigger</span> 触发器名称  {before<span class="token operator">|</span><span class="token keyword">after</span>}  {<span class="token keyword">insert</span><span class="token operator">|</span><span class="token keyword">delete</span><span class="token operator">|</span><span class="token keyword">update</span><span class="token punctuation">[</span><span class="token keyword">of</span> <span class="token keyword">column</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>}  <span class="token operator">or</span> {<span class="token keyword">insert</span><span class="token operator">|</span><span class="token keyword">delete</span><span class="token operator">|</span><span class="token keyword">update</span><span class="token punctuation">[</span><span class="token keyword">of</span> <span class="token keyword">column</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>}  <span class="token keyword">on</span> <span class="token punctuation">[</span><span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token punctuation">]</span> 表名<span class="token operator">|</span><span class="token punctuation">[</span><span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token punctuation">]</span>视图  <span class="token punctuation">[</span><span class="token keyword">for each row</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">when</span> condition<span class="token punctuation">]</span><span class="token keyword">begin</span>执行语句<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>1.设置一个添加记录就提示的触发器<br><code>`</code>sql<br>create or replace trigger t1<br>after insert on itpux.emp<br>  begin</p><pre><code>  dbms_output.put_line(&#39;你向ITPUX.EMP 表中添加了一条数据&#39;);</code></pre><p>  end;<br>/</p></li></ul><p>–验证<br>–set serverout on<br>insert into emp values(‘8000’,’itpux15’,’DBA’,’8001’,sysdate,’15000’,’0’,’30’);<br>insert into emp values(‘8002’,’itpux16’,’DBA’,’8002’,sysdate,’15000’,’0’,’30’);<br>–你向ITPUX.EMP 表中添加了一条数据</p><pre><code>* 2.设置一个更改记录就提示的触发器```sqlcreate or replace trigger t_updateafter update on itpux.empfor each row --提示每一条修改的记录    begin    dbms_output.put_line(&#39;你修改了ITPUX.EMP 表中多条数据&#39;);    end;/--验证--set serverout onselect * from emp;update emp set job=&#39;DBA+SA+HR&#39; where ENAME in (&#39;itpux15&#39;,&#39;itpux16&#39;);--你修改了ITPUX.EMP 表中多条数据</code></pre><ul><li>3.设置一个删除记录就提示的触发器<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> t_deletebefore <span class="token keyword">delete</span> <span class="token keyword">on</span> itpux<span class="token punctuation">.</span>emp<span class="token keyword">begin</span><span class="token comment" spellcheck="true">--select to_char(sysdate,'day') from dual;</span><span class="token keyword">if</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'day'</span><span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'星期六'</span><span class="token punctuation">,</span><span class="token string">'星期天'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>  dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'禁止在周末删除ITPUX.EMP 表数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  raise_application_error<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">'禁止在周末删除ITPUX.EMP 表数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--</span><span class="token operator">-</span><span class="token number">20000</span><span class="token operator">~</span><span class="token number">20999</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">--验证</span><span class="token comment" spellcheck="true">--set serverout on</span><span class="token keyword">delete</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--ORA-20001: 禁止在周末删除ITPUX.EMP 表数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="12-2-DDL-触发器及案例"><a href="#12-2-DDL-触发器及案例" class="headerlink" title="12.2 DDL 触发器及案例"></a>12.2 DDL 触发器及案例</h3><ul><li>语法<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> ddl 触发器名称<span class="token keyword">after</span> ddl <span class="token keyword">on</span> 方案名<span class="token punctuation">.</span><span class="token keyword">schema</span><span class="token keyword">begin</span>  执行语句<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>基本使用<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--SYSTEM 用户</span><span class="token keyword">drop</span> <span class="token keyword">table</span> itpux_ddl01<span class="token keyword">create</span> <span class="token keyword">table</span> itpux_ddl01<span class="token punctuation">(</span>  dbname varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  event varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  username varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  client_ip varchar2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  ddl_time <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> t_itpux_ddl01<span class="token keyword">after</span> ddl <span class="token keyword">on</span> itpux<span class="token punctuation">.</span><span class="token keyword">schema</span><span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> itpux_ddl01 <span class="token keyword">values</span><span class="token punctuation">(</span>ora_database_name<span class="token punctuation">,</span>ora_sysevent<span class="token punctuation">,</span>ora_login_user<span class="token punctuation">,</span>ora_client_ip_address<span class="token punctuation">,</span>  sysdate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--切换至ITPUX 用户</span><span class="token keyword">create</span> <span class="token keyword">table</span> itpux012<span class="token punctuation">(</span>id number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> system<span class="token punctuation">.</span>itpux_ddl01<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-参考资料"><a href="#12-3-参考资料" class="headerlink" title="12.3 参考资料"></a>12.3 参考资料</h3><code>`</code>sql<br>系统触发器创建基本语法：<br>create or replace trigger 系统触发器名称<br>after[before] logon[logoff] on datebase<br>begin<br>  执行语句;<br>end;</li></ul><p>详细说明：<br>after 事件之后触发<br>before 事件之前触发<br>logon 登陆触发<br>logoff 登出触发<br>startup 开启系统触发<br>shutdown 关闭系统触发</p><pre><code>```sql------------------------------参考资料---------------------------------------下面介绍一些常用的系统事件属性函数，和建立各种事件触发器的方法在建立系统事件触发器时，需要使用事件属性函数，常用的事件属性函数如下：ora_client_ip_address //返回客户端的ipora_database_name //返回数据库名称ora_login_user //返回登陆用户名ora_sysevent //返回触发器的系统事件名ora_des_encrypted_password //返回用户des(md5)加密后的密码事件属性函数表Ora_client_ip_address 返回客户端的ip 地址Ora_database_name 返回当前数据库名Ora_des_encrypted_password 返回des 加密后的用户口令Ora_dict_obj_name 返回ddl 操作所对应的数据库对象名Ora_dict_obj_name_list(name_list out ora_name_list_t)返回在事件中被修改的对象名列表Ora_dict_obj_owner 返回ddl 操作所对应的对象的所有者名Ora_dict_obj_owner_list(owner_list out ora_name_list_t)返回在事件中被修改的对象的所有者列表Ora_dict_obj_type 返回ddl 操作所对应的数据库对象的类型Ora_grantee(user_list out ora_name_list_t)返回授权事件的授权者Ora_instance_num 返回例程号Ora_is_alter_column(column_name in varchar2)检测特定列是否被修改Ora_is_creating_nested_table 检测是否正在建立嵌套表Ora_is_drop_column(column_name in varchar2)检测特定列是否被删除Ora_is_servererror(error_number)检测是否返回了特定oracle 错误Ora_login_user 返回登录用户名Ora_sysevent 返回触发器的系统事件名系统触发器的种类和事件出现的时机（前或后）：事件允许的时机说明STARTUP AFTER 启动数据库实例之后触发SHUTDOWN BEFORE 关闭数据库实例之前触发（非正常关闭不触发）SERVERERROR AFTER 数据库服务器发生错误之后触发LOGON AFTER 成功登录连接到数据库后触发LOGOFF BEFORE 开始断开数据库连接之前触发CREATE BEFORE，AFTER 在执行CREATE 语句创建数据库对象之前、之后触发DROP BEFORE，AFTER 在执行DROP 语句删除数据库对象之前、之后触发ALTER BEFORE，AFTER 在执行ALTER 语句更新数据库对象之前、之后触发DDL BEFORE，AFTER 在执行大多数DDL 语句之前、之后触发GRANT BEFORE，AFTER 执行GRANT 语句授予权限之前、之后触发REVOKE BEFORE，AFTER 执行REVOKE 语句收权限之前、之后触犯发RENAME BEFORE，AFTER 执行RENAME 语句更改数据库对象名称之前、之后触犯发AUDIT/NOAUDIT BEFORE，AFTER 执行AUDIT 或NOAUDIT 进行审计或停止审计之前、之后触发特别说明：系统触发器的级别较高，由系统管理员来创建。------------------------------------------------------------------------------------</code></pre><h3 id="12-4-数据库系统触发器"><a href="#12-4-数据库系统触发器" class="headerlink" title="12.4 数据库系统触发器"></a>12.4 数据库系统触发器</h3><ul><li>1.创建<br><code>`</code>sql<br>–记录登录数据库的用户名和IP<br>create table login_info (ip varchar(30),username varchar(30));<br>create or replace trigger logon_ip_info<br>after logon on database<br>declare<br>  ip varchar(30);<br>  user varchar(30);<br>begin<br>  select sys_context(‘USERENV’,’SESSION_USER’) into user from dual;<br>  select sys_context(‘USERENV’,’ip_address’) into ip from dual;<br>  insert into login_info values(ip,user);<br>end;<br>/</li></ul><p>select * from login_info;</p><pre><code>* 2. 管理```sql--禁用alter trigger logon_ip_info disable;--启用alter trigger logon_ip_info enable;--编译alter trigger logon_ip_info compile;--删除drop trigger logon_ip_info;--查询select * from dba_objects where owner=&#39;ITPUX&#39; and object_type=&#39;TRIGGER&#39;;drop trigger ITPUX.T_UPDATE;drop trigger ITPUX.T_DELETE;drop trigger system.t_itpux_ddl01;</code></pre><h2 id="13-包的创建和使用"><a href="#13-包的创建和使用" class="headerlink" title="13 包的创建和使用"></a>13 包的创建和使用</h2><ul><li>1 包定义（PACKAGE）<pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">2.1</span> 包定义（PACKAGE）<span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> REPLACE<span class="token punctuation">]</span> PACKAGE package_name  {<span class="token operator">IS</span> <span class="token operator">|</span> <span class="token keyword">AS</span>}  <span class="token punctuation">[</span>公有数据类型定义<span class="token punctuation">]</span>  <span class="token punctuation">[</span>公有游标声明<span class="token punctuation">]</span>  <span class="token punctuation">[</span>公有变量、常量声明<span class="token punctuation">]</span>  <span class="token punctuation">[</span>公有子程序声明<span class="token punctuation">]</span>  <span class="token punctuation">[</span>package_name<span class="token punctuation">]</span><span class="token punctuation">;</span>定义包规范:<span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACEpackage p_stu<span class="token keyword">as</span><span class="token comment" spellcheck="true">--定义结构体</span><span class="token keyword">type</span> re_stu <span class="token operator">is</span> record<span class="token punctuation">(</span>  rname student<span class="token punctuation">.</span>name<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">,</span>  rage student<span class="token punctuation">.</span>age<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义游标</span><span class="token keyword">type</span> c_stu <span class="token operator">is</span> ref <span class="token keyword">cursor</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义函数</span><span class="token keyword">function</span> numAdd<span class="token punctuation">(</span>num1 number<span class="token punctuation">,</span>num2 number<span class="token punctuation">)</span><span class="token keyword">return</span> number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义过程</span><span class="token keyword">procedure</span> GetStuList<span class="token punctuation">(</span>cid <span class="token operator">in</span> varchar2<span class="token punctuation">,</span>c_st <span class="token keyword">out</span> c_stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="2"><li>包主体（PACKAGE BODY）<br><code>`</code>sql<br>CREATE [OR REPLACE] PACKAGE BODY package_name<br>{IS | AS}<br>[私有数据类型定义]<br>[私有变量、常量声明]<br>[私有子程序声明和定义]<br>[公有子程序定义]<br>BEGIN<br>执行部分(初始化部分)<br>END [package_name];</li></ol></li></ul><p>–1 创建包<br>create or replace package itpux_pkg<br>is<br>    procedure update_sal(e_name varchar2,newsal number);<br>    FUNCTION emp_sal_fun(e_name varchar2) return number;<br>end;<br>–2.3 包体<br>create or replace package body itpux_pkg is<br>procedure update_sal(e_name varchar2,newsal number)<br>is<br>begin<br>    update emp set sal=newsal where ename=e_name;<br>end;<br>function emp_sal_fun(e_name varchar2)<br>return number is<br>emp_sal number;<br>begin<br>    select sal<em>12+nvl(comm,0) into emp_sal from emp<br>where ename=e_name;<br>return emp_sal;<br>end;<br>end;<br>–2.4 执行包-调过程<br>set serveroutput on<br>    exec itpux_pkg.update_sal(‘itpux14’,2000);<br>commit;<br>select </em> from emp;<br>–查看itpux14 的记录<br>–2.5 执行包-调函数<br>declare<br>    v_emp_sal number(7,2);<br>begin<br>    v_emp_sal:=itpux_pkg.emp_sal_fun(‘itpux14’);<br>    dbms_output.put_line(‘ITPUX14 的年薪为: ‘||v_emp_sal);<br>end;<br>–ITPUX14 的年薪为: 24000<br>–2.6 删除包<br>select * from dba_objects where owner=’ITPUX’ and object_type=’PACKAGE’;<br>drop package ITPUX_PKG;<br>drop package ITPUXA_PKG;<br><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
            <tag> DDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库逻辑备份恢复迁移之exp与imp</title>
      <link href="/oracle/oracle-shu-ju-ku-luo-ji-bei-fen-hui-fu-qian-yi-zhi-exp-yu-imp/"/>
      <url>/oracle/oracle-shu-ju-ku-luo-ji-bei-fen-hui-fu-qian-yi-zhi-exp-yu-imp/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle数据库逻辑备份恢复迁移之exp与imp"><a href="#Oracle数据库逻辑备份恢复迁移之exp与imp" class="headerlink" title="Oracle数据库逻辑备份恢复迁移之exp与imp"></a>Oracle数据库逻辑备份恢复迁移之exp与imp</h1><p>[Oracle 11G R2 官方文档][1] </p><h2 id="1-export与import逻辑备份恢复概述"><a href="#1-export与import逻辑备份恢复概述" class="headerlink" title="1.export与import逻辑备份恢复概述"></a>1.export与import逻辑备份恢复概述</h2><h3 id="1-1-备份概述"><a href="#1-1-备份概述" class="headerlink" title="1.1 备份概述"></a>1.1 备份概述</h3><ul><li>备份可分为两类，物理备份和逻辑备份<blockquote><p>&emsp;&emsp;物理备份：该方法实现数据库的完整恢复，但需要极大的外部存储设备，例如磁带库，具体包括冷备份和热备份。冷备份和热备份(热备份要求数据库运行在归档模式下)都是物理备份，它涉及到组成数据库的文件，但不考虑逻辑内容。<br>&emsp;&emsp;逻辑备份： 使用软件技术从数据库中导出数据并写入一个输出文件，该文件的格式一般与原数据库的文件格式不同，只是 原数据库中数据内容的一个映像。因此，逻辑备份文件只能用来对数据库进行逻辑恢复，即数据导入，而不能按数据库原来的存储特征进行物理恢复。逻辑备份一般 用于增量备份，即备份那些在上次备份以后改变的数据。<br>&emsp;&emsp;Oracle 的导出导入是一个很常用的迁移工具。 在Oracle 10g以后，Oracle 推出了数据泵(expdp/impdp).它可以通过使用并行，从而在效率上要比exp/imp 要高。但是这个exp/imp很多时候还需要使用。<br>&emsp;&emsp;导入/导出是ORACLE幸存的最古老的两个命令行工具，其实我从来不认为Exp/Imp是一种好的备份方式，正确的说法是Exp/Imp只能是一个好的转储工具，特别是在小型数据库的转储，表空间的迁移，表的抽取，检测逻辑和物理冲突等中有不小的功劳。当然，我们也可以把它作为小型数据库的物理备份后的一个逻辑辅助备份，也是不错的建议。对于越来越大的数据库，特别是TB级数据库和越来越多数据仓库的出现，EXP/IMP越来越力不从心了，这个时候，数据库的备份都转向了RMAN和第三方工具。下面说明一下EXP/IMP的使用。</p></blockquote></li></ul><h2 id="2-export与import参数详解"><a href="#2-export与import参数详解" class="headerlink" title="2.export与import参数详解"></a>2.export与import参数详解</h2><h3 id="2-1-export参数详解"><a href="#2-1-export参数详解" class="headerlink" title="2.1 export参数详解"></a>2.1 export参数详解</h3><pre class="line-numbers language-shell"><code class="language-shell">[oracle@orcl:/]$exp -helpExport: Release 11.2.0.4.0 - Production on Tue Jan 30 18:30:39 2018Copyright (c) 1982, 2011, Oracle and/or its affiliates.  All rights reserved.You can let Export prompt you for parameters by entering the EXPcommand followed by your username/password:     Example: EXP SCOTT/TIGEROr, you can control how Export runs by entering the EXP command followedby various arguments. To specify parameters, you use keywords:     Format:  EXP KEYWORD=value or KEYWORD=(value1,value2,...,valueN)     Example: EXP SCOTT/TIGER GRANTS=Y TABLES=(EMP,DEPT,MGR)               or TABLES=(T1:P1,T1:P2), if T1 is partitioned tableUSERID must be the first parameter on the command line.Keyword    Description (Default)      Keyword      Description (Default)--------------------------------------------------------------------------USERID     username/password          FULL         export entire file (N)BUFFER     size of data buffer        OWNER        list of owner usernamesFILE       output files (EXPDAT.DMP)  TABLES       list of table namesCOMPRESS   import into one extent (Y) RECORDLENGTH length of IO recordGRANTS     export grants (Y)          INCTYPE      incremental export typeINDEXES    export indexes (Y)         RECORD       track incr. export (Y)DIRECT     direct path (N)            TRIGGERS     export triggers (Y)LOG        log file of screen output  STATISTICS   analyze objects (ESTIMATE)ROWS       export data rows (Y)       PARFILE      parameter filenameCONSISTENT cross-table consistency(N) CONSTRAINTS  export constraints (Y)OBJECT_CONSISTENT    transaction set to read only during object export (N)FEEDBACK             display progress every x rows (0)FILESIZE             maximum size of each dump fileFLASHBACK_SCN        SCN used to set session snapshot back toFLASHBACK_TIME       time used to get the SCN closest to the specified timeQUERY                select clause used to export a subset of a tableRESUMABLE            suspend when a space related error is encountered(N)RESUMABLE_NAME       text string used to identify resumable statementRESUMABLE_TIMEOUT    wait time for RESUMABLE TTS_FULL_CHECK       perform full or partial dependency check for TTSVOLSIZE              number of bytes to write to each tape volumeTABLESPACES          list of tablespaces to exportTRANSPORT_TABLESPACE export transportable tablespace metadata (N)TEMPLATE             template name which invokes iAS mode exportExport terminated successfully without warnings.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>EXP的所有参数（括号中为参数的默认值）：<blockquote><p>可以通过exp help=y或者imp help=y查看exp或imp的详细参数，下面以exp为例解释参数意义<br>USERID：用户名/口令</p></blockquote></li></ul><blockquote><p>FULL：导出整个数据库，只有拥有exp_full_database角色的用户或者特权用户如sys，system等才能进行全库导出。 示例如下<br>exp “‘/ as sysdba’” full=y</p></blockquote><blockquote><p>BUFFER：制定数据缓冲区大小，主要用于提高exp/imp速度，该单位为字节，不能写成buffer=1m的形式，应写成字节为单位的参数，如buffer=1048576<br>exp hr/hr file=t_b.dmp buffer= 1048576 tables=T</p></blockquote><blockquote><p>OWNER：需要导出的用户，示例如下<br>exp “‘/ as sysdba’” owner=(hr,ITPUX02) file=hr_ITPUX02.dmp<br>上例中由于是在linux平台进行测试的，需要对 owner=(hr,ITPUX02)使用\进行转义</p></blockquote><blockquote><p>FILE：输出文件</p></blockquote><blockquote><p>TABLES：需要导出的表</p></blockquote><blockquote><p>COMPRESS：导入到一个区 (Y) 。主要目的是为了消除存储碎片，以保证某张表的所有记录都存储在连续的空间里。 但是负面效应很明显， 如果该参数值为y，则会将高水位线以下的所有extent导入到一个区中， 因此在导入时很有可能出现，明明表中数据很少，但是却花了很多时间在建立的extent上。 且自oracle9i开始，使用了本地管理的表空间，存储碎片的问题应该比低版本好多了，个人建议将compress设为n。</p></blockquote><ul><li><p>DIRECT：直接路径 (N)。</p><blockquote><p>传统模式导出和直接路径导出的原理<br>传 统模式导出相当于使用select语句从表中取出数据，数据从磁盘上先读到buffer cache中，记录被转移到一个评估检测的缓冲区中，数据经过语法检测后没有问题，将数据传给PGA，最后写入导出的文件中。如果使用Direct Path模式导出，数据直接从磁盘上读取到导出的PGA中：记录直接被转换导出会话的私有buffer中。这也就是意味着SQL语句处理层被忽略掉了，因 为数据已经是符合导出的格式了，不需要其他的转换处理了。数据直接被传送给导出的客户端，最后写入导出文件。过程可概况如下</p><pre class="line-numbers language-shell"><code class="language-shell">direct=n datafile---->sga----->pga----->dumpdirect=y datafile---->pga----->dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>传统路径导出VS直接路径导出(oracle exp direct=y)两者的差异<br>a、 Conventional path Export<br>&emsp;&emsp; 传统路径模式使用SQL SELECT语句抽取表数据。数据从磁盘读入到buffer cache缓冲区中，行被转移到评估缓冲区。在此之后根据SQL表达式，将记录返回给导出客户端，然后写入到dump文件。<br>b、Direct path Export<br>&emsp;&emsp; 直接导出模式，数据直接从磁盘中读取到导出session的PGA中，行被直接转移到导出session的私有缓冲区，从而跳过SQL命令处理层。<br>避免了不必要的数据转换。最后记录返回给导出客户端，写到dump文件。</p></blockquote></li><li><p>传统路径导出VS直接路径导出(oracle exp direct=y)性能问题</p><blockquote><p>&emsp;&emsp; a、直接路径导出方式比传统路径方式具有更优的性能，速度更快，因为绕过了SQL命令处理部分。<br>&emsp;&emsp; b、直接路径导出方式支持RECORDLENGTH参数(最大为64k)，该参数值通常建议设置为系统I/O或者DB_BLOCK_SIZE的整数倍<br>&emsp;&emsp; c、影响直接路径导出的具体因素(DB_BLOCK_SIZE，列的类型，I/O性能，即数据文件所在的磁盘驱动器是否单独于dump文件所在的磁盘驱动器)<br>&emsp;&emsp; d、无论是直接路径导出还是传统路径导出产生的dump，在使用imp方式导入时，会耗用相同的时间.</p></blockquote></li><li><p>传统路径导出VS直接路径导出(oracle exp direct=y)直接路径导出的限制</p><blockquote><p>a、直接路径导出不支持交互模式<br>b、不支持表空间传输模式(即transport_tablespaces=y不被支持)，支持的是full,owner,tables导出方式<br>c、不支持query查询方式，如exp scott/tiger tables=emp query=\”where job=\’salesman\’ \” 不被支持<br>d、直接路径导出使用recordlength设置一次可以导出数据的量，取代传统路径使用buffer的设置<br>e、直接路径导出要求nls_lang环境参数等于数据库字符集，负责收到exp-41警告及exp-0终止错误</p></blockquote></li></ul><blockquote><p>GRANTS：导出权限 (Y)<br>INCTYPE：增量导出类型，已废除<br>INDEXES：导出索引 (Y)<br>RECORD：跟踪增量导出 (Y) ，已废除<br>TRIGGERS：导出触发器 (Y)<br>LOG：屏幕输出的日志文件</p></blockquote><blockquote><p>STATISTICS：在导出文件中保留对象的统计信息，默认值ESTIMATE，还可以为compute或者none。如果导出时出现<br>EXP-00091: Exporting questionable statistics<br>可以考虑将 STATISTICS设置为NONE<br>ROWS：确定表中的数据行是否导出，默认为Y，导出</p></blockquote><blockquote><p>QUERY：用于导出表的子集的select子句，示例如下<br>exp hr/hr file=emp_q.dmp tables=employees query=\”where hire_date >to_date(\’1999-01-01\’\,\’yyyy-mm-dd\’)\”</p></blockquote><ul><li>PARFILE：参数文件名，可以用如下方式导出<pre class="line-numbers language-sql"><code class="language-sql">exp hr<span class="token operator">/</span>hr parfile<span class="token operator">=</span>parfile$ cat parfile<span class="token keyword">file</span><span class="token operator">=</span>t_p<span class="token punctuation">.</span>dmpcompress<span class="token operator">=</span>y<span class="token keyword">rows</span><span class="token operator">=</span>y<span class="token keyword">tables</span><span class="token operator">=</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>empl<span class="token operator">%</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>使用parfile参数可以对频繁进行的导出操作进行反复调用，同时也可以避免不同操作系统之间需要对特定字符进行转义的烦恼，如下例</p><pre class="line-numbers language-sql"><code class="language-sql">exp hr<span class="token operator">/</span>hr parfile<span class="token operator">=</span>parfile$cat parfile<span class="token keyword">file</span><span class="token operator">=</span>t_p<span class="token punctuation">.</span>dmpcompress<span class="token operator">=</span>y<span class="token keyword">rows</span><span class="token operator">=</span>y<span class="token keyword">tables</span><span class="token operator">=</span>employees<span class="token keyword">statistics</span><span class="token operator">=</span>nonequery<span class="token operator">=</span><span class="token string">"where hire_date>to_date('1999-01-01','yyyy-mm-dd')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CONSISTENT：在导出时，将影响正在导出的表的事务设为只读，主要作用于嵌套表和分区表，默认为N。<br>CONSTRAINTS：导出的约束条件 (Y)<br>OBJECT_CONSISTENT:只在对象导出期间设置为只读的事务处理 (N)<br>FEEDBACK:每 x 行显示进度，默认为0<br>FILESIZE：每个导出文件的最大大小<br>FLASHBACK_SCN：用于将会话快照设置回以前状态的SCN<br>FLASHBACK_TIME：用于获取最接近指定时间的SCN的时间<br>RESUMABLE：遇到空间不足时的错误时挂起，默认为N，需与 RESUMABLE_NAME和 RESUMABLE_TIMEOUT一起使用<br>RESUMABLE_NAME：用于标示哪个会话需要使用 RESUMABLE选项，格式为 User USERNAME (USERID), Session SESSIONID, Instance INSTANCEID<br>RESUMABLE_TIMEOUT：RESUMABLE的等待时间，默认为7200s，如果在指定时间内未解决问题，则操作中断<br>TTS_FULL_CHECK：对TTS执行完整或部分相关性检查<br>TABLESPACES：要导出的表空间列表，示例如下<br>exp “‘/ as sysdba’” file=t_ts.dmp tablespaces=(users,example)<br>TRANSPORT_TABLESPACE 导出可传输的表空间元数据 (N)<br>直接备份到磁带上<br>exp icdmain/icd rows=y indexes=n compress=n buffer=65536 feedback=100000 file=/dev/rmt0 log=exp.log tables=(tab1,tab2,tab3)<br>注：在磁盘空间允许的情况下，应先备份到本地服务器，然后再拷贝到磁带。出于速度方面的考虑，尽量不要直接备份到磁带设备</p></blockquote><h3 id="2-2-import参数详解"><a href="#2-2-import参数详解" class="headerlink" title="2.2 import参数详解"></a>2.2 import参数详解</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>oracle<span class="token variable">@orcl</span>:<span class="token operator">/</span><span class="token punctuation">]</span>$imp <span class="token operator">-</span>help<span class="token keyword">Import</span>: <span class="token keyword">Release</span> <span class="token number">11.2</span><span class="token punctuation">.</span><span class="token number">0.4</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span> Production <span class="token keyword">on</span> Tue Jan <span class="token number">30</span> <span class="token number">19</span>:<span class="token number">01</span>:<span class="token number">13</span> <span class="token number">2018</span>Copyright <span class="token punctuation">(</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token number">1982</span><span class="token punctuation">,</span> <span class="token number">2011</span><span class="token punctuation">,</span> Oracle <span class="token operator">and</span><span class="token operator">/</span><span class="token operator">or</span> its affiliates<span class="token punctuation">.</span>  <span class="token keyword">All</span> rights reserved<span class="token punctuation">.</span>You can let <span class="token keyword">Import</span> prompt you <span class="token keyword">for</span> parameters <span class="token keyword">by</span> entering the IMPcommand followed <span class="token keyword">by</span> your username<span class="token operator">/</span>password:     Example: IMP SCOTT<span class="token operator">/</span>TIGER<span class="token operator">Or</span><span class="token punctuation">,</span> you can control how <span class="token keyword">Import</span> runs <span class="token keyword">by</span> entering the IMP command followed<span class="token keyword">by</span> various arguments<span class="token punctuation">.</span> <span class="token keyword">To</span> specify parameters<span class="token punctuation">,</span> you <span class="token keyword">use</span> keywords:     Format:  IMP KEYWORD<span class="token operator">=</span><span class="token keyword">value</span> <span class="token operator">or</span> KEYWORD<span class="token operator">=</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>valueN<span class="token punctuation">)</span>     Example: IMP SCOTT<span class="token operator">/</span>TIGER <span class="token keyword">IGNORE</span><span class="token operator">=</span>Y <span class="token keyword">TABLES</span><span class="token operator">=</span><span class="token punctuation">(</span>EMP<span class="token punctuation">,</span>DEPT<span class="token punctuation">)</span> <span class="token keyword">FULL</span><span class="token operator">=</span>N               <span class="token operator">or</span> <span class="token keyword">TABLES</span><span class="token operator">=</span><span class="token punctuation">(</span>T1:P1<span class="token punctuation">,</span>T1:P2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">if</span> T1 <span class="token operator">is</span> partitioned <span class="token keyword">table</span>USERID must <span class="token number">be</span> the <span class="token keyword">first</span> parameter <span class="token keyword">on</span> the command line<span class="token punctuation">.</span>Keyword  Description <span class="token punctuation">(</span><span class="token keyword">Default</span><span class="token punctuation">)</span>       Keyword      Description <span class="token punctuation">(</span><span class="token keyword">Default</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------</span>USERID   username<span class="token operator">/</span>password           <span class="token keyword">FULL</span>         <span class="token keyword">import</span> entire <span class="token keyword">file</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span>BUFFER   size <span class="token keyword">of</span> <span class="token keyword">data</span> buffer         FROMUSER     list <span class="token keyword">of</span> owner usernames<span class="token keyword">FILE</span>     input files <span class="token punctuation">(</span>EXPDAT<span class="token punctuation">.</span>DMP<span class="token punctuation">)</span>    TOUSER       list <span class="token keyword">of</span> usernames<span class="token keyword">SHOW</span>     just list <span class="token keyword">file</span> contents <span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token keyword">TABLES</span>       list <span class="token keyword">of</span> <span class="token keyword">table</span> names<span class="token keyword">IGNORE</span>   <span class="token keyword">ignore</span> <span class="token keyword">create</span> <span class="token keyword">errors</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span>    RECORDLENGTH length <span class="token keyword">of</span> IO recordGRANTS   <span class="token keyword">import</span> grants <span class="token punctuation">(</span>Y<span class="token punctuation">)</span>           INCTYPE      incremental <span class="token keyword">import</span> <span class="token keyword">type</span>INDEXES  <span class="token keyword">import</span> indexes <span class="token punctuation">(</span>Y<span class="token punctuation">)</span>          <span class="token keyword">COMMIT</span>       <span class="token keyword">commit</span> array <span class="token keyword">insert</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token keyword">ROWS</span>     <span class="token keyword">import</span> <span class="token keyword">data</span> <span class="token keyword">rows</span> <span class="token punctuation">(</span>Y<span class="token punctuation">)</span>        PARFILE      parameter filenameLOG      log <span class="token keyword">file</span> <span class="token keyword">of</span> screen output   CONSTRAINTS  <span class="token keyword">import</span> constraints <span class="token punctuation">(</span>Y<span class="token punctuation">)</span>DESTROY                overwrite <span class="token keyword">tablespace</span> <span class="token keyword">data</span> <span class="token keyword">file</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span>INDEXFILE              <span class="token keyword">write</span> <span class="token keyword">table</span><span class="token operator">/</span><span class="token keyword">index</span> info <span class="token keyword">to</span> specified <span class="token keyword">file</span>SKIP_UNUSABLE_INDEXES  skip maintenance <span class="token keyword">of</span> unusable indexes <span class="token punctuation">(</span>N<span class="token punctuation">)</span>FEEDBACK               display progress every x <span class="token keyword">rows</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>TOID_NOVALIDATE        skip validation <span class="token keyword">of</span> specified <span class="token keyword">type</span> ids FILESIZE               maximum size <span class="token keyword">of</span> each <span class="token keyword">dump</span> <span class="token keyword">file</span><span class="token keyword">STATISTICS</span>             <span class="token keyword">import</span> precomputed <span class="token keyword">statistics</span> <span class="token punctuation">(</span>always<span class="token punctuation">)</span>RESUMABLE              suspend <span class="token keyword">when</span> <span class="token number">a</span> space related error <span class="token operator">is</span> encountered<span class="token punctuation">(</span>N<span class="token punctuation">)</span>RESUMABLE_NAME         <span class="token keyword">text</span> string used <span class="token keyword">to</span> identify resumable statementRESUMABLE_TIMEOUT      wait time <span class="token keyword">for</span> RESUMABLE COMPILE                compile procedures<span class="token punctuation">,</span> packages<span class="token punctuation">,</span> <span class="token operator">and</span> functions <span class="token punctuation">(</span>Y<span class="token punctuation">)</span>STREAMS_CONFIGURATION  <span class="token keyword">import</span> streams general metadata <span class="token punctuation">(</span>Y<span class="token punctuation">)</span>STREAMS_INSTANTIATION  <span class="token keyword">import</span> streams instantiation metadata <span class="token punctuation">(</span>N<span class="token punctuation">)</span>DATA_ONLY              <span class="token keyword">import</span> only <span class="token keyword">data</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span>VOLSIZE                number <span class="token keyword">of</span> bytes <span class="token operator">in</span> <span class="token keyword">file</span> <span class="token keyword">on</span> each volume <span class="token keyword">of</span> <span class="token number">a</span> <span class="token keyword">file</span> <span class="token keyword">on</span> tapeThe <span class="token keyword">following</span> keywords only <span class="token keyword">apply</span> <span class="token keyword">to</span> transportable tablespacesTRANSPORT_TABLESPACE <span class="token keyword">import</span> transportable <span class="token keyword">tablespace</span> metadata <span class="token punctuation">(</span>N<span class="token punctuation">)</span>TABLESPACES tablespaces <span class="token keyword">to</span> <span class="token number">be</span> transported <span class="token keyword">into</span> <span class="token keyword">database</span>DATAFILES datafiles <span class="token keyword">to</span> <span class="token number">be</span> transported <span class="token keyword">into</span> <span class="token keyword">database</span>TTS_OWNERS users that own <span class="token keyword">data</span> <span class="token operator">in</span> the transportable <span class="token keyword">tablespace</span> <span class="token keyword">set</span><span class="token keyword">Import</span> terminated successfully without <span class="token keyword">warnings</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>IMP的所有参数（括号中为参数的默认值）：</p><blockquote><p>i&emsp;&emsp;mp的参数和exp的大致相同，下面是常用参数的解释，与exp相同的这就不再赘述<br>&emsp;&emsp;ignore：Oracle在恢复数据的过程中，当导入某个表时，该表已经存在，就要根据ignore参数的设置来决定如何操作。若 ignore=y，Oracle不执行CREATE TABLE语句，直接将数据插入到表中，如果插入的记录违背了约束条件，比如主键约束，唯一索引等，则出错的记录不会插入，但合法的记录会添加到表中。若 ignore=n，Oracle不执行CREATE TABLE语句，同时也不会将数据插入到表中，而是忽略该表的错误，继续导入下一个表。 注<br>意：如果表中的字段并没有唯一性约束，那么在使用ignore=y的情况下很有可能插入重复数据。<br>&emsp;&emsp;indexes：在恢复数据的过程中，若indexes=n，则表上的索引不会被恢复，但是对 LOB 索引, OID索引和 主键索引等系统自动生成的索引将无条件恢复。<br>&emsp;&emsp;indexfile：不进行导入操作而是将创建对象的文本保存到文件中，可以通过编辑使用该文本文件创建数据库对象。<br>&emsp;&emsp;fromuser,touser:这两个参数可以组合使用，也可以分开使用。他们可以实现将源用户的对象数据，导入到目标用户schema底下的功能。这里要注意，导入时的用户需要有<br>imp_full_database角色，示例如下<br>导入一个或一组指定用户所属的全部对象<br>$imp system/manager file=full_all.dmp log=seapark fromuser=hr<br>$imp system/manager file=seapark log=seapark fromuser=(seapark,amy,amyc,harold)<br>将一个或一组指定用户所属的全部对象导入到另一个用户下<br>$imp hr/hr fromuser=hr touser=czm file=hr_all.dmp<br>$imp system/manager file=tank log=tank fromuser=(seapark,amy) touser=(seapark1, amy1)<br>commit：默认值为 COMMIT=N，及在每插入完一个对象后提交。 当COMMIT=Y时候是根据你BUFFER的大小决定每次提交的数量。对于包含了LONG、RAW、 DATE等类型的表，不论BUFFER设置多大，都是每插入一行进行提交。设置commit=y可以防止减少回滚段的压力，但由于频繁提交，会带来性能 上的影响，推荐使用COMMIT=N。</p></blockquote></li><li><p>下列关键字仅用于可传输的表空间</p><blockquote><p>TRANSPORT_TABLESPACE 导入可传输的表空间元数据 (N)<br>TABLESPACES 将要传输到数据库的表空间<br>DATAFILES 将要传输到数据库的数据文件<br>TTS_OWNERS 拥有可传输表空间集中数据的用户</p></blockquote></li><li><p>关于增量参数的说明：exp/imp的增量并不是真正意义上的增量，所以最好不要使用。</p></li></ul><h2 id="3-exp-imp常用语法"><a href="#3-exp-imp常用语法" class="headerlink" title="3.exp / imp常用语法"></a>3.exp / imp常用语法</h2><h3 id="3-1-exp"><a href="#3-1-exp" class="headerlink" title="3.1 exp"></a>3.1 exp</h3><ul><li><p>完全</p><pre class="line-numbers language-shell"><code class="language-shell">exp system/oracle compress=n buffer=4096000 feedback=100000 full=y file=expfull_itpuxdb.dmp log=expfull_itpuxdb.log--exp \"/ as sysdba\" compress=n buffer=4096000 feedback=100000 full=y file=exp_itpuxdb.dmp log=exp_itpuxdb.log--backup/backup : exp_full_database,imp_full_database, grant exp_full_database to backup; grant imp_full_database to backup;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>用户</p><pre class="line-numbers language-shell"><code class="language-shell">exp system/oracle compress=n buffer=4096000 feedback=100000 owner=itpux file=expitpux_itpuxdb.dmp log=expitpux_itpuxdb.log--exp itpux/itpux compress=n buffer=4096000 feedback=100000 file=expitpux_itpuxdb.dmp log=expitpux_itpuxdb.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>表</p><pre class="line-numbers language-shell"><code class="language-shell">exp itpux/itpux compress=n buffer=4096000 feedback=100000 tables=t1,t2,t2 file=exp_t1_itpuxdb.dmp log=exp_t1_itpuxdb.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>other</p><pre class="line-numbers language-shell"><code class="language-shell">exp system/oracle compress=n buffer=4096000 feedback=100000 rows=n file=expfull_itpuxdb.dmp log=expfull_itpuxdb.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-2-imp"><a href="#3-2-imp" class="headerlink" title="3.2 imp"></a>3.2 imp</h3><ul><li><p>完全</p><pre class="line-numbers language-shell"><code class="language-shell">imp system/oracle ignore=y buffer=4096000 feedback=100000 full=y file=expfull_itpuxdb.dmp log=impfull_itpuxdb.log--exp \"/ as sysdba\" system/oracle ignore=y buffer=4096000 feedback=100000 full=y file=expfull_itpuxdb.dmp log=impfull_itpuxdb.log--backup/backup : exp_full_database,imp_full_database, grant exp_full_database to backup; grant imp_full_database to backup;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>用户</p><pre class="line-numbers language-shell"><code class="language-shell">imp system/oracle fromuser=itpux touser=itpux ignore=y buffer=4096000 feedback=100000 file=expitpux_itpuxdb.dmp log=impitpux_itpuxdb.log--imp itpux/itpux fromuser=itpux touser=itpux ignore=y buffer=4096000 feedback=100000 file=expitpux_itpuxdb.dmp log=impitpux_itpuxdb.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>表</p><pre class="line-numbers language-shell"><code class="language-shell">imp itpux/itpux fromuser=itpux touser=itpux tables=t1,t2,t3 ignore=y buffer=4096000 feedback=100000 file=exp_t1_itpuxdb.dmp log=imp_t1_itpuxdb.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="4-配置生产环境的逻辑自动备份策略"><a href="#4-配置生产环境的逻辑自动备份策略" class="headerlink" title="4.配置生产环境的逻辑自动备份策略"></a>4.配置生产环境的逻辑自动备份策略</h2><blockquote><p>要求：每天早上5点做逻辑全备，备份文件保留一周。<br><code>`</code>shell<br>vi /backup/scripts/expfull_db01.sh<br>export BAKDATE=<code>date +%Y%m%d</code><br>export ORACLE_SID=db01<br>nohup exp system/oracle compress=n buffer=4096000 feedback=100000 full=y file=/backup/expfull_db01_$BAKDATE.dmp log=/backup/expfull_db01_$BAKDATE.log &amp;<br>gzip -f /backup/expfull_db01_$BAKDATE.dmp<br>find /backup -name expfull_db01_*.dmp.gz -atime +2 -exec rm -rf {} \;</p></blockquote><p>#chown -R oracle:dba /backup/expfull_db01.sh</p><p>#chmod 775 /backup/expfull_db01.sh</p><p>#crontab -e<br>00 05 <em> </em> * su - oracle -c /backup/scripts/expfull_db01.sh</p><pre><code>## 5.exp / imp生产环境数据迁移流程和注意事项### 5.1 数据迁移的目的&gt;使用exp/imp进行数据迁移的前置条件、操作步骤，降低对对应用造成的影响及避免故障### 5.2 数据迁移的适用范围&gt;所有线上库9i ,10g &gt; 11g 12c &gt;11g不建用了，### 5.3 数据迁移的风险评估&gt;&amp;emsp;&amp;emsp;01.exp导出数据时没有使用compress=n参数，会导致所有数据被压缩在一个extent里，导入可能由于没有连续的blocks满足需要，导致imp失败。&amp;emsp;&amp;emsp;02.有些os对文件大小有限制，exp数据时需要使用filesize参数来分割导出文件&amp;emsp;&amp;emsp;03.exp导出数据时没有正确估计dmp文件所需空间，导致主机磁盘满。&amp;emsp;&amp;emsp;05.imp导入数据时没有使用ignore=y参数，目标库上存在表的情况下数据无法导入&amp;emsp;&amp;emsp;05.imp导入大量数据时没有使用commit=y参数，导致事务太久，undo资源占用过大无法及时回收。&amp;emsp;&amp;emsp;06.跨字符集的数据迁移，由于字符集不兼容导致数据迁移失败。&amp;emsp;&amp;emsp;07.imp跨schema进行数据迁移时，没有正确指定fromuser、touser，导致数据没有正确导入&amp;emsp;&amp;emsp;09.导入表空间不存在或者空间不足，导致表创建失败或者数据导入失败，导致其他应用报错### 5.4 数据迁移的准备工作&gt;&amp;emsp;&amp;emsp;01.检查源数据库和目标库的版本、字符集，如果目标库版本低于源库，使用目标库的软件做导出。如果字符集不一致，不建议使用exp/imp迁移数据。&amp;emsp;&amp;emsp;02.检查目标库上表结构和源结构是否一致，如果不一致，先修复结构，保证一致。&amp;emsp;&amp;emsp;03.user_segments里查出导出表所占的空间大小，检查os对文件大小的限制。如果表大小超出文件大小，exp导出时加上这两个参数：filesize=小于文件限制的数值m,file=exp01.dmp,exp02.dmp,…多个dmp文件&amp;emsp;&amp;emsp;04.表比较多的情况下，建议用parfile。各个参数在parfile里写好。tables=(tab1,tab2,tab3,..)&amp;emsp;&amp;emsp;05.根据不同的需要要书写query子句时，这个参数跟direct=y冲突### 5.5 数据迁移的执行过程&gt;01.如果目标表是已存在数据，跟应用确认后，可以先进行导出备份，以防后面需要回退。先根据需求编辑exp、imp的参数文件：’-‘后面是参数说明，实际使用时去掉cat exp_itpux.paruserid=itpux/itpux@db01direct=y –直接路径导出，加快导出速度compress=n –避免数据全部压缩在一个数据块上file=exp_itpux01.dmplog=exp_itpux01.logrecordlength=65535 –写dmp文件时一次IO的大小，上限是65535，可以加快导出速度buffer=4096000 -数据缓冲区大小tables=itpux01exp parfile=exp_itpux.par –进行数据导出```shellcat imp_itpux.paruserid=itpux/itpuxcommit=y –开启批量提交，避免长事务ignore=y –如果目标表已经存在，只导入数据fromuser=itpuxtouser=itpuxtables=itpux01file=imp_itpux01.dmplog=imp_itpux01.logbuffer=100000 –大小控制导入速度的，设置过大会导致日志产生很快imp parfile=imp_itpux.par –进行数据导入</code></pre><blockquote><p>注意上面的fromuser和touser。如果将表导入到两个schema:itpux01,itpux02<br>需要按照这种格式配置参数：<br>fromuser和touser一一对应，即使导出时只有一个schema.<br>fromuser=itpux01,itpux01<br>touser=itpux02,itpux02</p></blockquote><ul><li>02 exp导出数据时，检查exp的日志，如果报错，一般是参数配置错误，参考官方文档调整参数。</li><li>03 imp导入之前，需要创建相应的用户，权限，表空间等对象，否则报错：<pre class="line-numbers language-sql"><code class="language-sql">spool itpux_object_create_scripts<span class="token punctuation">.</span>sql<span class="token keyword">SET</span> LONG <span class="token number">2000000</span> PAGESIZE <span class="token number">0</span> head <span class="token keyword">off</span> verify <span class="token keyword">off</span> feedback <span class="token keyword">off</span> linesize <span class="token number">180</span><span class="token keyword">select</span> dbms_metadata<span class="token punctuation">.</span>get_ddl<span class="token punctuation">(</span><span class="token string">'USER'</span><span class="token punctuation">,</span><span class="token string">'ITPUX02'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> dbms_metadata<span class="token punctuation">.</span>get_granted_ddl<span class="token punctuation">(</span><span class="token string">'OBJECT_GRANT'</span><span class="token punctuation">,</span><span class="token string">'ITPUX02'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> dbms_metadata<span class="token punctuation">.</span>get_granted_ddl<span class="token punctuation">(</span><span class="token string">'ROLE_GRANT'</span><span class="token punctuation">,</span><span class="token string">'ITPUX02'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> dbms_metadata<span class="token punctuation">.</span>get_granted_ddl<span class="token punctuation">(</span><span class="token string">'SYSTEM_GRANT'</span><span class="token punctuation">,</span><span class="token string">'ITPUX02'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> dbms_metadata<span class="token punctuation">.</span>get_ddl<span class="token punctuation">(</span><span class="token string">'TABLESPACE'</span><span class="token punctuation">,</span><span class="token string">'ITPUX02'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>spool <span class="token keyword">off</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>04 imp导入数据过程，需要监控下数据库事务和日志产生速度。</li><li>05 对导入的表收集统计信息。</li></ul><h3 id="5-6-数据迁移后的验证方案"><a href="#5-6-数据迁移后的验证方案" class="headerlink" title="5.6 数据迁移后的验证方案"></a>5.6 数据迁移后的验证方案</h3><blockquote><p>对比exp、imp的日志，确认导出导入数据量是否一致。并在数据库上检查数据量。<br>比如上面的数据迁移，检查数据量跟日志显示是否一致。<br>select count(*) from itpux.itpux01;<br>跨schema或者数据库迁移数据时，除检查日志外，还需要检查源和目标的对象数据量、是否有失效对象。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> object_type s_object_type<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dba_objects <span class="token keyword">where</span> owner<span class="token operator">=</span><span class="token string">'ITPUX01'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> object_type <span class="token punctuation">;</span><span class="token keyword">select</span> object_type t_object_type<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dba_objects <span class="token keyword">where</span> owner<span class="token operator">=</span><span class="token string">'ITPUX01'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> object_type <span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_objects <span class="token keyword">where</span> <span class="token keyword">status</span> <span class="token operator">&lt;></span> <span class="token string">'VALID'</span> <span class="token operator">and</span> owner<span class="token operator">=</span><span class="token string">'ITPUX01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>dblink两个库一起查询;<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>s_object_type<span class="token punctuation">,</span>     s<span class="token punctuation">.</span>s_count<span class="token punctuation">,</span>     t<span class="token punctuation">.</span>t_object_type<span class="token punctuation">,</span>     t<span class="token punctuation">.</span>t_count<span class="token keyword">FROM</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> object_type s_object_type<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> s_count          <span class="token keyword">FROM</span> dba_objects<span class="token variable">@db01</span>         <span class="token keyword">WHERE</span> owner <span class="token operator">=</span> <span class="token string">'ITPUX01'</span>      <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> object_type<span class="token punctuation">)</span> s<span class="token punctuation">,</span>     <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span> object_type t_object_type<span class="token punctuation">,</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> t_count          <span class="token keyword">FROM</span> dba_objects         <span class="token keyword">WHERE</span> owner <span class="token operator">=</span> <span class="token string">'ITPUX01'</span>      <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> object_type<span class="token punctuation">)</span> t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>自动生成编译无效对象SQL及编译过程</li></ul></blockquote><ul><li>统计当前用户无效对象数量:<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> owner<span class="token punctuation">,</span>       object_type<span class="token punctuation">,</span>       <span class="token keyword">status</span><span class="token punctuation">,</span>       <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> dba_objects <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">&lt;></span> <span class="token string">'VALID'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> owner<span class="token punctuation">,</span> object_type<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> owner<span class="token punctuation">,</span> object_type<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成编译无效对象SQL</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token string">'ALTER '</span>     <span class="token operator">||</span> OBJECT_TYPE     <span class="token operator">||</span> <span class="token string">' '</span>     <span class="token operator">||</span> OWNER     <span class="token operator">||</span> <span class="token string">'.'</span>     <span class="token operator">||</span> OBJECT_NAME     <span class="token operator">||</span> <span class="token string">' COMPILE;'</span><span class="token keyword">FROM</span> dba_objects<span class="token keyword">WHERE</span>     <span class="token keyword">status</span> <span class="token operator">&lt;></span> <span class="token string">'VALID'</span>     <span class="token operator">AND</span> object_type <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'PACKAGE'</span><span class="token punctuation">,</span>                         <span class="token string">'PACKAGE BODY'</span><span class="token punctuation">,</span>                         <span class="token string">'FUNCTION'</span><span class="token punctuation">,</span>                         <span class="token string">'PROCEDURE'</span><span class="token punctuation">,</span>                         <span class="token string">'TRIGGER'</span><span class="token punctuation">,</span>                         <span class="token string">'VIEW'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过复制以上SQL语句,直接手动执行编译执行,也可以采用如下方式在oracle用户下进行手工编译<br><code>`</code>sql</p></blockquote><h1 id="su-oracle"><a href="#su-oracle" class="headerlink" title="su - oracle"></a>su - oracle</h1><p>$ sqlplus / as sysdba<br>SQL&gt; @$ORACLE_HOME/rdbms/admin/utlrp.sql<br><code>`</code></p></li><li><p>如果有序列要处理</p><pre class="line-numbers language-sql"><code class="language-sql">exclude<span class="token operator">=</span>SEQUENCE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>目标库<br>方法1:<br>1.源库： 查出sequence的最大值<br>2.目标库： DROP SEQUENCE …. 再 CREATE SEQUENCE START最大值 其他不变<br>方法2：<br>目标库： DROP SEQUENCE …. 再 CREATE SEQUENCE START 超大值 （保证比之前的都大，不会发生冲突的 ）</p></blockquote></li><li><p>可以用以下脚本来实现 ：<br><code>`</code>sql<br>/<em> Formatted on 2018/1/30 19:49:33 (QP5 v5.313) </em>/<br>script FROM THE SOURCE database. USE this script TO RESET THE proper starting VALUE FOR sequences ON THE TARGET database.<br>cr_tts_create_seq.SQL<br>SET HEADING OFF FEEDBACK OFF TRIMSPOOL ON ESCAPE OFF<br>SET LONG 1000 LINESIZE 1000 PAGESIZE 0<br>COL SEQDDL FORMAT A300<br>SPOOL tts_create_seq.sql<br>PROMPT /<em> ========================= </em>/<br>PROMPT /<em> Drop and create sequences </em>/<br>PROMPT /<em> ========================= </em>/</p></li></ul><p>SELECT REGEXP_REPLACE (<br>           DBMS_METADATA.get_ddl (‘SEQUENCE’, sequence_name, sequence_owner),<br>           ‘^.<em>(CREATE SEQUENCE.</em>CYCLE).*$’,<br>              ‘DROP SEQUENCE “‘<br>           || sequence_owner<br>           || ‘“.”‘<br>           || sequence_name<br>           || ‘“;’<br>           || CHR (10)<br>           || ‘\1;’)<br>           SEQDDL<br>  FROM dba_sequences<br> WHERE sequence_owner NOT IN (SELECT name<br>                                FROM SYSTEM.logstdby$skip_support<br>                               WHERE action = 0);</p><p>SPOOL OFF</p><pre><code>### 5.7 数据迁移核心对象风险&gt;由于核心表访问、变更频繁，不宜直接使用imp对核心表大量导入数据。### 5.8 数据迁移回退方案&gt;exp对应用无影响，不需要回退。imp后可能数据有误，需要进行回退操作。如果目标表本来就是空表，跟应用确认后，直接清空即可。如果目标表原有数据，跟应用确认是否使用原有备份数据进行恢复。若需要，先exp备份当前数据，然后清空再导入前面的备份数据。## 6.exp / imp数据迁移案例### 6.1 迁移目的&gt;&amp;emsp;&amp;emsp;将linux系统oracle服务器上schema（itpux01,itpux02）全部通过Exp迁移到另一台oracle服务器，并能正常查询到相关数据。### 6.2 迁移流程```sql1.准备数据：linux系统oracle服务器上创建用户,表空间.并创建相关表.数据等。2.linux本地用Exp做导出;3.再到远程主机创建相关对象；4.远程主机用imp做导入(导入);5.验证远程本地数据合法性;</code></pre><h3 id="6-3-迁移过程"><a href="#6-3-迁移过程" class="headerlink" title="6.3 迁移过程"></a>6.3 迁移过程</h3><ul><li>创建表空间<br><code>`</code>sql<br>CREATE TABLESPACE itpux11<br>  DATAFILE ‘/oracle/oradata/db01/itpux01.dbf’<pre><code>           SIZE 100 M           AUTOEXTEND OFF</code></pre>  EXTENT MANAGEMENT LOCAL AUTOALLOCATE<br>  SEGMENT SPACE MANAGEMENT AUTO;</li></ul><p>CREATE TABLESPACE itpux12<br>    DATAFILE ‘/oracle/oradata/db01/itpux02.dbf’<br>                 SIZE 100 M<br>                 AUTOEXTEND OFF<br>    EXTENT MANAGEMENT LOCAL AUTOALLOCATE<br>    SEGMENT SPACE MANAGEMENT AUTO;</p><pre><code>* 创建用户并授权```sqlCREATE USER itpux01 IDENTIFIED BY itpux01    DEFAULT TABLESPACE itpux01;CREATE USER itpux02 IDENTIFIED BY itpux02    DEFAULT TABLESPACE itpux02;GRANT DBA TO itpux01;GRANT DBA TO itpux02;ALTER USER itpux01    QUOTA UNLIMITED ON itpux01;ALTER USER itpux02    QUOTA UNLIMITED ON itpux02;</code></pre><ul><li>moon用户登录并创建测试表<br><code>`</code>sql<br>CONN itpux01 / itpux01<br>CREATE TABLE itpux01<br>(<br>  id    NUMBER (30) PRIMARY KEY NOT NULL,<br>  name DATE<br>);</li></ul><p>CONN itpux02 / itpux02<br>CREATE TABLE itpux02<br>(<br>    id    NUMBER (30) PRIMARY KEY NOT NULL,<br>    name DATE<br>);</p><pre><code>* 创建2个存储过程并执行```sqlCONN itpux01 / itpux01CREATE OR REPLACE PROCEDURE p_itpux01ISBEGIN    EXECUTE IMMEDIATE &#39;select count(*) from itpux01&#39;;    FOR i IN 1 .. 1000    LOOP        INSERT INTO itpux01 (id, name)             VALUES (i, SYSDATE);        COMMIT;    END LOOP;    EXECUTE IMMEDIATE &#39;select count(*) from itpux01&#39;;END p_itpux01;/BEGIN    p_itpux01;END;/SELECT COUNT (*) FROM itpux01;SELECT *  FROM itpux01 WHERE id &gt; 990;CONN itpux02 / itpux02CREATE OR REPLACE PROCEDURE p_itpux02ISBEGIN    EXECUTE IMMEDIATE &#39;select count(*) from itpux02&#39;;    FOR i IN 1 .. 2000    LOOP        INSERT INTO itpux02 (id, name)             VALUES (i, SYSDATE);        COMMIT;    END LOOP;    EXECUTE IMMEDIATE &#39;select count(*) from itpux02&#39;;END p_itpux02;/BEGIN    p_itpux02;END;/</code></pre><ul><li>查询验证数据<br><code>`</code>sql<br>CONN itpux01 / itpux01</li></ul><p>SELECT COUNT (*) FROM itpux01;</p><p>SELECT *<br>  FROM itpux01<br> WHERE id &gt; 990;</p><p>CONN itpux02 / itpux02</p><p>SELECT COUNT (*) FROM itpux02;</p><p>SELECT *<br>  FROM itpux02<br> WHERE id &gt; 1990;</p><pre><code>* 本地用Exp做导出```sqlEXP SYSTEM/oracle OWNER=itpux01,itpux02 COMPRESS=n FILE=exp_2table.dmp LOG=exp_2table.LOG direct=y recordlength=65535 buffer=4096000</code></pre><ul><li>imp导入之前，需要创建相应的用户，权限，表空间等对象，否则报<br><code>`</code>sql<br>/<em> Formatted on 2018/1/30 20:03:14 (QP5 v5.313) </em>/<br>SPOOL itpux_object_create_scripts.sql<br>SET LONG 2000000 PAGESIZE 0 HEAD OFF VERIFY OFF FEEDBACK OFF LINESIZE 180</li></ul><p>SELECT DBMS_METADATA.get_ddl (‘USER’, ‘ITPUX01’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_granted_ddl (‘OBJECT_GRANT’, ‘ITPUX01’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_granted_ddl (‘ROLE_GRANT’, ‘ITPUX01’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_granted_ddl (‘SYSTEM_GRANT’, ‘ITPUX01’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_ddl (‘TABLESPACE’, ‘ITPUX01’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_ddl (‘USER’, ‘ITPUX02’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_granted_ddl (‘OBJECT_GRANT’, ‘ITPUX02’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_granted_ddl (‘ROLE_GRANT’, ‘ITPUX02’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_granted_ddl (‘SYSTEM_GRANT’, ‘ITPUX02’) FROM DUAL;</p><p>SELECT DBMS_METADATA.get_ddl (‘TABLESPACE’, ‘ITPUX02’) FROM DUAL;</p><p>SPOOL OFF;</p><pre><code>* 异机用imp做导入```sqlimp SYSTEM/oracle fromuser=itpux01,itpux02 touser=itpux01,itpux02 FILE=exp_2table.dmp LOG=exp_2table.LOG COMMIT=y IGNORE=y buffer=4096000</code></pre><ul><li>验证导入后的数据合法性<br><code>`</code>sql</li></ul><pre><code>### 6.4 数据迁移后的验证方案&gt;对比exp、imp的日志，确认导出导入数据量是否一致。并在数据库上检查数据量。比如上面的数据迁移，检查数据量跟日志显示是否一致。```sqlSELECT COUNT (*) FROM itpux.itpux01;</code></pre><blockquote><p>跨schema或者数据库迁移数据时，除检查日志外，还需要检查源和目标的对象数据量、是否有失效对象。<br><code>`</code>sql<br>  SELECT object_type s_object_type, COUNT (*)<br>    FROM dba_objects<br>   WHERE owner = ‘ITPUX01’<br>GROUP BY object_type;</p></blockquote><p>  SELECT object_type t_object_type, COUNT (*)<br>    FROM dba_objects<br>   WHERE owner = ‘ITPUX01’<br>GROUP BY object_type;</p><p>SELECT *<br>  FROM dba_objects<br> WHERE status &lt;&gt; ‘VALID’ AND owner = ‘ITPUX01’;</p><pre><code>* dblink两个库一起查```sqlSELECT s.s_object_type,       s.s_count,       t.t_object_type,       t.t_count  FROM (  SELECT object_type s_object_type, COUNT (*) s_count            FROM dba_objects@db01           WHERE owner = &#39;ITPUX01&#39;        GROUP BY object_type) s,       (  SELECT object_type t_object_type, COUNT (*) t_count            FROM dba_objects           WHERE owner = &#39;ITPUX01&#39;        GROUP BY object_type) t;</code></pre><ul><li>自动生成编译无效对象SQL及编译过程<blockquote><p>统计当前用户无效对象数量</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> owner<span class="token punctuation">,</span>       object_type<span class="token punctuation">,</span>       <span class="token keyword">status</span><span class="token punctuation">,</span>       <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> dba_objects <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">&lt;></span> <span class="token string">'VALID'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> owner<span class="token punctuation">,</span> object_type<span class="token punctuation">,</span> <span class="token keyword">status</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> owner<span class="token punctuation">,</span> object_type<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><blockquote><p>生成编译无效对象SQL</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token string">'ALTER '</span>       <span class="token operator">||</span> OBJECT_TYPE       <span class="token operator">||</span> <span class="token string">' '</span>       <span class="token operator">||</span> OWNER       <span class="token operator">||</span> <span class="token string">'.'</span>       <span class="token operator">||</span> OBJECT_NAME       <span class="token operator">||</span> <span class="token string">' COMPILE;'</span>  <span class="token keyword">FROM</span> dba_objects <span class="token keyword">WHERE</span>     <span class="token keyword">status</span> <span class="token operator">&lt;></span> <span class="token string">'VALID'</span>       <span class="token operator">AND</span> object_type <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'PACKAGE'</span><span class="token punctuation">,</span>                           <span class="token string">'PACKAGE BODY'</span><span class="token punctuation">,</span>                           <span class="token string">'FUNCTION'</span><span class="token punctuation">,</span>                           <span class="token string">'PROCEDURE'</span><span class="token punctuation">,</span>                           <span class="token string">'TRIGGER'</span><span class="token punctuation">,</span>                           <span class="token string">'VIEW'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过复制以上SQL语句,直接手动执行编译执行.<br>也可以采用如下方式在oracle用户下进行手工编译</p><pre class="line-numbers language-sql"><code class="language-sql">su <span class="token operator">-</span> oracle$ sqlplus <span class="token operator">/</span> <span class="token keyword">as</span> sysdbaSQL<span class="token operator">></span> <span class="token variable">@$ORACLE_HOME</span><span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>utlrp<span class="token punctuation">.</span>sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="7-exp-imp迁移过程字符集的处理"><a href="#7-exp-imp迁移过程字符集的处理" class="headerlink" title="7.exp / imp迁移过程字符集的处理"></a>7.exp / imp迁移过程字符集的处理</h2><blockquote><p>进行数据的导入导出时，我们要注意关于字符集的问题。在EXP/IMP过程中我们需要注意四个字符集的参数：</p><pre class="line-numbers language-shell"><code class="language-shell">01.导出端的客户端字符集。02.导出端数据库字符集。03.导入端的客户端字符集。04.导入端数据库字符集。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先需要查看这四个字符集参数。<br>查看数据库的字符集的信息：<br><code>`</code>sql<br>SQL&gt; select <em> from nls_database_parameters;<br>//SQL&gt; select </em> from props$;<br>SQL&gt; SET PAGESIZE 30<br>SQL&gt; select * from nls_database_parameters;</p></blockquote><p>PARAMETER                      VALUE</p><hr><p>NLS_LANGUAGE                   AMERICAN<br>NLS_TERRITORY                  AMERICA<br>NLS_CURRENCY                   $<br>NLS_ISO_CURRENCY               AMERICA<br>NLS_NUMERIC_CHARACTERS         .,<br>NLS_CHARACTERSET               ZHS16GBK<br>NLS_CALENDAR                   GREGORIAN<br>NLS_DATE_FORMAT                DD-MON-RR<br>NLS_DATE_LANGUAGE              AMERICAN<br>NLS_SORT                       BINARY<br>NLS_TIME_FORMAT                HH.MI.SSXFF AM<br>NLS_TIMESTAMP_FORMAT           DD-MON-RR HH.MI.SSXFF AM<br>NLS_TIME_TZ_FORMAT             HH.MI.SSXFF AM TZR<br>NLS_TIMESTAMP_TZ_FORMAT        DD-MON-RR HH.MI.SSXFF AM TZR<br>NLS_DUAL_CURRENCY              $<br>NLS_COMP                       BINARY<br>NLS_LENGTH_SEMANTICS           BYTE<br>NLS_NCHAR_CONV_EXCP            FALSE<br>NLS_NCHAR_CHARACTERSET         UTF8<br>NLS_RDBMS_VERSION              11.2.0.4.0</p><p>20 rows selected.</p><pre><code>&gt;我们再来查看客户端的字符集信息：客户端字符集的参数NLS_LANG=_&lt; territory &gt;.language：指定oracle消息使用的语言，日期中日和月的显示。Territory：指定货币和数字的格式，地区和计算星期及日期的习惯。Characterset：控制客户端应用程序使用的字符集。通常设置或等于客户端的代码页。ZHS16GBK、UTF8。* 如数据库语言环境&gt;os是windows,使用命令set NLS_LANG=AMERICAN_AMERICA.ZHS16GBK&gt;os是linux or unix,使用命令export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK在unix中：\&gt;$ env|grep NLS_LANGNLS_LANG=AMERICAN_AMERICA.ZHS16GBK&gt;当前修改可用：$ export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK&gt;永久修改可用：vi bash_profile* 通常在导出时最好把客户端字符集设置得和数据库端相同。当进行数据导入时，主要有以下两种情况：&gt;&amp;emsp;&amp;emsp;(1) 源数据库和目标数据库具有相同的字符集设置。这时，只需设置导出和导入端的客户端NLS_LANG等于数据库字符集即可。&amp;emsp;&amp;emsp;(2) 源数据库和目标数据库字符集不同。&amp;emsp;&amp;emsp;先将导出端客户端的NLS_LANG设置成和导出端的数据库字符集一致，导出数据，然后将导入端客户端的NLS_LANG设置成和导出端一致，导入数据，这样转换只发生在数据库端，而且只发生一次。&amp;emsp;&amp;emsp;这种情况下，只有当导入端数据库字符集为导出端数据库字符集的严格超集时，数据才能完全导成功，否则，可能会有数据不一致或乱码出现。## 8.exp / imp优化的方法&gt;当需要exp/imp的数据量比较大时，这个过程需要的时间是比较长的，我们可以用一些方法来优化exp/imp的操作。* 01.exp:使用直接路径 direct=y&gt;&amp;emsp;&amp;emsp;oracle会避开sql语句处理引擎,直接从数据库文件中读取数据,然后写入导出文件.&amp;emsp;&amp;emsp;可以在导出日志中观察到: exp-00067: table xxx will be exported in conventional path&amp;emsp;&amp;emsp;如果没有使用直接路径,必须保证buffer参数的值足够大.&amp;emsp;&amp;emsp;有一些参数于direct=y不兼容,无法用直接路径导出可移动的tablespace,或者用query参数导出数据库子集.&amp;emsp;&amp;emsp;当导入导出的数据库运行在不同的os下时,必须保证recordlength参数的值一致.* 02.exp: 清空回收站```sqlSQL&gt; select count(*) from dba_recyclebin;SQL&gt; purge dba_recyclebin;</code></pre><ul><li><p>03.imp:避免磁盘排序</p><blockquote><p>涉及到sort_area_size参数,也就是我们的PGA要够大。</p></blockquote></li><li><p>05.imp:优化日志缓冲区</p><blockquote><p>比如将log_buffer容量扩大10倍(最大不要超过5M),也就是我们的SGA要够大。</p></blockquote></li><li><p>05.imp:避免日志切换等待</p><blockquote><p>增加重做日志组的数量,增大日志文件大小.</p></blockquote></li><li><p>06.imp:使用commit</p><blockquote><p>commit = y<br>注意:这个方式不能处理包含LOB和LONG类型的表,对于这样的table,如果使用commit = y,每插入一行,就会执行一次提交.</p></blockquote></li><li><p>07.imp:使用NOLOGGING方式减小重做日志大小</p><blockquote><p>在导入时指定参数indexes=n,只导入数据而忽略index,在导完数据后在通过脚本创建index,指定NOLOGGING选项</p></blockquote></li></ul><h2 id="9-exp-imp-常见问题及解决方法"><a href="#9-exp-imp-常见问题及解决方法" class="headerlink" title="9.exp / imp 常见问题及解决方法"></a>9.exp / imp 常见问题及解决方法</h2><h3 id="9-1-关于imp-exp版本的问题"><a href="#9-1-关于imp-exp版本的问题" class="headerlink" title="9.1 关于imp/exp版本的问题"></a>9.1 关于imp/exp版本的问题</h3><blockquote><p>一般来说，从低版本导入到高版本问题不大，麻烦的是将高版本的数据导入到低版本中。</p><ul><li>可以跨版本的使用EXP/IMP，但必须正确地使用EXP和IMP的版本（官方可查）：<pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span>、使用IMP的版本匹配数据库的版本，如：要导入到<span class="token number">11.2</span>中，使用<span class="token number">11.2</span>的IMP工具。<span class="token number">2</span>、使用EXP的版本匹配两个数据库中最低的版本，如：从<span class="token number">11.2</span>往<span class="token number">10.2</span>中导入，则使用<span class="token number">10.2</span>版本的EXP工具。<span class="token number">3</span>、高版本的Export导出来的转储文件，低版本的<span class="token keyword">Import</span>读不了；低版本的Export导出来的转储文件，高版本的<span class="token keyword">Import</span>可以进行读取。<span class="token number">4</span>、从Oracle低版本的Export数据可以<span class="token keyword">Import</span>到Oracle高版本中，但限于Oracle的相邻版本，两个不相邻版本间进行转换应借助中间版本。<span class="token number">5</span>、exp<span class="token operator">/</span>imp可以做到在不同版本Oracle、不同数据库上的迁移。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="9-2-数据库对象已经存在"><a href="#9-2-数据库对象已经存在" class="headerlink" title="9.2 数据库对象已经存在"></a>9.2 数据库对象已经存在</h3><blockquote><p>&emsp;&emsp;一般情况, 导入数据前应该彻底删除目标数据下的表, 序列, 函数/过程,触发器等; 数据库对象已经存在, 按缺省的imp参数, 则会导入失败如果用了参数ignore=y, 会把exp文件内的数据内容导入如果表有唯一关键字的约束条件, 不合条件将不被导入如果表没有唯一关键字的约束条件, 将引起记录重复</p></blockquote><h3 id="9-3-数据库对象有主外键约束"><a href="#9-3-数据库对象有主外键约束" class="headerlink" title="9.3 数据库对象有主外键约束"></a>9.3 数据库对象有主外键约束</h3><blockquote><p>不符合主外键约束时, 数据会导入失败,<br>解决办法:<br>先导入主表, 再导入依存表<br>disable目标导入对象的主外键约束, 导入数据后, 再enable它们</p></blockquote><h3 id="9-4-权限不够"><a href="#9-4-权限不够" class="headerlink" title="9.4 权限不够"></a>9.4 权限不够</h3><blockquote><p>如果要把A用户的数据导入B用户下, A用户需要有imp_full_database权限</p></blockquote><h3 id="9-5-导入大表存储分配失败"><a href="#9-5-导入大表存储分配失败" class="headerlink" title="9.5 导入大表存储分配失败"></a>9.5 导入大表存储分配失败</h3><blockquote><p>&emsp;&emsp;默认的EXP时, compress = y, 也就是把所有的数据压缩在一个数据块上.<br>导入时, 如果不存在连续一个大数据块, 则会导入失败. 导出大表时, 记得compress= n, 则不会引起这种错误.</p></blockquote><h3 id="9-6-imp和exp使用的字符集不同"><a href="#9-6-imp和exp使用的字符集不同" class="headerlink" title="9.6 imp和exp使用的字符集不同"></a>9.6 imp和exp使用的字符集不同</h3><blockquote><p>&emsp;&emsp;如果字符集不同, 导入会失败, 可以改变unix环境变量或者NT注册表里NLS_LANG相关信息. 导入完成后再改回来.</p></blockquote><h3 id="9-7-imp和exp版本不能往上兼容"><a href="#9-7-imp和exp版本不能往上兼容" class="headerlink" title="9.7 imp和exp版本不能往上兼容"></a>9.7 imp和exp版本不能往上兼容</h3><blockquote><p>可以从低版本导入高版本，但不能从高版本导入到低版本。<br>如果遇到迁移因版本不同的问题，可以用低版本的export 导出，到导入到低版本。</p></blockquote><h3 id="9-8-导出统计信息的问题。"><a href="#9-8-导出统计信息的问题。" class="headerlink" title="9.8 导出统计信息的问题。"></a>9.8 导出统计信息的问题。</h3><blockquote><p>&emsp;&emsp;如果导出统计信息,在只导出部分数据,或不导出数据时,导出统计信息会报错.另如果未导出统计信息,但导入时,需导入统计信息<br>,那此时,导入后,统计信息会被锁住,而无法更新统计信息.<br>&emsp;&emsp;此时,我们可使用包dbms_stats.unlock_schema_stats来解锁.最好的办法是,在exp,imp时,加入参数statistics=none,不exp,imp统计信息,在导入完成后,在重新收集统计信息.</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">BEGIN</span>    DBMS_STATS<span class="token punctuation">.</span>gather_database_stats<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">BEGIN</span>    DBMS_STATS<span class="token punctuation">.</span>gather_schema_stats <span class="token punctuation">(</span><span class="token string">'ITPUX02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 备份容灾 </tag>
            
            <tag> Exp </tag>
            
            <tag> Imp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库逻辑备份恢复迁移之expdp与impdp</title>
      <link href="/oracle/oracle-shu-ju-ku-luo-ji-bei-fen-hui-fu-qian-yi-zhi-expdp-yu-impdp/"/>
      <url>/oracle/oracle-shu-ju-ku-luo-ji-bei-fen-hui-fu-qian-yi-zhi-expdp-yu-impdp/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle数据库逻辑备份恢复迁移之expdp与impdp"><a href="#Oracle数据库逻辑备份恢复迁移之expdp与impdp" class="headerlink" title="Oracle数据库逻辑备份恢复迁移之expdp与impdp"></a>Oracle数据库逻辑备份恢复迁移之expdp与impdp</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>[Oracle 11G R2 官方文档][1]</p><h2 id="1-Oracle数据泵expdp-impdp概念"><a href="#1-Oracle数据泵expdp-impdp概念" class="headerlink" title="1.Oracle数据泵expdp/impdp概念"></a>1.Oracle数据泵expdp/impdp概念</h2><ul><li>Oracle Database 10g引入了最新的数据泵(Data Dump)技术，数据泵导出导入(EXPDP和IMPDP)的作用<blockquote><p>1）实现逻辑备份和逻辑恢复.<br>2）在数据库用户之间移动对象.<br>3）在数据库之间移动对象<br>4）实现表空间搬移.</p></blockquote></li><li><p>数据泵导出导入与传统导出导入的区别</p><blockquote><p>&emsp;&emsp;在10g之前,传统的导出和导入分别使用exp工具和imp工具,从10g开始,不仅保留了原有的exp和imp工具,还提供了数据泵导出导入工具expdp和impdp.使用expdp和impdp时应该注意的事项：<br>1）exp和imp是客户端工具程序,它们既可以在可以客户端使用,也可以在服务端使用。<br>2）expdp和impdp是服务端的工具程序,他们只能在oracle服务端使用,不能在客户端使用。<br>3）imp只适用于exp导出文件,不适用于expdp导出文件;impdp只适用于expdp导出文件,而不适用于exp导出文件。</p></blockquote></li><li><p>数据泵导出包括导出表,导出方案,导出表空间,导出数据库4种方式.</p></li><li><p>oracle数据泵的工作流程如下</p><blockquote><p>1、在命令行执行命令<br>2、expdp/impdp命令调用dbms_datapump pl/sql包。 这个api提供高速的导出导入功能。<br>3、 当data 移动的时候， data pump 会自动选择direct path 或者external table mechanism 或者 两种结合的方式。<br>&emsp;&emsp;当metadata（对象定义） 移动的时候，data pump会使用dbms_metadata pl/sql包。 metadata api 将metadata（对象定义）存储在xml里。所有的进程都能load 和unload 这些metadata. 因为data pump 调用的是服务端的api, 所以当一个任务被调度或执行，客户端就可以退出连接，任务job 会在server 端继续执行，随后通过客户端实用程序从任何地方检查任务的状态和进行修改。</p></blockquote></li></ul><h2 id="2-expdp-impdp-命令参数详解"><a href="#2-expdp-impdp-命令参数详解" class="headerlink" title="2.expdp/impdp 命令参数详解"></a>2.expdp/impdp 命令参数详解</h2><h3 id="2-1关于expdp"><a href="#2-1关于expdp" class="headerlink" title="2.1关于expdp"></a>2.1关于expdp</h3><pre class="line-numbers language-shell"><code class="language-shell">[oracle@db01:/home/oracle]$expdp -helpExport: Release 11.2.0.3.0 - Production on Mon Aug 22 00:16:30 2016Copyright (c) 1982, 2011, Oracle and/or its affiliates. All rights reserved.The Data Pump export utility provides a mechanism for transferring data objectsbetween Oracle databases. The utility is invoked with the following command:Example: expdp scott/tiger DIRECTORY=dmpdir DUMPFILE=scott.dmpYou can control how Export runs by entering the 'expdp' command followedby various parameters. To specify parameters, you use keywords:Format: expdp KEYWORD=value or KEYWORD=(value1,value2,...,valueN)Example: expdp scott/tiger DUMPFILE=scott.dmp DIRECTORY=dmpdir SCHEMAS=scottor TABLES=(T1:P1,T1:P2), if T1 is partitioned tableUSERID must be the first parameter on the command line.The available keywords and their descriptions follow. Default values are listed within square brackets.ATTACHAttach to an existing job.For example, ATTACH=job_name.该选项用于在客户会话与已存在导出作用之间建立关联.语法如下attach=[schema_name.]job_nameschema_name用于指定方案名,job_name用于指定导出作业名.注意,如果使用attach选项,在命令行除了连接字符串和attach选项外,不能指定任何其他选项,示例如下:expdp scott/tiger attach=scott.export_jobCLUSTERUtilize cluster resources and distribute workers across the Oracle RAC.Valid keyword values are: [Y] and N.而在11GR2后EXPDP和IMDP的WORKER进程会在多个INSTANCE启动，所以DIRECTORY必须在共享磁盘上，如果没有设置共享磁盘还是指定cluster=no来防止报错COMPRESSIONReduce the size of a dump file.Valid keyword values are: ALL, DATA_ONLY, [METADATA_ONLY] and NONE.这个压缩比例可以和操作系统“gzip -9”相媲美，某些特例下有可能比gzip还要高效：1/7。10g中的COMPRESSION参数只提供METADATA_ONLY和NONE两个选项，基本上没有提供压缩功能。11g中的COMPRESSION参数提供四个选项，分别是ALL、DATA_ONLY、METADATA_ONLY和NONE，非常的丰富，稍后我们将使用ALL参数进行操作。Oracle 11g的EXPDP工具提供了真正意义上的“备份压缩”，这个技术在备份空间不足的情况下非常实用。all 压缩元数据和对象数据 data_only 只压缩对象数据 metadata_only 只压缩元数据 none 不压缩任何数据。CONTENTSpecifies data to unload.Valid keyword values are: [ALL], DATA_ONLY and METADATA_ONLY.该选项用于指定要导出的内容.默认值为allcontent={all | data_only | metadata_only}当设置content为all 时,将导出对象定义及其所有数据.为data_only时,只导出对象数据,为metadata_only时,只导出对象定义。expdp scott/tiger directory=dump dumpfile=a.dump content=metadata_onlyDATA_OPTIONSData layer option flags.Valid keyword values are: XML_CLOBS.用于为某些类型的数据提供选项DIRECTORYDirectory object to be used for dump and log files.指定转储文件和日志文件所在的目录，directory=directory_objectdirectory_object用于指定目录对象名称.需要注意,目录对象是使用create directory语句建立的对象,而不是os 目录。expdp scott/tiger directory=dump dumpfile=a.dump先在对应的位置创建物理文件夹，如d:/backup建立目录:create or replace directory backup as '/opt/oracle/utl_file'sql>create directory backup as ‘d:/backup’;sql>grant read,write on directory backup to system;查询创建了那些子目录:select * from dba_directories;DUMPFILESpecify list of destination dump file names [expdat.dmp].For example, DUMPFILE=scott1.dmp, scott2.dmp, dmpdir:scott3.dmp.用于指定转储文件的名称,默认名称为expdat.dmpdumpfile=[directory_object:]file_name [,….]directory_object用于指定目录对象名,file_name用于指定转储文件名.需要注意,如果不指定directory_object,导出工具会自动使用directory选项指定的目录对象：expdp scott/tiger directory=dump1 dumpfile=dump2:a.dmpENCRYPTIONEncrypt part or all of a dump file.Valid keyword values are: ALL, DATA_ONLY, ENCRYPTED_COLUMNS_ONLY, METADATA_ONLY and NONE.是否加密导出数据 默认noneencryption={all | data_only |metadata_only | encrypted_columns_only | none}all 对象和元数据 data_only 对象加密 metadata_only 元数据加密 encryption_columns_only 只加密加密列 none 不加密ENCRYPTION_ALGORITHMSpecify how encryption should be done.Valid keyword values are: [AES128], AES192 and AES256.加密算法 默认aes128encryption_algorithm= {aes128 | aes 192 | aes 256}ENCRYPTION_MODEMethod of generating encryption key.Valid keyword values are: DUAL, PASSWORD and [TRANSPARENT].加密和解密所使用的安全类型encryption_mode={dual | password |transparent }dual 表示用 oracle wallet 或指定口令建立导出文件password 指定口令建立导出文件 transparent oracle wallet建立导出文件ENCRYPTION_PASSWORDPassword key for creating encrypted data within a dump file.指定加密和解密口令 encryption_password=passwordESTIMATECalculate job estimates.Valid keyword values are: [BLOCKS] and STATISTICS.指定估算被导出表所占用磁盘空间分方法.默认值是blocks。extimate={blocks | statistics}设置为blocks时,oracle会按照目标对象所占用的数据块个数乘以数据块尺寸估算对象占用的空间,设置为statistics时,根据最近统计值估算对象占用空间: expdp scott/tiger tables=emp estimate=statistics directory=dump dumpfile=a.dumpESTIMATE_ONLYCalculate job estimates without performing the export.指定是否只估算导出作业所占用的磁盘空间,默认值为nextimate_only={y | n}设置为y时,导出作用只估算对象所占用的磁盘空间,而不会执行导出作业,为n时,不仅估算对象所占用的磁盘空间,还会执行导出操作.expdp scott/tiger estimate_only=y nologfile=yEXCLUDEExclude specific object types.For example, EXCLUDE=SCHEMA:"='HR'".该选项用于指定执行操作时释放要排除对象类型或相关对象 ITPUXexclude=object_type[:name_clause] [,….]object_type用于指定要排除的对象类型,name_clause用于指定要排除的具体对象.exclude和include不能同时使用。expdp scott/tiger directory=dump dumpfile=a.dup exclude=viewFILESIZESpecify the size of each dump file in units of bytes.指定导出文件的最大尺寸,默认为0,(表示文件尺寸没有限制)FLASHBACK_SCNSCN used to reset session snapshot.指定导出特定scn时刻的表数据。flashback_scn=scn_valuescn_value用于标识scn值.flashback_scn和flashback_time不能同时使用： expdpscott/tiger directory=dump dumpfile=a.dmp flashback_scn=358523FLASHBACK_TIMETime used to find the closest corresponding SCN value.指定导出特定时间点的表数据flashback_time=”to_timestamp(time_value)”expdp scott/tiger directory=dump dumpfile=a.dmp flashback_time= “to_timestamp(’25-08-2004 14:35:00’,’dd-mm-yyyy hh24:mi:ss’)”FULLExport entire database [N].指定数据库模式导出,默认为n。 full={y | n} 。为y时,标识执行数据库导出.HELPDisplay Help messages [N].指定是否显示expdp命令行选项的帮助信息,默认为n。当设置为y时,会显示导出选项的帮助信息. expdp help=yINCLUDEInclude specific object types.For example, INCLUDE=TABLE_DATA.指定导出时要包含的对象类型及相关对象。include = object_type[:name_clause] [,… ]JOB_NAMEName of export job to create.指定要导出作用的名称,默认为sys_xxx 。job_name=jobname_stringLOGFILESpecify log file name [export.log].指定导出日志文件文件的名称,默认名称为export.loglogfile=[directory_object:]file_namedirectory_object用于指定目录对象名称,file_name用于指定导出日志文件名.如果不指定directory_object.导出作用会自动使用directory的相应选项值.expdp scott/tiger directory=dump dumpfile=a.dmp logfile=a.logNETWORK_LINKName of remote database link to the source system.指定数据库链接名,如果要将远程数据库对象导出到本地例程的转储文件中,必须设置该选项.NOLOGFILEDo not write log file [N].该选项用于指定禁止生成导出日志文件,默认值为n.PARALLELChange the number of active workers for current job.指定执行导出操作的并行进程个数,默认值为1一般是cpu的2倍，可以被文件个数整除PARFILESpecify parameter file name.指定导出参数文件的名称。parfile=[directory_path] file_nameQUERYPredicate clause used to export a subset of a table.For example, QUERY=employees:"WHERE department_id > 10".用于指定过滤导出数据的where条件query=[schema.] [table_name:] query_clauseschema用于指定方案名,table_name用于指定表名,query_clause用于指定条件限制子句.query选项不能与connect=metadata_only,extimate_only,transport_tablespaces等选项同时使用.expdp scott/tiger directory=dump dumpfiel=a.dmp tables=emp query=’where deptno=20’REMAP_DATASpecify a data conversion function.For example, REMAP_DATA=EMP.EMPNO:REMAPPKG.EMPNO.用于转换列的数据函数， 并将转换值导出到文件中remap_data=[schema1.]tablename.column_name:[schema2.]pkg.funcREUSE_DUMPFILESOverwrite destination dump file if it exists [N].覆盖已处在的导出文件，默认NSAMPLEPercentage of data to be exported.用于指定被采样数据块的百分比sample=[[schema_name.]table_name:]sample_percent (采用比率)SCHEMASList of schemas to export [login schema].该方案用于指定执行方案模式导出,默认为当前用户方案.SERVICE_NAMEName of an active Service and associated resource group to constrain Oracle RAC resources.SOURCE_EDITIONEdition to be used for extracting metadata.用于提取源数据的版本STATUSFrequency (secs) job status is to be monitored wherethe default [0] will show new status when available.指定显示导出作用进程的详细状态,默认值为0TABLESIdentifies a list of tables to export.For example, TABLES=HR.EMPLOYEES,SH.SALES:SALES_1995.指定表模式导出tables=[schema_name.]table_name[:partition_name][,…]schema_name用于指定方案名,table_name用于指定导出的表名,partition_name用于指定要导出的分区名.TABLESPACESIdentifies a list of tablespaces to export.指定要导出表空间列表TRANSPORTABLESpecify whether transportable method can be used.Valid keyword values are: ALWAYS and [NEVER].指定是否可以使用可传输方法TRANSPORT_FULL_CHECKVerify storage segments of all tables [N].    该选项用于指定被搬移表空间和未搬移表空间关联关系的检查方式,默认为n. 当设置为y时,导出作用会检查表空间直接的完整关联关系,如果表空间所在表空间或其索引所在的表空间只有一个表空间被搬移,将显示错误信息.当设置为n时,导出作用只检查单端依赖,如果搬移索引所在表空间,但未搬移表所在表空间,将显示出错信息,如果搬移表所在表空间,未搬移索引所在表空间,则不会显示错误信息.TRANSPORT_TABLESPACESList of tablespaces from which metadata will be unloaded.指定执行表空间模式导出 ，用于指定搬移的的表空间VERSIONVersion of objects to export.Valid keyword values are: [COMPATIBLE], LATEST or any valid database version.用于指定被导出对象的数据库版本 默认 compatibleversion={compatable | latest |version_string}compatible 根据compatible参数生成对象 latest 根据数据库的实际版本 version_string 指定数据库版本（>9.2）------------------------------------------------------------------------------The following commands are valid while in interactive mode.Note: abbreviations are allowed.ADD_FILEAdd dumpfile to dumpfile set. 向转储文件集中添加转储文件CONTINUE_CLIENTReturn to logging mode. Job will be restarted if idle.返回到记录模式。如果处于空闲状态, 将重新启动作业。EXIT_CLIENTQuit client session and leave job running.退出客户机会话并使作业处于运行状态FILESIZEDefault filesize (bytes) for subsequent ADD_FILE commands.后续 ADD_FILE 命令的默认文件大小 (字节)。HELPSummarize interactive commands.总结交互命令。KILL_JOBDetach and delete job.分离和删除作业PARALLELChange the number of active workers for current job.更改当前作业的活动 worker 的数目。REUSE_DUMPFILESOverwrite destination dump file if it exists [N].是否覆盖dumpfilesSTART_JOBStart or resume current job.Valid keyword values are: SKIP_CURRENT.启动/恢复当前作业。STATUSFrequency (secs) job status is to be monitored wherethe default [0] will show new status when available.在默认值 (0) 将显示可用时的新状态的情况下,要监视的频率 (以秒计) 作业状态。STATUS[=interval]STOP_JOBOrderly shutdown of job execution and exits the client.Valid keyword values are: IMMEDIATE.顺序关闭执行的作业并退出客户机。STOP_JOB=IMMEDIATE 将立即关闭数据泵作业。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-关于impdp"><a href="#2-2-关于impdp" class="headerlink" title="2.2 关于impdp"></a>2.2 关于impdp</h2><pre class="line-numbers language-shell"><code class="language-shell">[oracle@db01:/home/oracle]$impdp -helpImport: Release 11.2.0.3.0 - Production on Mon Aug 22 00:16:43 2016Copyright (c) 1982, 2011, Oracle and/or its affiliates. All rights reserved.The Data Pump Import utility provides a mechanism for transferring data objectsbetween Oracle databases. The utility is invoked with the following command:Example: impdp scott/tiger DIRECTORY=dmpdir DUMPFILE=scott.dmpYou can control how Import runs by entering the 'impdp' command followedby various parameters. To specify parameters, you use keywords:Format: impdp KEYWORD=value or KEYWORD=(value1,value2,...,valueN)Example: impdp scott/tiger DIRECTORY=dmpdir DUMPFILE=scott.dmpUSERID must be the first parameter on the command line.------------------------------------------------------------------------------The available keywords and their descriptions follow. Default values are listed within square brackets.ATTACHAttach to an existing job.For example, ATTACH=job_name.CLUSTERUtilize cluster resources and distribute workers across the Oracle RAC.Valid keyword values are: [Y] and N.CONTENTSpecifies data to load.Valid keywords are: [ALL], DATA_ONLY and METADATA_ONLY.DATA_OPTIONSData layer option flags.Valid keywords are: SKIP_CONSTRAINT_ERRORS.DIRECTORYDirectory object to be used for dump, log and SQL files.DUMPFILEList of dump files to import from [expdat.dmp].For example, DUMPFILE=scott1.dmp, scott2.dmp, dmpdir:scott3.dmp.ENCRYPTION_PASSWORDPassword key for accessing encrypted data within a dump file.Not valid for network import jobs.ESTIMATECalculate job estimates.Valid keywords are: [BLOCKS] and STATISTICS.EXCLUDEExclude specific object types.For example, EXCLUDE=SCHEMA:"='HR'".FLASHBACK_SCNSCN used to reset session snapshot.FLASHBACK_TIMETime used to find the closest corresponding SCN value.FULLImport everything from source [Y].HELPDisplay help messages [N].INCLUDEInclude specific object types.For example, INCLUDE=TABLE_DATA.JOB_NAMEName of import job to create.LOGFILELog file name [import.log].NETWORK_LINKName of remote database link to the source system.NOLOGFILEDo not write log file [N].PARALLELChange the number of active workers for current job.PARFILESpecify parameter file.PARTITION_OPTIONSSpecify how partitions should be transformed.Valid keywords are: DEPARTITION, MERGE and [NONE].QUERYPredicate clause used to import a subset of a table.For example, QUERY=employees:"WHERE department_id > 10".REMAP_DATASpecify a data conversion function.For example, REMAP_DATA=EMP.EMPNO:REMAPPKG.EMPNO.REMAP_DATAFILERedefine data file references in all DDL statements.REMAP_SCHEMAObjects from one schema are loaded into another schema.REMAP_TABLETable names are remapped to another table.For example, REMAP_TABLE=HR.EMPLOYEES:EMPS.REMAP_TABLESPACETablespace objects are remapped to another tablespace.REUSE_DATAFILESTablespace will be initialized if it already exists [N].SCHEMASList of schemas to import.SERVICE_NAMEName of an active Service and associated resource group to constrain Oracle RAC resources.SKIP_UNUSABLE_INDEXESSkip indexes that were set to the Index Unusable state.SOURCE_EDITIONEdition to be used for extracting metadata.SQLFILEWrite all the SQL DDL to a specified file.STATUSFrequency (secs) job status is to be monitored wherethe default [0] will show new status when available.STREAMS_CONFIGURATIONEnable the loading of Streams metadataTABLE_EXISTS_ACTIONAction to take if imported object already exists.Valid keywords are: APPEND, REPLACE, [SKIP] and TRUNCATE.TABLESIdentifies a list of tables to import.For example, TABLES=HR.EMPLOYEES,SH.SALES:SALES_1995.TABLESPACESIdentifies a list of tablespaces to import.TARGET_EDITIONEdition to be used for loading metadata.TRANSFORMMetadata transform to apply to applicable objects.Valid keywords are: OID, PCTSPACE, SEGMENT_ATTRIBUTES and STORAGE.TRANSPORTABLEOptions for choosing transportable data movement.Valid keywords are: ALWAYS and [NEVER].Only valid in NETWORK_LINK mode import operations.TRANSPORT_DATAFILESList of data files to be imported by transportable mode.TRANSPORT_FULL_CHECKVerify storage segments of all tables [N].TRANSPORT_TABLESPACESList of tablespaces from which metadata will be loaded.Only valid in NETWORK_LINK mode import operations.VERSIONVersion of objects to import.Valid keywords are: [COMPATIBLE], LATEST or any valid database version.Only valid for NETWORK_LINK and SQLFILE.------------------------------------------------------------------------------The following commands are valid while in interactive mode.Note: abbreviations are allowed.CONTINUE_CLIENTReturn to logging mode. Job will be restarted if idle.EXIT_CLIENTQuit client session and leave job running.HELPSummarize interactive commands.KILL_JOBDetach and delete job.PARALLELChange the number of active workers for current job.START_JOBStart or resume current job.Valid keywords are: SKIP_CURRENT.STATUSFrequency (secs) job status is to be monitored wherethe default [0] will show new status when available.STOP_JOBOrderly shutdown of job execution and exits the client.Valid keywords are: IMMEDIATE.其实IMPDP命令行选项与EXPDP有很多相同的,下面我们只介绍不同的部分：（1）REMAP_DATAFILE该选项用于将源数据文件名转变为目标数据文件名,在不同平台之间搬移表空间时可能需要该选项.REMAP_DATAFIEL=source_datafie:target_datafile（2）REMAP_SCHEMA该选项用于将源方案的所有对象装载到目标方案中.REMAP_SCHEMA=source_schema:target_schema（3）REMAP_TABLESPACE将源表空间的所有对象导入到目标表空间中REMAP_TABLESPACE=source_tablespace:target_tablespace（4）REUSE_DATAFILES该选项指定建立表空间时是否覆盖已存在的数据文件.默认为N。REUSE_DATAFIELS={Y | N}（5）SKIP_UNUSABLE_INDEXES指定导入是是否跳过不可使用的索引,默认为N（6）SQLFILE指定将导入要指定的索引DDL操作写入到SQL脚本中。SQLFILE=[directory_object:]file_nameImpdp scott/tiger DIRECTORY=dump DUMPFILE=tab.dmp SQLFILE=a.sql（7）STREAMS_CONFIGURATION指定是否导入流元数据(Stream Matadata),默认值为Y.（8）TABLE_EXISTS_ACTION该选项用于指定当表已经存在时导入作业要执行的操作,默认为SKIPTABBLE_EXISTS_ACTION={SKIP | APPEND | TRUNCATE | FRPLACE }当设置该选项为SKIP时,导入作业会跳过已存在表处理下一个对象;当设置为APPEND时,会追加数据,为TRUNCATE时,导入作业会截断表,然后为其追加新数据;当设置为REPLACE时,导入作业会删除已存在表,重建表病追加数据,注意,TRUNCATE选项不适用与簇表和NETWORK_LINK选项（9）TRANSFORM该选项用于指定是否修改建立对象的DDL语句TRANSFORM=transform_name:value[:object_type]Transform_name用于指定转换名,其中SEGMENT_ATTRIBUTES用于标识段属性(物理属性,存储属性,表空间,日志等信息),STORAGE用于标识段存储属性,VALUE用于指定是否包含段属性或段存储属性,object_type用于指定对象类型.Impdp scott/tiger directory=dump dumpfile=tab.dmp Transform=segment_attributes:n:table（10）TRANSPORT_DATAFILES该选项用于指定搬移空间时要被导入到目标数据库的数据文件。TRANSPORT_DATAFILE=datafile_nameDatafile_name用于指定被复制到目标数据库的数据文件Impdp system/manager DIRECTORY=dump DUMPFILE=tts.dmp TRANSPORT_DATAFILES=’/user01/data/tbs1.f’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-expdp-impdp-使用方法详解"><a href="#3-expdp-impdp-使用方法详解" class="headerlink" title="3.expdp/impdp 使用方法详解"></a>3.expdp/impdp 使用方法详解</h2><h3 id="3-1-oracle-expdp-使用方法介绍"><a href="#3-1-oracle-expdp-使用方法介绍" class="headerlink" title="3.1 oracle expdp 使用方法介绍"></a>3.1 oracle expdp 使用方法介绍</h3><pre class="line-numbers language-shell"><code class="language-shell">使用expdp工具时,其转储文件只能被存放在directory对象对应的os目录中,而不能直接指定转储文件所在的os目录.因此,使用expdp工具时,必须首先建立directory对象.并且需要为数据库用户授予使用directory对象权限.--创建directory:create directory itpuxbak_dir as '/backup';grant read,write on directory itpuxbak_dir to system;grant read,write on directory itpuxbak_dir to itpux01;--01)导出整个数据库expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_full_db01.dmp logfile=expdp_full_db01.log full=yexpdp system/oracle directory=itpuxbak_dir dumpfile=expdp_full_db01_%U.dmp logfile=expdp_full_db01.log full=y parallel=4--02)导出方案-schema-用户expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_u_itpux01.dmp logfile=expdp_u_itpux01.log schemas=itpux01,itpux02--03)导出表空间expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_ts_itpux01.dmp logfile=expdp_ts_itpux01.log tablespaces=itpux01,itpux02--04)导出表expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=expdp_tb_itpux01.log tables=itpux01,itpux02expdp itpux01/itpux01 directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=expdp_tb_itpux01.log tables=itpux01--05)按表查询条件导出expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_q_itpux01.dmp logfile=expdp_q_itpux01.log tables=itpux01 query='where id=5'expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_q_itpux01.dmp logfile=expdp_q_itpux01.log QUERY=employees:"WHERE department_id > 10"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-oracle-impdp-使用方法介绍"><a href="#3-2-oracle-impdp-使用方法介绍" class="headerlink" title="3.2 oracle impdp 使用方法介绍"></a>3.2 oracle impdp 使用方法介绍</h3><blockquote><p>使用impdp工具时,如果数据库中不存在相应的directory，必须首先建立directory对象.并且需要为数据库用户授予使用directory对象权限.<br><code>`</code>sql<br>–创建directory:<br>create directory itpuxbak_dir as ‘/backup’;<br>grant read,write on directory itpuxbak_dir to system;<br>grant read,write on directory itpuxbak_dir to itpux01;</p></blockquote><p>–01)导入整个数据库<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_full_db01.dmp logfile=impdp_full_db01.log full=y<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_full_db01_%U.dmp logfile=impdp_full_db01.log full=y parallel=4</p><p>–02)导入方案-schema-用户<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_u_itpux01.dmp logfile=impdp_u_itpux01.log schemas=itpux01,itpux02<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_u_itpux01.dmp logfile=impdp_u_itpux01.log schemas=itpux01,itpux02 remap_schema=itpux02:itpux002</p><p>–03)导入表空间<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_ts_itpux01.dmp logfile=impdp_ts_itpux01.log tablespaces=itpux01,itpux02</p><p>–04)导入表<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log tables=itpux01,itpux02<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log tables=itpux01,itpux02 remap_schema=system:itpux<br>impdp itpux01/itpux01 directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log tables=itpux01<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log TABLES=HR.EMPLOYEES,SH.SALES:SALES_1995</p><p>–05)按表查询条件导入<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log tables=itpux01,itpux02 query=’where id=5’<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log tables=itpux01,itpux02 remap_schema=system:itpux query=’where id=5’</p><p>impdp itpux01/itpux01 directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log tables=itpux01 query=’where id=5’<br>impdp system/oracle directory=itpuxbak_dir dumpfile=expdp_tb_itpux01.dmp logfile=impdp_tb_itpux01.log TABLES=HR.EMPLOYEES,SH.SALES:SALES_1995 QUERY=HR.EMPLOYEES:”WHERE department_id &gt; 10”</p><pre><code>### 3.3 oracle expdp/impdp补充```shell--01)directorycreate directory itpuxbak_dir as &#39;/backup&#39;;--drop directory itpuxbak_dirselect * from dba_directoriesgrant read,write on directory itpuxbak_dir to system; --system:itpux01:other usersgrant create any directory to system;select * from dba_sys_privs where grantee=&#39;SYSTEM&#39;;--02) sysdba full=yexpdp &quot;&#39;/as sysdba&#39;&quot; directory=itpuxbak_dir dumpfile=expdp_full_db01.dmp logfile=expdp_full_db01.log full=y --sys--03)查询datapump jobsselect * from dba_datapump_jobs;expdp &quot;&#39;/as sysdba&#39;&quot; directory=itpuxbak_dir dumpfile=expdp_full_db01.dmp logfile=expdp_full_db01.log full=y job_name=itpuxexpjob;</code></pre><h2 id="4-配置生产环境的逻辑自动备份策略"><a href="#4-配置生产环境的逻辑自动备份策略" class="headerlink" title="4.配置生产环境的逻辑自动备份策略"></a>4.配置生产环境的逻辑自动备份策略</h2><blockquote><p>每天做逻辑备份，数据量大小500G，保留2天，空间准备2TB<br>我的库不开归档的，不能在线做RMAN。<br><code>`</code>shell<br>create directory itpuxbak_dir as ‘/backup’;<br>grant read,write on directory itpuxbak_dir to system;<br>grant create any directory to system;</p></blockquote><p>#vi expdpfull_db01.sh<br>export BAKDATE=<code>date +%Y%m%d</code><br>expdp system/oracle directory=itpuxbak_dir dumpfile=expdp_full_db01.$BAKDATE.%U.dmp logfile=expdp_full_db01.$BAKDATE.log full=y parallel=4<br>find /backup -name expdp_full_db01.*.dmp -atime +2 -exec rm -rf {} \;</p><p>#–cluster=N</p><p>#chown -R oracle:dba /backup</p><p>#chmod -R 775 /backup</p><p>#crontab -e<br>0 20 <em> </em> * su - oracle -c /backup/scripts/expdpfull_db01.sh</p><pre><code>* --报错的处理：```shellORA-39181: Only partial table data may be exported due to fine grain access control on &quot;OE&quot;.&quot;PURCHASEORDER&quot;select count(*) from &quot;OE&quot;.&quot;PURCHASEORDER&quot;grant EXEMPT ACCESS POLICY to system;expdp system/oracle directory=itpuxbak_dir dumpfile=test-b.dmp logfile=test-b.log tables=OE.PURCHASEORDER</code></pre><h2 id="5-expdp-impdp生产环境数据迁移流程"><a href="#5-expdp-impdp生产环境数据迁移流程" class="headerlink" title="5.expdp/impdp生产环境数据迁移流程"></a>5.expdp/impdp生产环境数据迁移流程</h2><ul><li><p>5.1、做数据迁移流程的目的</p><blockquote><p>使用expdp/impdp进行数据迁移的前置条件、操作步骤，降低对对应用造成的影响及避免故障</p></blockquote></li><li><p>5.2、数据迁移的适用范围</p><blockquote><p>所有线上库&gt;10.2</p></blockquote></li><li><p>5.3、 数据迁移的风险评估</p><blockquote><p>01.有些os对文件大小有限制，expdp数据时需要使用filesize参数来分割导出文件<br>02.expdp导出数据时没有正确估计dmp文件所需空间，导致主机磁盘满。<br>03.跨字符集的数据迁移，由于字符集不兼容导致数据迁移失败。<br>04.导入表空间不存在或者空间不足，导致表创建失败或者数据导入失败，导致其他应用报错</p></blockquote></li><li><p>5.4、数据迁移的准备工作</p><blockquote><p>01.检查源数据库和目标库的版本、字符集，如果目标库版本低于源库，使用目标库的软件做导出。如果字符集不一致，不建议使用expdp/impdp迁移数据。<br>02.user_segments里查出导出表所占的空间大小，检查os对文件大小的限制。<br>03.表比较多的情况下，建议用parfile。各个参数在parfile里写好。<br>04.提前准备备份脚本（parfile参数）：<br><code>`</code>shell<br>cat expdp_itpux.par<br>userid=system/oracle<br>directory=itpuxbak_dir<br>dumpfile=expdp_full_db01.$BAKDATE.%U.dmp<br>logfile=expdp_full_db01.$BAKDATE.log<br>tables=user.tab1,user.tab2,user.tab3<br>parallel=4</p></blockquote></li></ul><p>vi expdp.sh</p><p>export BAKDATE=<code>date +%Y%m%d</code><br>expdp parfile=expdp_itpux.par<br>nohup ./expdp.sh &amp;</p><pre><code>* 5.5、数据迁移的执行过程* 5.6、数据迁移后的验证方案&gt;对比expdp、impdp的日志，确认导出导入数据量是否一致。并在数据库上检查数据量。编译无效对象## 6.expdp/impdp生产环境数据迁移案例&gt;迁移过程详细请看视频演示，此处只做参考### 6.1 迁移目的&gt;将linux系统oracle服务器上schema（itpux01,itpux02）全部通过ExpDP全库迁移到另一台oracle服务器，并能正常查询到相关数据。&gt;IMPDP虽然加上parallel参数，在做table数据导入时确实速度提高了不少，但是在create index和statistics时，依旧采用单线程的方式，故此一般在迁移过程中这两步操作选择生产DDL脚本增加parallel参数后手工执行，以最大化缩减迁移时间。### 6.2 迁移流程```sql1.linux系统oracle服务器上创建测试数据。2.linux本地用Expdp做导出;3.远程主机创建相关对象；4.远程主机用expdp做导入(导入);5.验证远程本地数据合法性;</code></pre><h3 id="6-3-演示过程"><a href="#6-3-演示过程" class="headerlink" title="6.3 演示过程"></a>6.3 演示过程</h3><ul><li>01.准备数据<br><code>`</code>sql<br>/<em> Formatted on 2018/1/30 21:28:32 (QP5 v5.313) </em>/<br>CREATE TABLESPACE itpux11<br>  DATAFILE ‘/oracle/oradata/db01/itpux01.dbf’<pre><code>           SIZE 100 M           AUTOEXTEND OFF</code></pre>  EXTENT MANAGEMENT LOCAL AUTOALLOCATE<br>  SEGMENT SPACE MANAGEMENT AUTO;<br>CREATE TABLESPACE itpux12<br>  DATAFILE ‘/oracle/oradata/db01/itpux02.dbf’<pre><code>           SIZE 100 M           AUTOEXTEND OFF</code></pre>  EXTENT MANAGEMENT LOCAL AUTOALLOCATE<br>  SEGMENT SPACE MANAGEMENT AUTO;<br>–创建用户并授权<br>CREATE USER itpux01 IDENTIFIED BY itpux01<br>  DEFAULT TABLESPACE itpux01;<br>CREATE USER itpux02 IDENTIFIED BY itpux02<br>  DEFAULT TABLESPACE itpux02;<br>GRANT DBA TO itpux01;<br>GRANT DBA TO itpux02;</li></ul><p>ALTER USER itpux01<br>    QUOTA UNLIMITED ON itpux01;</p><p>ALTER USER itpux02<br>    QUOTA UNLIMITED ON itpux02;</p><p>–用户登录并创建测试表<br>CONN itpux01 / itpux01</p><p>CREATE TABLE itpux01<br>(<br>    id    NUMBER (30) PRIMARY KEY NOT NULL,<br>    name DATE<br>);</p><p>CONN itpux02 / itpux02</p><p>CREATE TABLE itpux02<br>(<br>    id    NUMBER (30) PRIMARY KEY NOT NULL,<br>    name DATE<br>);</p><p>–要建两个索引</p><p>CREATE INDEX itpux02<br>    ON itpux02_table_test (id);</p><p>–创建2个存储过程并执行。<br>CONN itpux01 / itpux01</p><p>CREATE OR REPLACE PROCEDURE p_itpux01<br>IS<br>BEGIN<br>    EXECUTE IMMEDIATE ‘select count(*) from itpux01’;</p><pre><code>FOR i IN 1 .. 1000LOOP    INSERT INTO itpux01 (id, name)         VALUES (i, SYSDATE);    COMMIT;END LOOP;EXECUTE IMMEDIATE &#39;select count(*) from itpux01&#39;;</code></pre><p>END p_itpux01;<br>/</p><p>BEGIN<br>    p_itpux01;<br>END;<br>/</p><p>SELECT COUNT (*) FROM itpux01;</p><p>SELECT *<br>  FROM itpux01<br> WHERE id &gt; 990;</p><p>CONN itpux02 / itpux02</p><p>CREATE OR REPLACE PROCEDURE p_itpux02<br>IS<br>BEGIN<br>    EXECUTE IMMEDIATE ‘select count(*) from itpux02’;</p><pre><code>FOR i IN 1 .. 2000LOOP    INSERT INTO itpux02 (id, name)         VALUES (i, SYSDATE);    COMMIT;END LOOP;EXECUTE IMMEDIATE &#39;select count(*) from itpux02&#39;;</code></pre><p>END p_itpux02;<br>/</p><p>BEGIN<br>    p_itpux02;<br>END;<br>/</p><pre><code>* 查询验证数据```sql/* Formatted on 2018/1/30 21:31:51 (QP5 v5.313) */CONN itpux01 / itpux01SELECT COUNT (*) FROM itpux01;SELECT *  FROM itpux01 WHERE id &gt; 990;CONN itpux02 / itpux02SELECT COUNT (*) FROM itpux02;SELECT *  FROM itpux02 WHERE id &gt; 1990;--02.获取DDL--在源主机获取：SPOOL itpux_tbs_create_ddl.sqlSET LONG 200000 PAGESIZE 0 HEAD OFF VERIFY OFF FEEDBACK OFF LINESIZE 200SELECT DBMS_METADATA.get_ddl (&#39;TABLESPACE&#39;, &#39;ITPUX01&#39;) FROM DUAL;SELECT DBMS_METADATA.get_ddl (&#39;TABLESPACE&#39;, &#39;ITPUX02&#39;) FROM DUAL;SPOOL OFF;--在另一台主机执行：CREATE TABLESPACE &quot;ITPUX01&quot;    DATAFILE &#39;/oracle/oradata/db01/itpux01.dbf&#39;                 SIZE 50 M    LOGGING    ONLINE    PERMANENT    BLOCKSIZE 8192    EXTENT MANAGEMENT LOCAL AUTOALLOCATE    DEFAULT    NOCOMPRESS    SEGMENT SPACE MANAGEMENT AUTO;CREATE TABLESPACE &quot;ITPUX02&quot;    DATAFILE &#39;/oracle/oradata/db01/itpux02.dbf&#39;                 SIZE 50 M    LOGGING    ONLINE    PERMANENT    BLOCKSIZE 8192    EXTENT MANAGEMENT LOCAL AUTOALLOCATE    DEFAULT    NOCOMPRESS    SEGMENT SPACE MANAGEMENT AUTO;--03、源库导出建立目录（建立directory）SQL&gt; CREATE OR REPLACE DIRECTORY oradmp AS &#39;/oracle/backup&#39;;SQL&gt; GRANT READ,WRITE ON DIRECTORY oradmp TO SYSTEM;expdp SYSTEM/oracle DIRECTORY=oradmp FULL=y dumpfile=expdpfull_db01_%U.dmp LOGFILE=expdpfull_db01.LOG PARALLEL=2;--04、目标库导入禁止自动维护任务（禁用数据库自动维护任务，oracle11g中存在）SQL&gt; EXECUTE DBMS_AUTO_TASK_ADMIN.DISABLE;建立目录（建立directory）SQL&gt; CREATE OR REPLACE DIRECTORY oradmp AS &#39;/oracle/backup&#39;;SQL&gt; GRANT READ,WRITE ON DIRECTORY oradmp TO SYSTEM;生成index、CONSTRAINT的ddl语句impdp SYSTEM/SYSTEM DIRECTORY=oradmp dumpfile=itpux_01.dmp,itpux_02.dmp LOGFILE=impitpux.LOG PARALLEL=2 SQLFILE=indconddl.SQL INCLUDE=INDEX,CONSTRAINT SCHEMAS=itpux编辑ddl语句脚本sed &#39;s/NOLOGGING/ /g;s/LOGGING/ /g&#39; indconddl.SQL&gt;indconddl.sql.nologinsed &#39;/TABLESPACE/ s/TS_itpux/TS_itpux_INDEX/g;/TABLESPACE/ s/1/32 NOLOGGING/g&#39; indconddl.sql.nologin&gt;indconddl.sql.NEW设置parallel 4;执行导入语句impdp SYSTEM/SYSTEM DIRECTORY=oradmp FULL=y dumpfile=expdpfull_db01_%U.dmp LOGFILE=impdpfull_db01.LOG PARALLEL=2EXCLUDE=INDEX,CONSTRAINT,STATISTICS SCHEMAS=ITPUX;检查job，延后迁移时间内发起的job任务SELECT JOB,       LOG_USER,       SCHEMA_USER,       what,       LAST_DATE,       LAST_SEC,       NEXT_DATE,       NEXT_SEC,       FAILURES,       BROKEN  FROM DBA_JOBS;执行ddl语句脚本，建立索引、约束，手工发起统计分析建立索引、约束chmod +x indconddl.sql.NEW more createindcon.shSQLPLUS -s /nolog &lt;&lt;EOSCONNECT itpux / itpuxSPOOL /tmp/indconcreate.log@ /oracle/backup/indconddl.sql.new;SPOOL OFFEXITEOS执行createindcon.sh然后再改parallel 4;为NOPARALLEL--05、收集统计信息stats.SQL:BEGIN    DBMS_STATS.gather_database_stats;END;/nohup sqlplus &quot;/as sysdba&quot; @ stats.SQL &amp;--06、无效对象的编译自动生成编译无效对象SQL及编译过程1) 统计当前用户无效对象数量:  SELECT OWNER,         object_type,         status,         COUNT (*)    FROM dba_objects   WHERE status &lt;&gt; &#39;VALID&#39;GROUP BY OWNER, object_type, statusORDER BY OWNER, object_type;2) 生成编译无效对象SQLSELECT    &#39;ALTER &#39;       || OBJECT_TYPE       || &#39; &#39;       || OWNER       || &#39;.&#39;       || OBJECT_NAME       || &#39; COMPILE;&#39;  FROM dba_objects WHERE     status &lt;&gt; &#39;VALID&#39;       AND object_type IN (&#39;PACKAGE&#39;,                           &#39;PACKAGE BODY&#39;,                           &#39;FUNCTION&#39;,                           &#39;PROCEDURE&#39;,                           &#39;TRIGGER&#39;,                           &#39;VIEW&#39;);通过复制以上SQL语句,直接手动执行编译执行.也可以采用如下方式在oracle用户下进行手工编译# su - oracle$ sqlplus / as sysdbaSQL&gt; @$ORACLE_HOME/rdbms/ADMIN/utlrp.SQL--07、验证数据对比expdp、impdp的日志，确认导出导入数据量是否一致。并在数据库上检查数据量。比如上面的数据迁移，检查数据量跟日志显示是否一致。SELECT COUNT (*) FROM itpux.itpux01;SQL&gt;SELECT OWNER,OBJECT_TYPE,COUNT(*) FROM dba_objects WHERE wner=&#39;&amp;owner&#39; GROUP BY OWNER,OBJECT_TYPE ORDER BY OBJECT_TYPE;跨schema或者数据库迁移数据时，除检查日志外，还需要检查源和目标的对象数据量、是否有失效对象。检查对象状态SQL&gt;SELECT OWNER,OBJECT_NAME,SUBOBJECT_NAME,STATUS,OBJECT_TYPE FROM dba_objects WHERE wner=&#39;&amp;owner&#39; ORDER BY OBJECT_TYPE, OBJECT_NAME, SUBOBJECT_NAME;  SELECT object_type s_object_type, COUNT (*)    FROM dba_objects   WHERE owner = &#39;ITPUX01&#39;GROUP BY object_type;  SELECT object_type t_object_type, COUNT (*)    FROM dba_objects   WHERE owner = &#39;ITPUX01&#39;GROUP BY object_type;SELECT *  FROM dba_objects WHERE status &lt;&gt; &#39;VALID&#39; AND owner = &#39;ITPUX01&#39;;--08、收尾启用数据库自动维护任务SQL&gt; EXECUTE DBMS_AUTO_TASK_ADMIN.ENABLE;检查并更正job运行时间SELECT JOB,       LOG_USER,       SCHEMA_USER,       what,       LAST_DATE,       LAST_SEC,       NEXT_DATE,       NEXT_SEC,       FAILURES,       BROKEN  FROM DBA_JOBS;--09、对外应用测试</code></pre><h2 id="7-expdp-impdp迁移过程字符集的处理"><a href="#7-expdp-impdp迁移过程字符集的处理" class="headerlink" title="7.expdp/impdp迁移过程字符集的处理"></a>7.expdp/impdp迁移过程字符集的处理</h2><blockquote><p>进行数据的导入导出时，我们要注意关于字符集的问题。在EXPDP/IMPDP过程中我们需要注意四个字符集的参数：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">01</span><span class="token punctuation">.</span>导出端的客户端字符集。<span class="token number">02</span><span class="token punctuation">.</span>导出端数据库字符集。<span class="token number">03</span><span class="token punctuation">.</span>导入端的客户端字符集。<span class="token number">05</span><span class="token punctuation">.</span>导入端数据库字符集。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看数据库的字符集的信息<pre class="line-numbers language-sql"><code class="language-sql">SQL<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> nls_database_parameters<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//SQL> select * from props$;</span>NLS_LANGUAGE AMERICANNLS_TERRITORY AMERICANLS_CURRENCY $NLS_ISO_CURRENCY AMERICANLS_NUMERIC_CHARACTERS <span class="token punctuation">.</span><span class="token punctuation">,</span>NLS_CHARACTERSET ZHS16GBKNLS_CALENDAR GREGORIANNLS_DATE_FORMAT DD<span class="token operator">-</span>MON<span class="token operator">-</span>RRNLS_DATE_LANGUAGE AMERICANNLS_SORT <span class="token keyword">BINARY</span>NLS_TIME_FORMAT HH<span class="token punctuation">.</span>MI<span class="token punctuation">.</span>SSXFF AMNLS_TIMESTAMP_FORMAT DD<span class="token operator">-</span>MON<span class="token operator">-</span>RR HH<span class="token punctuation">.</span>MI<span class="token punctuation">.</span>SSXFF AMNLS_TIME_TZ_FORMAT HH<span class="token punctuation">.</span>MI<span class="token punctuation">.</span>SSXFF AM TZRNLS_TIMESTAMP_TZ_FORMAT DD<span class="token operator">-</span>MON<span class="token operator">-</span>RR HH<span class="token punctuation">.</span>MI<span class="token punctuation">.</span>SSXFF AM TZRNLS_DUAL_CURRENCY $NLS_COMP <span class="token keyword">BINARY</span>NLS_LENGTH_SEMANTICS BYTENLS_NCHAR_CONV_EXCP <span class="token boolean">FALSE</span>NLS_NCHAR_CHARACTERSET AL16UTF16NLS_RDBMS_VERSION <span class="token number">11.2</span><span class="token punctuation">.</span><span class="token number">0.3</span><span class="token punctuation">.</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><ul><li>我们再来查看客户端的字符集信息<pre class="line-numbers language-shell"><code class="language-shell">客户端字符集的参数NLS_LANG=_< territory >.language：指定oracle消息使用的语言，日期中日和月的显示。Territory：指定货币和数字的格式，地区和计算星期及日期的习惯。Characterset：控制客户端应用程序使用的字符集。通常设置或等于客户端的代码页。ZHS16GBK、UTF8。如数据库语言环境os是windows,使用命令set NLS_LANG=AMERICAN_AMERICA.ZHS16GBKos是linux or unix,使用命令export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK在unix中：$ env|grep NLS_LANGNLS_LANG=AMERICAN_AMERICA.ZHS16GBK当前修改可用：$ export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK永久修改可用：vi bash_profile通常在导出时最好把客户端字符集设置得和数据库端相同。当进行数据导入时，主要有以下两种情况：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>(1) 源数据库和目标数据库具有相同的字符集设置。<br>这时，只需设置导出和导入端的客户端NLS_LANG等于数据库字符集即可。<br>(2) 源数据库和目标数据库字符集不同。<br>先将导出端客户端的NLS_LANG设置成和导出端的数据库字符集一致，导出数据，然后将导入端客户端的NLS_LANG设置成和导出端一致，导入数据，这样转换只发生在数据库端，而且只发生一次。<br>这种情况下，只有当导入端数据库字符集为导出端数据库字符集的严格超集时，数据才能完全导成功，否则，可能会有数据不一致或乱码出现。</p></blockquote></li></ul><h2 id="8-expdp与impdp-版本兼容性与各版本的区别"><a href="#8-expdp与impdp-版本兼容性与各版本的区别" class="headerlink" title="8.expdp与impdp 版本兼容性与各版本的区别"></a>8.expdp与impdp 版本兼容性与各版本的区别</h2><p>参考资料：<br><a href="http://www.itpux.com/thread-288-1-1.html" target="_blank" rel="noopener">http://www.itpux.com/thread-288-1-1.html</a></p><h2 id="9-如何停止expdp与impdp备份任务的后台进程"><a href="#9-如何停止expdp与impdp备份任务的后台进程" class="headerlink" title="9.如何停止expdp与impdp备份任务的后台进程"></a>9.如何停止expdp与impdp备份任务的后台进程</h2><p>参考资料：<br><a href="http://www.itpux.com/thread-286-1-1.html" target="_blank" rel="noopener">http://www.itpux.com/thread-286-1-1.html</a></p><h2 id="10-如何清理不需要的数据泵job"><a href="#10-如何清理不需要的数据泵job" class="headerlink" title="10.如何清理不需要的数据泵job"></a>10.如何清理不需要的数据泵job</h2><p>参考资料：<br><a href="http://www.itpux.com/thread-287-1-1.html" target="_blank" rel="noopener">http://www.itpux.com/thread-287-1-1.html</a></p><h2 id="11-如何对expdp-impdp进行trace跟踪分析问题"><a href="#11-如何对expdp-impdp进行trace跟踪分析问题" class="headerlink" title="11.如何对expdp/impdp进行trace跟踪分析问题"></a>11.如何对expdp/impdp进行trace跟踪分析问题</h2><h3 id="11-1-使用Trace-480300"><a href="#11-1-使用Trace-480300" class="headerlink" title="11.1 使用Trace 480300"></a>11.1 使用Trace 480300</h3><blockquote><p>&emsp;&emsp;Data Pump工作原理有两个特点：作业调度，多进程配合协作。对Data Pump的诊断本质上就是对各种Process行为的跟踪。Oracle提供了一个Trace的隐含参数，来帮助我们实现这个目标。<br>&emsp;&emsp;Trace并不像其他跟踪过程相同，使用y/n的参数，开启或者关闭。Data Pump的Trace参数是一个7位十六进制组成的数字串。不同的数字串表示不同的跟踪对象方法。7位十六进制数字分为两个部分，前三个数字表示特定的数据泵组件，后四位使用0300就可以。</p></blockquote><ul><li>各个组件分别使用不同的三位十六进制数字代表。如下片段所示<br><code>`</code>shell<br>– Summary of Data Pump trace levels:<br>– ==================================<br>Trace DM DW ORA Lines<br>level trc trc trc in<br>(hex) file file file trace Purpose</li></ul><hr><p>10300 x x x SHDW: To trace the Shadow process (API) (expdp/impdp)<br>20300 x x x KUPV: To trace Fixed table<br>40300 x x x ‘div’ To trace Process services<br>80300 x KUPM: To trace Master Control Process (MCP) (DM)<br>100300 x x KUPF: To trace File Manager<br>200300 x x x KUPC: To trace Queue services<br>400300 x KUPW: To trace Worker process(es) (DW)<br>800300 x KUPD: To trace Data Package<br>1000300 x META. To trace Metadata Package<br>— +<br>1FF0300 x x x ‘all’ To trace all components (full tracing)</p><pre><code>&gt;如果需要同时跟踪多个组件，需要将目标组件的hex值进行累加，后面四位的300相同。&gt;400300+80300=480300&gt;&amp;emsp;&amp;emsp;对于跟踪的Trace取值，Oracle建议使用480300就可以应对大部分的情况。480300会跟踪Oracle Dump作业的Master Control Process（MCP）和Work Process。作为初始化跟踪的过程，480300基本就够用了。&gt;我们先从数据导出Expdp看Trace，导出一个案例。首先清理一下Trace File目录```sqlexpdp \&quot;/ as sysdba\&quot; directory=dumpdir schemas=itpux dumpfile=itpux_dump.dmp parallel=2 trace=480300</code></pre><blockquote><p>&emsp;&emsp;然后检查trc目录，Dm和dw标注的就是MCP和Work Process生成的Trace文件。同时Parallel设置使得dw有00和01两个。<br>2个trace 文件在BACKGROUND_DUMP_DEST目录下：</p><pre class="line-numbers language-sql"><code class="language-sql">Master Process trace <span class="token keyword">file</span>: <span class="token operator">&lt;</span>SID<span class="token operator">></span>_dm<span class="token operator">&lt;</span>number<span class="token operator">></span>_<span class="token operator">&lt;</span>process_id<span class="token operator">></span><span class="token punctuation">.</span>trcWorker Process trace <span class="token keyword">file</span>: <span class="token operator">&lt;</span>SID<span class="token operator">></span>_dw<span class="token operator">&lt;</span>number<span class="token operator">></span>_<span class="token operator">&lt;</span>process_id<span class="token operator">></span><span class="token punctuation">.</span>trc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在导出过程中，我们可以看到两个worker的会话信息。<br><code>`</code>sql<br>SQL&gt; select * from dba_datapump_sessions;<br>OWNER_NAME JOB_NAME INST_ID SADDR SESSION_TYPE</p></blockquote><hr><p>SYS SYS_EXPORT_SCHEMA_01 1 35EB0580 DBMS_DATAPUMP<br>SYS SYS_EXPORT_SCHEMA_01 1 35E95280 MASTER<br>SYS SYS_EXPORT_SCHEMA_01 1 35E8A480 WORKER<br>SYS SYS_EXPORT_SCHEMA_01 1 35E84D80 WORKER</p><pre><code>&gt;&amp;emsp;&amp;emsp;此时我们可以从Trace文件中，看到一些Data Pump工作的细节信息。例如：在MCP的Trace文件中，我们看到一系列调用动作过程，如下片段：--初始化导出动作，整理文件系统；-日志写入在Worker Process中，如下片段看出在导出数据。### 11.2 使用Trace 480301&gt;&amp;emsp;&amp;emsp;在Trace过程中，我们也可以如10046跟踪过程一样，添加SQL跟踪。Data Pump本质上工作还是一系列的SQL语句，很多时候的性能问题根源都是从SQL着手的。&gt;切换到SQL跟踪模式也比较简单，一般是在Trace数值后面添加1。```sqlimpdp \&quot;/ as sysdba\&quot; directory=dumpdir dumpfile=itpux_dump.dmp remap_schema=itpux:test trace=480301 parallel=2</code></pre><blockquote><p>&emsp;&emsp;在Trace过程中，我们也可以如10046跟踪过程一样，添加SQL跟踪。Data Pump本质上工作还是一系列的SQL语句，很多时候的性能问题根源都是从SQL着手的。<br>切换到SQL跟踪模式也比较简单，一般是在Trace数值后面添加1。我们使用导入过程进行实验。<br>&emsp;&emsp;目录生成的Trace文件，都是10046格式的Raw文件。截取片段如下：<br>10046 生成的trace 文件可读性并不好，所有我们可以使用tkprof工具进行格式化，方便阅读。</p><pre class="line-numbers language-sql"><code class="language-sql">$ tkprof itpux_dm00_17292<span class="token punctuation">.</span>trc tkprof_itpux_dm00_17292<span class="token punctuation">.</span><span class="token keyword">out</span> waits<span class="token operator">=</span>y sort<span class="token operator">=</span>exeela$ tkprof itpux_dw01_17294<span class="token punctuation">.</span>trc tkprof_itpux__dw01_17294<span class="token punctuation">.</span><span class="token keyword">out</span> waits<span class="token operator">=</span>y sort<span class="token operator">=</span>exeela<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="11-3-使用10046事件"><a href="#11-3-使用10046事件" class="headerlink" title="11.3.使用10046事件"></a>11.3.使用10046事件</h3><ul><li>10046 事件有如下级别<pre class="line-numbers language-shell"><code class="language-shell">event 10046, level 1 = enable standardSQL_TRACE functionalityevent 10046, level 4 = as level 1, plus trace the BIND valuesevent 10046, level 8 = as level 1, plus trace the WAITsevent 10046, level 12 = as level 1, plus trace the BIND values and the WAITs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>不同级别的使用情况如下<pre class="line-numbers language-shell"><code class="language-shell">level 1: lowest level tracing - not alwayssufficient to determine cause of errors;level 4: useful when an error in DataPump's worker or master process occurs;level 12: useful when there is an issuewith Data Pump performance.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>注意：<blockquote><p>&emsp;&emsp; 当我们设置10046的级别高于8或者12的时候，需要将TIMED_STATISTICS设置为TRUE. 临时的将这个参数设置为true，可以将trace数据性能的影响降到最低，在11gR2里，该参数默认为true。<br>一般只有遇到性能问题时，才会使用8或者12的level。</p></blockquote></li></ul><h3 id="11-4-日常使用"><a href="#11-4-日常使用" class="headerlink" title="11.4 日常使用"></a>11.4 日常使用</h3><ul><li>01、对当前正在运行的进程进行trace<br><code>`</code>sql</li></ul><p>–查看数据泵进程的信息：<br>SET LINES 150 PAGES 100 NUMWIDTH 7<br>COL username FOR a10<br>COL spid FOR a7<br>COL program FOR a25</p><p>SELECT TO_CHAR (SYSDATE, ‘YYYY-MM-DDHH24:MI:SS’) “DATE”,<br>       s.program,<br>       s.sid,<br>       s.status,<br>       s.username,<br>       d.job_name,<br>       p.spid,<br>       s.serial#,<br>       p.pid<br>  FROM v$session s, v$process p, dba_datapump_sessions d<br> WHERE p.addr = s.paddr<br> ands.saddr=d.saddr;</p><pre><code>&gt;使用sys.dbms_system.set_ev设置10046&gt;在上节的查询结果里：Data Pump Master process (DM00)的SID 是58，serial#是85.Data Pump Worker process (DW01)的SID 是23，serial#是311.&gt;使用10046 跟踪活动session的语法如下```sqlSyntax: DBMS_SYSTEM.SET_EV([SID],[SERIAL#],[EVENT],[LEVEL],&#39;&#39;)--在level 4跟踪Worker process进程(Bind values)：execute sys.dbms_system.set_ev(23,311,10046,4,&#39;&#39;);-- stop tracing:execute sys.dbms_system.set_ev(23,311,10046,0,&#39;&#39;);--在level 8 跟踪Master进程（Waits）：execute sys.dbms_system.set_ev(143,50,10046,8,&#39;&#39;);-- stop tracing:execute sys.dbms_system.set_ev(143,50,10046,0,&#39;&#39;);</code></pre><ul><li>02、使用oradebug<blockquote><p>可以在oradebug中设置SPID，来进行trace<br><code>`</code>sql<br>–在level 4跟踪Worker process进程(Bind values)：<br>oradebug setospid 8173<br>oradebug unlimit<br>oradebug event 10046 trace name context forever, level 4<br>oradebug tracefile_name</p></blockquote></li></ul><p>–在level 8 跟踪Master进程（Waits）：<br>oradebug setospid 8171<br>oradebug unlimit<br>oradebug event 10046 trace name context forever, level 8<br>oradebug tracefile_name</p><p>–stop tracing:<br>oradebug event 10046 trace name context off ITPUX</p><pre><code>* 03、使用tkprof 分析trace文件&gt;10046 生成的trace 文件可读性并不好，所有我们可以使用tkprof工具进行格式化，方便阅读。```sql$ tkprof itpux_dm00_17292.trc tkprof_itpux_dm00_17292.out waits=y sort=exeela$ tkprof itpux_dw01_17294.trc tkprof_itpux_dw01_17294.out waits=y sort=exeela</code></pre><h2 id="12-expdp-impdp使用总结"><a href="#12-expdp-impdp使用总结" class="headerlink" title="12.expdp/impdp使用总结"></a>12.expdp/impdp使用总结</h2><ul><li>1.expdp/impdp 默认就是使用直接路径的，所以速度比较快，但是expdp/impdp 是服务端程序，影响它速度的只有磁盘io。</li><li>2.导出多表时，expdp/impdp用法是tables=’table1’,’table2’,’table3’。</li><li>3.dumpfile 参数 ，可以用%u 指定多个数据文件<pre class="line-numbers language-sql"><code class="language-sql">expdp xxx<span class="token operator">/</span>xxx schemas<span class="token operator">=</span>xxx directory<span class="token operator">=</span>dump1 <span class="token keyword">dumpfile</span><span class="token operator">=</span>xxx_<span class="token operator">%</span>u<span class="token punctuation">.</span>dmp filesize<span class="token operator">=</span>50g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这样每个文件50g ，xxx_01.dump,xxx_02.dump 这样。</p></blockquote></li><li>4.如果要把用户usera的对象导到用户userb，操作如下：<pre class="line-numbers language-shell"><code class="language-shell">impdp system/passwd directory=expdp dumpfile=expdp.dmp remap_schema='usera':'userb' logfile=/oracle/exp.log;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>5.如果导入需要更换表空间，impdp用remap_tablespace=’tabspace_old’:’tablespace_new’</p></li><li><p>6.关于数据导出时要导出哪些内容</p><blockquote><p>expdp content（all:对象＋导出数据行，data_only：只导出对象，metadata_only：只导出数据的记录）</p></blockquote></li><li>7、数据泵expdp/impdp 影响速度和性能最大的就是paralle。 所以使用数据泵，要想提高速度，就要设置并行参数。如：<blockquote><p>&emsp;&emsp; expdp full=y directory=dump dumpfile=test_%u.dmp parallel=4<br>那么expdp将为parallel 创建4个文件： test_01.dmp，test_02.dmp，test_03.dmp，test_04.dmp。 每个进程一个文件。 这样的话，每个文件的大小会因进程而不同。 可以某个文件很大，某个文件却很小。 要解决这个问题，就是设置filesize 参数。 来指定每个文件的最大值。 这样当一个文件达到最大值的之后，就会创建一个新的文件。</p></blockquote></li></ul><blockquote><p>&emsp;&emsp;如：expdp full=y directory=dump dumpfile=test_%u.dmp parallel=4 filesize=50m<br>导出的dump文件和paralle有关系，那么导入也有关系。 paralle要小于dump文件数。 如果paralle 大于dump文件的个数，就会因为超过的那个进程获取不到文件，就不能对性能提高。一般parall 参数值等于cpu 的个数。而且要小于dump文件的个数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 备份容灾 </tag>
            
            <tag> Expdp </tag>
            
            <tag> Impdp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么用Gin去构建一个RESTful API Golang Service【翻译】</title>
      <link href="/golang/zen-me-yong-gin-qu-gou-jian-yi-ge-restful-api-golang-service/"/>
      <url>/golang/zen-me-yong-gin-qu-gou-jian-yi-ge-restful-api-golang-service/</url>
      
        <content type="html"><![CDATA[<h1 id="怎么用Gin去构建一个RESTful-API-Golang-Service【翻译】"><a href="#怎么用Gin去构建一个RESTful-API-Golang-Service【翻译】" class="headerlink" title="怎么用Gin去构建一个RESTful API Golang Service【翻译】"></a>怎么用Gin去构建一个RESTful API Golang Service【翻译】</h1><p>##前言</p><p><a href="&quot;Cover&quot;"><img src="http://oss.anonycurse.cn/article/images/20181105/531wGkj4qxe98UALsFO6vy9kRhdLLqVQZY0jnNhE.png" alt="Cover" title="Cover"></a></p><p>Today I’m going to build a simple API for todo application with the golang programming language. I’m going to use golang simplest/fastest framework gin-gonic and a beautiful ORM gorm for our database work. To install these packages go to your workspace $GOPATH/src and run these command below:</p><pre class="line-numbers language-go"><code class="language-go">$ <span class="token keyword">go</span> get gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin<span class="token punctuation">.</span>v1$ <span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>jinzhu<span class="token operator">/</span>gorm$ <span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="In-generic-crud-application-we-need-the-API’s-as-follows"><a href="#In-generic-crud-application-we-need-the-API’s-as-follows" class="headerlink" title="In generic crud application we need the API’s as follows:"></a>In generic crud application we need the API’s as follows:</h2><ul><li>POST todos/</li><li>GET todos/</li><li>GET todos/{id}</li><li>PUT todos/{id}</li><li>DELETE todos/{id}</li></ul><p>Let’s start coding, go to your $GOPATH/src and make a directory todo. Inside the todo directory create a file main.go. Import the “gin framework” to our project and create the routes like below inside main function. I like to add a prefix of the apis like “api/v1/”, that’s why we’ll use the router Group method</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>       <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>v1 <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/api/v1/todos"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> createTodo<span class="token punctuation">)</span>  v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> fetchAllTodo<span class="token punctuation">)</span>  v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/:id"</span><span class="token punctuation">,</span> fetchSingleTodo<span class="token punctuation">)</span>  v1<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/:id"</span><span class="token punctuation">,</span> updateTodo<span class="token punctuation">)</span>  v1<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/:id"</span><span class="token punctuation">,</span> deleteTodo<span class="token punctuation">)</span> <span class="token punctuation">}</span> router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We have created five routes and they handle some functions like <code>createTodo</code>, <code>fetchAllTodo</code> etc. We’ll discuss about them soon.</p><p>Now we need to setup a database connection. To use database pull the gorm package and mysql dialects in our code. Follow the code below:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>       <span class="token string">"github.com/gin-gonic/gin"</span>       <span class="token string">"github.com/jinzhu/gorm"</span>       <span class="token boolean">_</span> <span class="token string">"github.com/jinzhu/gorm/dialects/mysql"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//open a db connection</span> <span class="token keyword">var</span> err <span class="token builtin">error</span> db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"root:12345@/demo?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"failed to connect database"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Migrate the schema</span> db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todoModel<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above code “mysql” is our database driver, “root” is database username, “12345” password and “demo” is database name. Please change these information as your needs.</p><p>We’ll use the Database function to get the database connection. Lets make a todoModel and transformedTodo struct. The first struct will represent the original Todo and the second one will hold the transformed todo for response to the api. Here we transformed the todo response because we don’t expose some database fields (updated_at, created_at) to the consumer.</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// todoModel describes a todoModel type</span> todoModel <span class="token keyword">struct</span> <span class="token punctuation">{</span>  gorm<span class="token punctuation">.</span>Model  Title     <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>  Completed <span class="token builtin">int</span>    <span class="token string">`json:"completed"`</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// transformedTodo represents a formatted todo</span> transformedTodo <span class="token keyword">struct</span> <span class="token punctuation">{</span>  ID        <span class="token builtin">uint</span>   <span class="token string">`json:"id"`</span>  Title     <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>  Completed <span class="token builtin">bool</span>   <span class="token string">`json:"completed"`</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Todo struct has one field extra gorm.Model what does it mean? well, this field will embed a Model struct for us which contains four fields “ID, CreatedAt, UpdatedAt, DeletedAt”</p><p>Gorm has migration facilities, we already used it in init function. When we run the application first it’ll create a connection and then the migration.</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//Migrate the schema</span> db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todoModel<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://oss.anonycurse.cn/article/images/20181105/bhwTdjLFSN57B6kkl8CE8NVaZ7zeXGsYHhh7D0c0.png" alt="Migrate " title="Migrate "></p><p>Can you remember the five routes we wrote a minute earlier? Lets implement the five methods one by one.</p><p>When a user send a POST request to the path ‘api/v1/todos/’ with ‘title and completed’ field it’ll be handled by this route v1.POST(“/”, createTodo)</p><p>Lets Implement the createTodo function</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// createTodo add a new todo</span><span class="token keyword">func</span> <span class="token function">createTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> completed<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> todo <span class="token operator">:=</span> todoModel<span class="token punctuation">{</span>Title<span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Completed<span class="token punctuation">:</span> completed<span class="token punctuation">}</span> db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Todo item created successfully!"</span><span class="token punctuation">,</span> <span class="token string">"resourceId"</span><span class="token punctuation">:</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the above code we use gin Context to receive the posted data and gorm database connection to save the todo. After saving the resource we send the resource id with a good &amp; meaningful response to the user.</p><p>Lets implement the rest of the functions</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// fetchAllTodo fetch all todos</span><span class="token keyword">func</span> <span class="token function">fetchAllTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> todos <span class="token punctuation">[</span><span class="token punctuation">]</span>todoModel <span class="token keyword">var</span> _todos <span class="token punctuation">[</span><span class="token punctuation">]</span>transformedTododb<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todos<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//transforms the todos for building a good response</span> <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> todos <span class="token punctuation">{</span>  completed <span class="token operator">:=</span> <span class="token boolean">false</span>  <span class="token keyword">if</span> item<span class="token punctuation">.</span>Completed <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>   completed <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   completed <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  _todos <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>_todos<span class="token punctuation">,</span> transformedTodo<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> item<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> Title<span class="token punctuation">:</span> item<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> Completed<span class="token punctuation">:</span> completed<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> _todos<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// fetchSingleTodo fetch a single todo</span><span class="token keyword">func</span> <span class="token function">fetchSingleTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> todo todoModel todoID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">,</span> todoID<span class="token punctuation">)</span><span class="token keyword">if</span> todo<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">}</span>completed <span class="token operator">:=</span> <span class="token boolean">false</span> <span class="token keyword">if</span> todo<span class="token punctuation">.</span>Completed <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>  completed <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  completed <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>_todo <span class="token operator">:=</span> transformedTodo<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> Title<span class="token punctuation">:</span> todo<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> Completed<span class="token punctuation">:</span> completed<span class="token punctuation">}</span> c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> _todo<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// updateTodo update a todo</span><span class="token keyword">func</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> todo todoModel todoID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">,</span> todoID<span class="token punctuation">)</span><span class="token keyword">if</span> todo<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">}</span>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> completed<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">,</span> completed<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Todo updated successfully!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// deleteTodo remove a todo</span><span class="token keyword">func</span> <span class="token function">deleteTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> todo todoModel todoID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">,</span> todoID<span class="token punctuation">)</span><span class="token keyword">if</span> todo<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">}</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Todo deleted successfully!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the fetchAllTodo function we fetched all the todos and and build a transformed response with id, title, completed . We removed the CreatedAt, UpdatedAt, DeletedAt fields and cast the integer value to bool.</p><p>Well, we write enough code, let try to build the app and test it, I’m going test it using chrome extension Postman (you can use any REST client like curl to test).</p><p>To build the app open your terminal and go the the project directory</p><pre class="line-numbers language-go"><code class="language-go">$ <span class="token keyword">go</span> build main<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The command will build a binary file main and to run the file us this command $ ./main . Wow, our simple todo app is running on port: 8080. It’ll display the debug log, because by default gin run’s in debug mode and port 8080.</p><p>To test the api run postman and test the api sequentially</p><p><img src="http://oss.anonycurse.cn/article/images/20181105/wVld5PMtLBFEsVXjcE6pY9FhQSM5MuQB6hAJCtWe.png" alt="Create a todo" title="Create a todo"></p><p><img src="http://oss.anonycurse.cn/article/images/20181105/KVYw3KtSm1CqkS1R9jaTdxBXwue69Rv68F0eD4gL.png" alt="Fetch all todos" title="Fetch all todos"></p><p><img src="http://oss.anonycurse.cn/article/images/20181105/Iye2ekzbzEPkO8ScOwqnV0tLSun07itdPsXannpm.png" alt="Fetch a single todo" title="Fetch a single todo"></p><p><img src="http://oss.anonycurse.cn/article/images/20181105/Y5VFuzWRyiocmO6JERjrZw5hvn9B7OBiQbAi4U0S.png" alt="Update a todo" title="Update a todo"></p><p><img src="http://oss.anonycurse.cn/article/images/20181105/8b3CN4i3tfZbtsOvFglwi3DLtpHCPlmwfHuuBsWb.png" alt="Delete a todo" title="Delete a todo"></p><h2 id="Need-full-source-code"><a href="#Need-full-source-code" class="headerlink" title="Need full source code?"></a>Need full source code?</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"net/http"</span>    <span class="token string">"strconv"</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"github.com/jinzhu/gorm"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jinzhu/gorm/dialects/mysql"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//open a db connection</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    db<span class="token punctuation">,</span> err <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"root:12345@/demo?charset=utf8&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"failed to connect database"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Migrate the schema</span>    db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todoModel<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v1 <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/api/v1/todos"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v1<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> createTodo<span class="token punctuation">)</span>        v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> fetchAllTodo<span class="token punctuation">)</span>        v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/:id"</span><span class="token punctuation">,</span> fetchSingleTodo<span class="token punctuation">)</span>        v1<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/:id"</span><span class="token punctuation">,</span> updateTodo<span class="token punctuation">)</span>        v1<span class="token punctuation">.</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/:id"</span><span class="token punctuation">,</span> deleteTodo<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// todoModel describes a todoModel type</span>    todoModel <span class="token keyword">struct</span> <span class="token punctuation">{</span>        gorm<span class="token punctuation">.</span>Model        Title     <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>        Completed <span class="token builtin">int</span>    <span class="token string">`json:"completed"`</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// transformedTodo represents a formatted todo</span>    transformedTodo <span class="token keyword">struct</span> <span class="token punctuation">{</span>        ID        <span class="token builtin">uint</span>   <span class="token string">`json:"id"`</span>        Title     <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>        Completed <span class="token builtin">bool</span>   <span class="token string">`json:"completed"`</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// createTodo add a new todo</span><span class="token keyword">func</span> <span class="token function">createTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    completed<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    todo <span class="token operator">:=</span> todoModel<span class="token punctuation">{</span>Title<span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Completed<span class="token punctuation">:</span> completed<span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Todo item created successfully!"</span><span class="token punctuation">,</span> <span class="token string">"resourceId"</span><span class="token punctuation">:</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// fetchAllTodo fetch all todos</span><span class="token keyword">func</span> <span class="token function">fetchAllTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> todos <span class="token punctuation">[</span><span class="token punctuation">]</span>todoModel    <span class="token keyword">var</span> _todos <span class="token punctuation">[</span><span class="token punctuation">]</span>transformedTodo    db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todos<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//transforms the todos for building a good response</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> todos <span class="token punctuation">{</span>        completed <span class="token operator">:=</span> <span class="token boolean">false</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>Completed <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            completed <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            completed <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        _todos <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>_todos<span class="token punctuation">,</span> transformedTodo<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> item<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> Title<span class="token punctuation">:</span> item<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> Completed<span class="token punctuation">:</span> completed<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> _todos<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// fetchSingleTodo fetch a single todo</span><span class="token keyword">func</span> <span class="token function">fetchSingleTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> todo todoModel    todoID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">,</span> todoID<span class="token punctuation">)</span>    <span class="token keyword">if</span> todo<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    completed <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">if</span> todo<span class="token punctuation">.</span>Completed <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        completed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        completed <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    _todo <span class="token operator">:=</span> transformedTodo<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> todo<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> Title<span class="token punctuation">:</span> todo<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> Completed<span class="token punctuation">:</span> completed<span class="token punctuation">}</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">:</span> _todo<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// updateTodo update a todo</span><span class="token keyword">func</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> todo todoModel    todoID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">,</span> todoID<span class="token punctuation">)</span>    <span class="token keyword">if</span> todo<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    completed<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">,</span> completed<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Todo updated successfully!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// deleteTodo remove a todo</span><span class="token keyword">func</span> <span class="token function">deleteTodo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> todo todoModel    todoID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">,</span> todoID<span class="token punctuation">)</span>    <span class="token keyword">if</span> todo<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"No todo found!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>todo<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Todo deleted successfully!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Note: When you are using code production you must take care of the steps below:</p></blockquote><ul><li>Do not fetch all the data select * from todos , use pagination</li><li>Do not trust user input. You must validate the inputs, there are severals tools to validate input. Read the article for validation process</li><li>Check every possible error</li><li>You should use logging and authentication as your need</li><li>I am really sorry for my BAD English and Writing flow. If you notice any mistake in the article please feel free to write a comment.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel简单的分组统计</title>
      <link href="/laravel/laravel-jian-dan-fen-zu-tong-ji/"/>
      <url>/laravel/laravel-jian-dan-fen-zu-tong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>最近在开发博客的时候需要对分类进行一个简单的数量统计，以此片文章来记录学习过程</p></blockquote><p><img src="http://oss.anonycurse.cn/article/images/20180926/YdmZ31Y85Y9WKqz7mhe8SLIh8hVxrDecB4hRPVzj.png" alt="博客分类"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>laravel 的DB 支持各种查询，最开始不怎么会，最后各种百度还是搞定了</p></blockquote><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><p><img src="http://oss.anonycurse.cn/article/images/20180926/l8LWYNe2oPrQb6HNUPDbuK971OM8jKApPDEDUfZm.png" alt="文章表"><br><img src="http://oss.anonycurse.cn/article/images/20180926/RxBuEJN65Yy63SijYlkgoez0wrZUjyf8gsbBobO1.png" alt="分类表"></p><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$article_groups</span> <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'article_group'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'article_group.name as name'</span><span class="token punctuation">,</span>        <span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string">'count(`blog_article`.`id`) as count'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">'article'</span><span class="token punctuation">,</span><span class="token string">'article_group.id'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">'article.g_id'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">'article_group.id'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$article_groups</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h3><p><img src="http://oss.anonycurse.cn/article/images/20180926/qb06QCqFjjYOiBwOyjhWNDFSoroU71UyPVNcAOTi.png" alt="查询结果"></p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>     blog_article_group<span class="token punctuation">.</span>id <span class="token keyword">as</span> id<span class="token punctuation">,</span>    blog_article_group<span class="token punctuation">.</span>name <span class="token keyword">as</span> name<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span>blog_article<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> count<span class="token keyword">FROM</span> blog_article_group<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> blog_article <span class="token keyword">ON</span> blog_article_group<span class="token punctuation">.</span>id <span class="token operator">=</span> blog_article<span class="token punctuation">.</span>g_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> blog_article_group<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结讨论"><a href="#总结讨论" class="headerlink" title="总结讨论"></a>总结讨论</h2><p>每种语言都会遇到类似的情况，在学习Golang的时候也会遇到类似的情况</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p><a href="https://laravel-china.org/articles/4692/laravel-a-sql-how-to-count-multiple-fields-laravel-a-sql-query-the-number-of-each-category" target="_blank" rel="noopener">Laravel 一条 SQL 如何 count 多个字段，Laravel 一条 sql 查询每个分类的数量</a></p>]]></content>
      
      
      <categories>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Goldengate数据库复制与容灾实施</title>
      <link href="/oracle/oracle-goldengate-fu-zhi-yu-rong-zai-shi-shi-shou-ce/"/>
      <url>/oracle/oracle-goldengate-fu-zhi-yu-rong-zai-shi-shi-shou-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="OracleGoldengate数据库复制与容灾实施"><a href="#OracleGoldengate数据库复制与容灾实施" class="headerlink" title="OracleGoldengate数据库复制与容灾实施"></a>OracleGoldengate数据库复制与容灾实施</h1><p><a href="https://docs.oracle.com/cd/E11882_01/index.htm" target="_blank" rel="noopener">Oracle 11G R2 官方文档</a></p><h2 id="1-GoldenGate-文件系统-文件系统"><a href="#1-GoldenGate-文件系统-文件系统" class="headerlink" title="1.GoldenGate 文件系统-文件系统"></a>1.GoldenGate 文件系统-文件系统</h2><h3 id="1-1-安装OGG软件-源端-目标端"><a href="#1-1-安装OGG软件-源端-目标端" class="headerlink" title="1.1 安装OGG软件(源端-目标端)"></a>1.1 安装OGG软件(源端-目标端)</h3><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-创建OGG用户-源端-目标端"><a href="#1-2-创建OGG用户-源端-目标端" class="headerlink" title="1.2 创建OGG用户(源端-目标端)"></a>1.2 创建OGG用户(源端-目标端)</h3><ul><li>源端</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span> ogg_tbs    DATAFILE <span class="token string">'/u01/oradata/orcl/ogg_tbs.dbf'</span>        SIZE <span class="token number">100</span> M        AUTOEXTEND <span class="token keyword">ON</span> <span class="token keyword">NEXT</span> <span class="token number">10</span> M MAXSIZE <span class="token number">500</span> M    LOGGING    EXTENT MANAGEMENT <span class="token keyword">LOCAL</span>    SEGMENT SPACE MANAGEMENT AUTO<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> goldengate IDENTIFIED <span class="token keyword">BY</span> goldengate <span class="token keyword">DEFAULT</span> <span class="token keyword">TABLESPACE</span> ogg_tbs <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLESPACE</span> <span class="token keyword">temp</span> QUOTA UNLIMITED <span class="token keyword">ON</span> users<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CONNECT</span><span class="token punctuation">,</span>RESOURCE <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">SESSION</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALTER</span> <span class="token keyword">SESSION</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALTER</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">INSERT</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span><span class="token keyword">LOCK</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ANY</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ANY</span> DICTIONARY <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> FLASHBACK <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> UNLIMITED <span class="token keyword">TABLESPACE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">on</span> DBMS_FLASHBACK <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">on</span> DBMS_GOLDENGATE_AUTH <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> DBA <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">EXEC</span> dbms_goldengate_auth<span class="token punctuation">.</span>grant_admin_privilege<span class="token punctuation">(</span><span class="token string">'GOLDENGATE'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目标端</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span> ogg_tbs        DATAFILE <span class="token string">'/u01/oradata/itpux/ogg_tbs.dbf'</span>        SIZE <span class="token number">100</span> M    AUTOEXTEND <span class="token keyword">ON</span> <span class="token keyword">NEXT</span> <span class="token number">10</span> M MAXSIZE <span class="token number">500</span> M    LOGGING    EXTENT MANAGEMENT <span class="token keyword">LOCAL</span>    SEGMENT SPACE MANAGEMENT AUTO<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> goldengate IDENTIFIED <span class="token keyword">BY</span> goldengate <span class="token keyword">DEFAULT</span> <span class="token keyword">TABLESPACE</span> ogg_tbs <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLESPACE</span> <span class="token keyword">temp</span> QUOTA UNLIMITED <span class="token keyword">ON</span> users<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CONNECT</span><span class="token punctuation">,</span>RESOURCE <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">SESSION</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALTER</span> <span class="token keyword">SESSION</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALTER</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">INSERT</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span><span class="token keyword">LOCK</span> <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ANY</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ANY</span> DICTIONARY <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> FLASHBACK <span class="token keyword">ANY</span> <span class="token keyword">TABLE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> UNLIMITED <span class="token keyword">TABLESPACE</span> <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">on</span> DBMS_FLASHBACK <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">on</span> DBMS_GOLDENGATE_AUTH <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">GRANT</span> DBA <span class="token keyword">TO</span> GOLDENGATE<span class="token punctuation">;</span><span class="token keyword">EXEC</span> dbms_goldengate_auth<span class="token punctuation">.</span>grant_admin_privilege<span class="token punctuation">(</span><span class="token string">'GOLDENGATE'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-创建测试用户-源端-目标端"><a href="#1-3-创建测试用户-源端-目标端" class="headerlink" title="1.3 创建测试用户(源端-目标端)"></a>1.3 创建测试用户(源端-目标端)</h3><ul><li>源端</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>  <span class="token keyword">TABLESPACE</span> <span class="token string">"KYLE"</span>    DATAFILE <span class="token string">'/u01/app/oracle/oradata/orcl/kyle01.dbf'</span>        SIZE <span class="token number">100</span> M        AUTOEXTEND <span class="token keyword">ON</span> <span class="token keyword">NEXT</span> <span class="token number">10</span> M MAXSIZE <span class="token number">500</span> M    LOGGING    EXTENT MANAGEMENT <span class="token keyword">LOCAL</span>    SEGMENT SPACE MANAGEMENT AUTO<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">"KYLE"</span>    PROFILE <span class="token string">"DEFAULT"</span>     IDENTIFIED <span class="token keyword">BY</span> <span class="token string">"kyle"</span>     <span class="token keyword">DEFAULT</span> <span class="token keyword">TABLESPACE</span> <span class="token string">"KYLE"</span>     <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLESPACE</span> <span class="token string">"TEMP"</span>     ACCOUNT UNLOCK<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--测试数据</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> user_tables<span class="token punctuation">;</span><span class="token keyword">CREATE</span> SEQUENCE seq_kyle <span class="token keyword">START</span> <span class="token keyword">WITH</span> <span class="token number">1</span> INCREMENT <span class="token keyword">BY</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> kyle01 <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> rand <span class="token keyword">INT</span> <span class="token punctuation">,</span> name VARCHAR2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> kyle02 <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> rand <span class="token keyword">INT</span> <span class="token punctuation">,</span> name VARCHAR2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> kyle03 <span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span> rand <span class="token keyword">INT</span> <span class="token punctuation">,</span> name VARCHAR2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> kyle01 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Kyle01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> kyle01 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Kyle02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> kyle01 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Kyle03'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> kyle01 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Kyle04'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">DECLARE</span>  rnd number<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>   <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">20000</span> loop     <span class="token keyword">IF</span> MOD<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span>         <span class="token keyword">commit</span><span class="token punctuation">;</span>     <span class="token keyword">ELSE</span>         <span class="token keyword">insert</span> <span class="token keyword">into</span> kyle03 <span class="token keyword">values</span><span class="token punctuation">(</span>seq_kyle<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span>i<span class="token operator">*</span>dbms_random<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span><span class="token string">'Kyle Is Testing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>   <span class="token keyword">END</span> LOOP<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">BEGIN</span>   LOOP    <span class="token keyword">delete</span> <span class="token keyword">from</span> kyle03 <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">commit</span><span class="token punctuation">;</span>     <span class="token keyword">insert</span> <span class="token keyword">into</span> kyle03 <span class="token keyword">values</span><span class="token punctuation">(</span>seq_kyle<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span><span class="token number">200000</span><span class="token operator">*</span>dbms_random<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span><span class="token string">'MACLEAN IS UPDATING'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">commit</span><span class="token punctuation">;</span>     <span class="token keyword">insert</span> <span class="token keyword">into</span> kyle03 <span class="token keyword">values</span><span class="token punctuation">(</span>seq_kyle<span class="token punctuation">.</span>nextval<span class="token punctuation">,</span><span class="token number">300000</span><span class="token operator">*</span>dbms_random<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span><span class="token string">'MACLEAN IS UPDATING'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">commit</span><span class="token punctuation">;</span>    <span class="token keyword">update</span> kyle03 <span class="token keyword">set</span> rand<span class="token operator">=</span>rand<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">commit</span><span class="token punctuation">;</span>     dbms_lock<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">END</span> loop<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目标端</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>  <span class="token keyword">TABLESPACE</span> <span class="token string">"KYLE"</span>    DATAFILE <span class="token string">'/u01/oradata/itpux/kyle01.dbf'</span>        SIZE <span class="token number">100</span> M        AUTOEXTEND <span class="token keyword">ON</span> <span class="token keyword">NEXT</span> <span class="token number">10</span> M MAXSIZE <span class="token number">500</span> M    LOGGING    EXTENT MANAGEMENT <span class="token keyword">LOCAL</span>    SEGMENT SPACE MANAGEMENT AUTO<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">"KYLE"</span>    PROFILE <span class="token string">"DEFAULT"</span>     IDENTIFIED <span class="token keyword">BY</span> <span class="token string">"kyle"</span>     <span class="token keyword">DEFAULT</span> <span class="token keyword">TABLESPACE</span> <span class="token string">"KYLE"</span>     <span class="token keyword">TEMPORARY</span> <span class="token keyword">TABLESPACE</span> <span class="token string">"TEMP"</span>     ACCOUNT UNLOCK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-数据导入导出"><a href="#1-4-数据导入导出" class="headerlink" title="1.4 数据导入导出"></a>1.4 数据导入导出</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> directory bakdir <span class="token keyword">as</span> <span class="token string">'/home/oracle'</span><span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">read</span><span class="token punctuation">,</span><span class="token keyword">write</span> <span class="token keyword">on</span> directory bakdir <span class="token keyword">to</span> system<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">any</span> directory <span class="token keyword">to</span> system<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--导出结构</span><span class="token keyword">CREATE</span> DIRECTORY BAKDIR <span class="token keyword">AS</span> <span class="token string">'/home/oracle'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">READ</span><span class="token punctuation">,</span><span class="token keyword">WRITE</span> <span class="token keyword">ON</span> DIRECTORY BAKDIR <span class="token keyword">TO</span> SYSTEM<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">ANY</span> DIRECTORY <span class="token keyword">TO</span> SYSTEM<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--导出某个或多个schema</span>expdp system<span class="token operator">/</span>jia  DIRECTORY<span class="token operator">=</span>bakdir <span class="token keyword">DUMPFILE</span><span class="token operator">=</span>expdp_schema_kyle<span class="token punctuation">.</span>dmp LOGFILE<span class="token operator">=</span>expdp_schema_kyle<span class="token punctuation">.</span>log SCHEMAS<span class="token operator">=</span>kyleimpdp system<span class="token operator">/</span>jia  DIRECTORY<span class="token operator">=</span>bakdir <span class="token keyword">DUMPFILE</span><span class="token operator">=</span>expdp_schema_kyle<span class="token punctuation">.</span>dmp LOGFILE<span class="token operator">=</span>expdp_schema_kyle<span class="token punctuation">.</span>log TABLE_EXISTS_ACTION<span class="token operator">=</span><span class="token keyword">truncate</span> SCHEMAS<span class="token operator">=</span>kylescp <span class="token operator">/</span>home<span class="token operator">/</span>oracle<span class="token operator">/</span>expdp_schema_kyle<span class="token punctuation">.</span>dmp orcl<span class="token number">-122</span>:<span class="token operator">/</span>home<span class="token operator">/</span>oracle<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-配置环境变量"><a href="#1-5-配置环境变量" class="headerlink" title="1.5 配置环境变量"></a>1.5 配置环境变量</h3><pre class="line-numbers language-sql"><code class="language-sql">alias sqlplus<span class="token operator">=</span><span class="token string">"rlwrap sqlplus"</span>alias ggsci<span class="token operator">=</span><span class="token string">"rlwrap ggsci"</span>alias rman<span class="token operator">=</span><span class="token string">"rlwrap rman"</span>alias asmcmd<span class="token operator">=</span><span class="token string">"rlwrap asmcmd"</span>LD_LIBRARY_PATH<span class="token operator">=</span>$ORACLE_HOME<span class="token operator">/</span>lib:<span class="token operator">/</span>lib:<span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token punctuation">;</span> export LD_LIBRARY_PATHCLASSPATH<span class="token operator">=</span><span class="token operator">/</span>ggs:$ORACLE_HOME<span class="token operator">/</span>JRE:$ORACLE_HOME<span class="token operator">/</span>jlib:$ORACLE_HOME<span class="token operator">/</span>rdbms<span class="token operator">/</span>jlib<span class="token punctuation">;</span> export CLASSPATHOGG_PATH<span class="token operator">=</span><span class="token operator">/</span>u01<span class="token operator">/</span>ggs export OGG_PATHPATH<span class="token operator">=</span><span class="token punctuation">.</span>:$PATH:$OGG_PATH:$HOME<span class="token operator">/</span>bin:$ORACLE_BASE<span class="token operator">/</span>product<span class="token operator">/</span><span class="token number">11.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>db_1<span class="token operator">/</span>bin:$ORACLE_HOME<span class="token operator">/</span>bin<span class="token punctuation">;</span> export PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-修改系统参数开启归档"><a href="#1-6-修改系统参数开启归档" class="headerlink" title="1.6 修改系统参数开启归档"></a>1.6 修改系统参数开启归档</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">SET</span> ENABLE_GOLDENGATE_REPLICATION <span class="token operator">=</span> <span class="token boolean">TRUE</span> SCOPE<span class="token operator">=</span>BOTH<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">add</span> supplemental log <span class="token keyword">data</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">force</span> logging<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-7-配置OGG-源端"><a href="#1-7-配置OGG-源端" class="headerlink" title="1.7 配置OGG(源端)"></a>1.7 配置OGG(源端)</h3><ul><li>1.创建目录</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> subdirs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>2.配置MGR</li></ul><pre class="line-numbers language-sql"><code class="language-sql">GGSCI<span class="token operator">></span>EDIT PARAMS mgrPORT <span class="token number">7809</span>AUTOSTART ER <span class="token operator">*</span> AUTORESTART ER <span class="token operator">*</span><span class="token punctuation">,</span> RETRIES <span class="token number">3</span><span class="token punctuation">,</span> WAITMINUTES <span class="token number">3</span><span class="token punctuation">,</span> RESETMINUTES <span class="token number">15</span>PURGEOLDEXTRACTS <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token comment" spellcheck="true">/*, USECHECKPOINTS, MINKEEPDAYS 2*/</span><span class="token comment" spellcheck="true">--端口 7809</span><span class="token comment" spellcheck="true">--自动启动 ER(EXTARCT REPLACT)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.配置检查点</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--GLOBALS储存了运行的一些信息</span>GGSCI<span class="token operator">></span> EDIT PARAMS <span class="token punctuation">.</span><span class="token operator">/</span>GLOBALSCHECKPOINTTABLE goldengate<span class="token punctuation">.</span><span class="token keyword">checkpoint</span>GGSCI<span class="token operator">></span> dblogin userid goldengate<span class="token punctuation">,</span>password goldengateGGSCI<span class="token operator">></span> <span class="token keyword">ADD</span> CHECKPOINTTABLE goldengate<span class="token punctuation">.</span><span class="token keyword">checkpoint</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>4.添加补充日志</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--ADD TRANDATA itpux.*</span><span class="token keyword">ADD</span> SCHEMATRANDATA kyle<span class="token comment" spellcheck="true">--配置ddl 的时候，一定要用ADD SCHEMATRANDATA</span><span class="token comment" spellcheck="true">--如果不用ddl,可以用ADD TRANDATA</span>info SCHEMATRANDATA kyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>5.配置extract进程</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--建立EXTRACT目录</span>mkdir <span class="token operator">-</span>p <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>rkylemkdir <span class="token operator">-</span>p <span class="token punctuation">.</span><span class="token operator">/</span>dirrpt<span class="token operator">/</span>rkylemkdir <span class="token operator">-</span>p <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>ekylemkdir <span class="token operator">-</span>p <span class="token punctuation">.</span><span class="token operator">/</span>dirrpt<span class="token operator">/</span>ekyleGGSCI<span class="token operator">></span>EDIT PARAMS ekylesetenv<span class="token punctuation">(</span>NLS_LANG<span class="token operator">=</span><span class="token string">"AMERICAN_AMERICA.ZHS16GBK"</span><span class="token punctuation">)</span>setenv<span class="token punctuation">(</span>ORACLE_SID<span class="token operator">=</span><span class="token string">"itpux"</span><span class="token punctuation">)</span>EXTRACT ekyleDDL INCLUDE <span class="token keyword">ALL</span>DDLOPTIONS ADDTRANDATA<span class="token punctuation">,</span>REPORTUSERID goldengate<span class="token punctuation">,</span> PASSWORD goldengateEXTTRAIL <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>ekyle<span class="token operator">/</span>exTRANLOGOPTIONS excludeuser goldengateTRANLOGOPTIONS convertucs2clobsWARNLONGTRANS 12h<span class="token punctuation">,</span>CHECKINTERVAL 30mDISCARDFILE <span class="token punctuation">.</span><span class="token operator">/</span>dirrpt<span class="token operator">/</span>ekyle<span class="token operator">/</span>ekyle<span class="token punctuation">.</span>dsc<span class="token punctuation">,</span> APPEND<span class="token punctuation">,</span> MEGABYTES <span class="token number">200</span><span class="token keyword">TABLE</span> kyle<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--设置语言</span><span class="token comment" spellcheck="true">--设置SID</span><span class="token comment" spellcheck="true">--设置EXTRACT名称不能操作过8个字符</span><span class="token comment" spellcheck="true">--抽取所有的DDL操作</span><span class="token comment" spellcheck="true">--</span><span class="token comment" spellcheck="true">--定义OGG使用用户</span><span class="token comment" spellcheck="true">--设置抽取目录</span><span class="token comment" spellcheck="true">--排除用于管理抽取的OGG用户</span><span class="token comment" spellcheck="true">--某某参数，可以传输大字段</span><span class="token comment" spellcheck="true">--设置告警阈值</span><span class="token comment" spellcheck="true">--配置文件存放位置</span><span class="token comment" spellcheck="true">--抽取的表</span><span class="token comment" spellcheck="true">--添加一个抽取进程</span><span class="token comment" spellcheck="true">--THREADS 2表示源端有2个RAC节点</span><span class="token keyword">ADD</span> EXTRACT ekyle<span class="token punctuation">,</span> TRANLOG<span class="token punctuation">,</span> <span class="token keyword">BEGIN</span> NOW<span class="token keyword">ADD</span> EXTRACT ekyle<span class="token punctuation">,</span> TRANLOG<span class="token punctuation">,</span> <span class="token keyword">BEGIN</span> NOW<span class="token punctuation">,</span> THREADS <span class="token number">2</span><span class="token comment" spellcheck="true">--添加一个队列文件</span>GGSCI<span class="token operator">></span><span class="token keyword">ADD</span> EXTTRAIL <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>ekyle<span class="token operator">/</span>ex<span class="token punctuation">,</span> EXTRACT ekyle<span class="token punctuation">,</span> MEGABYTES <span class="token number">200</span><span class="token comment" spellcheck="true">--启动停止测试</span>GGSCI<span class="token operator">></span><span class="token keyword">START</span> ekyleSTOP ekyle<span class="token keyword">VIEW</span> REPORT ekyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>6.配置PUMP进程</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">cd</span> <span class="token operator">/</span>u01<span class="token operator">/</span>ggsmkdir <span class="token operator">-</span>p <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>ekylemkdir <span class="token operator">-</span>p <span class="token punctuation">.</span><span class="token operator">/</span>dirrpt<span class="token operator">/</span>ekyleGGSCI<span class="token operator">></span>EDIT PARAMS pkylesetenv<span class="token punctuation">(</span>NLS_LANG<span class="token operator">=</span><span class="token string">"AMERICAN_AMERICA.ZHS16GBK"</span><span class="token punctuation">)</span>setenv<span class="token punctuation">(</span>ORACLE_SID<span class="token operator">=</span><span class="token string">"orcl"</span><span class="token punctuation">)</span>EXTRACT pkyleUSERID goldengate<span class="token punctuation">,</span>PASSWORD goldengatePASSTHRU                        RMTHOST <span class="token number">172.17</span><span class="token punctuation">.</span><span class="token number">0.122</span><span class="token punctuation">,</span>MGRPORT <span class="token number">7809</span>RMTTRAIL <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>rkyle<span class="token operator">/</span>reDISCARDFILE <span class="token punctuation">.</span><span class="token operator">/</span>dirrpt<span class="token operator">/</span>rkyle<span class="token operator">/</span>rkyle<span class="token punctuation">.</span>dsc<span class="token punctuation">,</span> APPEND<span class="token punctuation">,</span> MEGABYTES <span class="token number">200</span><span class="token keyword">TABLE</span> ekyle<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--</span><span class="token comment" spellcheck="true">--</span><span class="token comment" spellcheck="true">--</span><span class="token comment" spellcheck="true">-- 禁止extract与数据库交互，适合于PUMP传输进程</span><span class="token comment" spellcheck="true">-- 远端的IP,端口</span><span class="token comment" spellcheck="true">-- 指定写入到远程目标端的哪个队列</span><span class="token comment" spellcheck="true">-- 指定报错输出文件</span><span class="token comment" spellcheck="true">-- 指定传输表</span><span class="token comment" spellcheck="true">--增加pump 进程(指定本地trail 文件)</span>GGSCI<span class="token operator">></span><span class="token keyword">ADD</span> EXTRACT pkyle<span class="token punctuation">,</span>EXTTRAILSOURCE <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>ekyle<span class="token operator">/</span>ex<span class="token comment" spellcheck="true">--增加rmttail 文件</span>GGSCI<span class="token operator">></span><span class="token keyword">ADD</span> RMTTRAIL <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>rkyle<span class="token operator">/</span>re<span class="token punctuation">,</span> EXTRACT pkyle<span class="token punctuation">,</span> MEGABYTES <span class="token number">200</span><span class="token comment" spellcheck="true">--检查:</span>GGSCI<span class="token operator">></span>INFO  pkyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-配置OGG-目标端"><a href="#1-8-配置OGG-目标端" class="headerlink" title="1.8 配置OGG(目标端)"></a>1.8 配置OGG(目标端)</h3><ul><li>1.配置mgr</li></ul><pre class="line-numbers language-sql"><code class="language-sql">GGSCI<span class="token operator">></span> EDIT PARAMS MGRPORT <span class="token number">7809</span>AUTOSTART ER <span class="token operator">*</span> AUTORESTART ER <span class="token operator">*</span><span class="token punctuation">,</span> RETRIES <span class="token number">3</span><span class="token punctuation">,</span> WAITMINUTES <span class="token number">3</span><span class="token punctuation">,</span> RESETMINUTES <span class="token number">15</span>PURGEOLDEXTRACTS <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token comment" spellcheck="true">/*, USECHECKPOINTS, MINKEEPDAYS 2*/</span>GGSCI<span class="token operator">></span><span class="token keyword">START</span> MGRSTOP MGR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.配置检查点</li></ul><pre class="line-numbers language-sql"><code class="language-sql">GGSCI<span class="token operator">></span> EDIT PARAMS <span class="token punctuation">.</span><span class="token operator">/</span>GLOBALSCHECKPOINTTABLE goldengate<span class="token punctuation">.</span><span class="token keyword">checkpoint</span>GGSCI<span class="token operator">></span> dblogin userid goldengate<span class="token punctuation">,</span>password goldengateGGSCI<span class="token operator">></span> <span class="token keyword">ADD</span> CHECKPOINTTABLE goldengate<span class="token punctuation">.</span><span class="token keyword">checkpoint</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.配置replicat进程<br><code>`</code>sql<br>cd /u01/ggs<br>mkdir -p ./dirdat/rkyle<br>mkdir -p ./dirrpt/rkyle</li></ul><p>ggsci&gt; edit params rkyle</p><p>setenv(NLS_LANG=”AMERICAN_AMERICA.ZHS16GBK”)<br>setenv(ORACLE_SID=”itpux”)<br>REPLICAT rkyle<br>USERID goldengate,PASSWORD goldengate<br>handlecollisions<br>assumetargetdefs<br>DISCARDFILE ./dirrpt/rkyle/rkyle.dsc, APPEND, MEGABYTES 200<br>MAP kyle.<em>, target kyle.</em>;</p><p>–添加replicat 进程<br>GGSCI&gt;<br>ADD REPLICAT rkyle EXTTRAIL ./dirdat/rkyle/re, CHECKPOINTTABLE goldengate.checkpoint<br>–启动相关进程(目标)<br>GGSCI&gt;<br>START rkyle<br>VIEW REPORT rkyle<br>INFO ALL<br>–启动相关进程(源端)<br>GGSCI&gt;<br>START rkyle<br>START pkyle<br>VIEW REPORT rkyle<br>VIEW REPORT pkyle<br>INFO ALL</p><pre><code>### 1.9 disable 目标库所有的trigger、cascading delete、check、job```sqlSET PAGESIZE 2000SET LINESIZE 100--Foreign key Constraints/Cascading DeletesSELECT    &#39;alter table &#39;       || owner       || &#39;.&#39;       || table_name       || &#39; DISABLE CONSTRAINT &#39;       || constraint_name       || &#39;;&#39;  FROM dba_constraints WHERE     constraint_type = &#39;R&#39;       AND delete_rule = &#39;CASCADE&#39;       AND owner IN (&#39;KYLE&#39;,                     &#39;KYLE01&#39;);--查找生成并disable 约束(Check)：SELECT    &#39;alter table &#39;       || owner       || &#39;.&#39;       || table_name       || &#39; DISABLE CONSTRAINT &#39;       || constraint_name       || &#39;;&#39;  FROM dba_constraints WHERE     constraint_type = &#39;C&#39;       AND owner IN (&#39;KYLE&#39;,                     &#39;KYLE01&#39;);--查找生成并disable trigger：SELECT &#39;alter trigger &#39; || owner || &#39;.&#39; || object_name || &#39; disable;&#39;  FROM dba_objects WHERE     object_type = &#39;TRIGGER&#39;       AND owner IN (&#39;KYLE&#39;,                     &#39;KYLE01&#39;);--查找并disable jobSELECT job,       next_date,       next_sec,       failures,       broken  FROM dba_jobs WHERE SCHEMA_USER IN (&#39;KYLE&#39;,                       &#39;KYLE01&#39;);BEGIN    sys.DBMS_JOB.broken (job =&gt; 21, broken =&gt; TRUE);    COMMIT;END;--生成结果如下，然后在目标数据库中执行：alter table ... DISABLE CONSTRAINT SYS_C0017353;alter table ... DISABLE CONSTRAINT SYS_C0017355;……alter trigger ... disable;alter trigger ... disable;alter trigger ... disable;--确认外键已经被禁用SELECT OWNER,       CONSTRAINT_NAME,       CONSTRAINT_TYPE,       STATUS  FROM dba_CONSTRAINTS WHERE     CONSTRAINT_TYPE = &#39;R&#39;       AND status = &#39;ENABLED&#39;       AND owner IN (&#39;KYLE&#39;,                     &#39;KYLE01&#39;);--确认目标端目标表的主键可用:SELECT T1.STATUS,       T1.VALIDATED,       T2.status,       T1.constraint_name,       T1.owner  FROM dba_constraints T1, dba_objects T2 WHERE     T2.OBJECT_NAME = T1.constraint_name       AND T1.OWNER IN (&#39;KYLE&#39;,                        &#39;KYLE01&#39;);--验证job 确实被禁用SELECT job,       LOG_USER,       PRIV_USER,       SCHEMA_USER,       broken  FROM dba_jobs WHERE schema_user IN (&#39;KYLE&#39;,                       &#39;KYLE01&#39;);SELECT OWNER, JOB_NAME, STATE  FROM DBA_SCHEDULER_JOBS WHERE OWNER IN (&#39;KYLE&#39;,                 &#39;KYLE01&#39;);--确认trigger 已经全部关闭SELECT DISTINCT status  FROM dba_triggers WHERE owner IN (&#39;KYLE&#39;,                 &#39;KYLE01&#39;);</code></pre><h2 id="2-添加DDL功能与加密"><a href="#2-添加DDL功能与加密" class="headerlink" title="2,.添加DDL功能与加密"></a>2,.添加DDL功能与加密</h2><h3 id="2-1-添加DDL功能"><a href="#2-1-添加DDL功能" class="headerlink" title="2.1 添加DDL功能"></a>2.1 添加DDL功能</h3><ul><li>1.关闭所有OGG进程</li></ul><pre class="line-numbers language-sql"><code class="language-sql">STOP ekyleSTOP pkyleSTOP rkyle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>2.用户的默认表空间不能自动SYSTEM表空间</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> PAGRSIZE <span class="token number">200</span><span class="token keyword">set</span> LINESIZE <span class="token number">200</span>col USERNAME format A20col DEFAULT_TABLESPACE format A20 <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> default_tablespace <span class="token keyword">FROM</span> dba_users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.关闭回收站并清空回收站</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--11G可以启动回收站，10G必须关闭回收站</span><span class="token keyword">ALTER</span> SYSTEM <span class="token keyword">SET</span> recyclebin <span class="token operator">=</span> <span class="token keyword">off</span> SCOPE <span class="token operator">=</span> SPFILE<span class="token punctuation">;</span><span class="token keyword">PURGE</span> DBA_RECYCLEBIN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>4.指明支持DDL的对象放在那个SCHEMA下载</li></ul><pre class="line-numbers language-sql"><code class="language-sql">ggsci<span class="token operator">></span> edit params <span class="token punctuation">.</span><span class="token operator">/</span>GLOBALSGGSCHEMA goldengate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>5.添加相关权限</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">ON</span> UTL_FILE <span class="token keyword">TO</span> goldengate<span class="token punctuation">;</span><span class="token keyword">GRANT</span> RESTRICTED <span class="token keyword">SESSION</span> <span class="token keyword">TO</span> goldengate<span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> SEQUENCE <span class="token keyword">TO</span> goldengate<span class="token punctuation">;</span><span class="token keyword">GRANT</span> GGS_GGSUSER_ROLE <span class="token keyword">TO</span> goldengate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>6.执行脚本（源目标）</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">cd</span> <span class="token operator">/</span>ggssqlplus <span class="token string">"/as sysdba"</span><span class="token variable">@marker_setup.sql</span><span class="token variable">@ddl_setup.sql</span><span class="token variable">@role_setup.sql</span><span class="token keyword">GRANT</span> GGS_GGSUSER_ROLE <span class="token keyword">TO</span> goldengate<span class="token punctuation">;</span><span class="token variable">@ddl_enable.sql</span><span class="token variable">@$ORACLE_HOME</span><span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmspool<span class="token punctuation">.</span>sql<span class="token variable">@ddl_pin.sql</span> goldengate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>7.修改参数，增加DDL复制参数</li></ul><pre class="line-numbers language-sql"><code class="language-sql">ggsci <span class="token operator">></span>edit params eitpux01<span class="token comment" spellcheck="true">--DDL INCLUDE OBJNAME "ITPUX01.*"</span>DDL INCLUDE <span class="token keyword">ALL</span>DDLOPTIONS ADDTRANDATA<span class="token punctuation">,</span>REPORTggsci <span class="token operator">></span>edit params ritpux01<span class="token comment" spellcheck="true">--DDL INCLUDE OBJNAME "ITPUX01.*"</span>DDL INCLUDE <span class="token keyword">ALL</span>DDLERROR <span class="token keyword">default</span> <span class="token keyword">ignore</span> retryop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>8.启动进程</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">START</span> ekyle<span class="token keyword">START</span> pkyle<span class="token keyword">START</span> ryle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>DDL其他功能</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--开启</span>ddl_enable<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true">--关闭</span>ddl_disable<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true">--清空DDL trace ggs_ddl_trace.log</span>ddl_cleartrace<span class="token punctuation">.</span>sql<span class="token comment" spellcheck="true">--ddl 参数：</span>optype alertobjtype <span class="token string">"table"</span>ojbname <span class="token string">"user.tab*"</span>include mapped object <span class="token string">"*"</span><span class="token punctuation">;</span>exclude mapped object <span class="token string">"itpux.itux*"</span>DDL 环境重配（删除就是<span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span>，<span class="token number">12</span>，去掉参数中的DDL）:<span class="token number">1</span><span class="token punctuation">.</span>停止所有的OGG ex<span class="token operator">/</span>pump<span class="token operator">/</span>rp 进程<span class="token number">2</span><span class="token punctuation">.</span><span class="token variable">@ddl_disable.sql</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token variable">@ddl_remove.sql</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token variable">@marker_remove.sql</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token variable">@marker_setup.sql</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token variable">@ddl_setup.sql</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token variable">@role_setup.sql</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">GRANT</span> GGS_GGSUSER_ROLE <span class="token keyword">TO</span> goldengate<span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token variable">@ddl_enable.sql</span><span class="token number">10</span><span class="token punctuation">.</span><span class="token variable">@$ORACLE_HOME</span><span class="token operator">/</span>rdbms<span class="token operator">/</span>admin<span class="token operator">/</span>dbmspool<span class="token punctuation">.</span>sql<span class="token number">11</span><span class="token punctuation">.</span><span class="token variable">@ddl_pin.sql</span> goldengate<span class="token number">12</span><span class="token punctuation">.</span>运行所有的OGG ex<span class="token operator">/</span>pump<span class="token operator">/</span>rp 进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-加密"><a href="#2-2-加密" class="headerlink" title="2.2 加密"></a>2.2 加密</h3><ul><li>1.生成加密的KEY </li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>oracle<span class="token variable">@orcl</span>:<span class="token operator">/</span>u01<span class="token operator">/</span>ggs<span class="token punctuation">]</span>$keygen <span class="token number">256</span> <span class="token number">1</span>0x1673D6197E05DA1009B1451420A73134BDF868246D6AC878FBFC69193231C355<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>2.将KEY存到本地指定文件</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">[</span>oracle<span class="token variable">@orcl</span>:<span class="token operator">/</span>u01<span class="token operator">/</span>ggs<span class="token punctuation">]</span>$cat ENCKEYS KYLE_KEY 0xE9E07156ACC2411F97E78D117B55C444E935E27A034CBD389CF2F432F8B5F417<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>3.设置登录用的的KEY</li></ul><pre class="line-numbers language-sql"><code class="language-sql">GGSCI <span class="token punctuation">(</span>orcl<span class="token punctuation">)</span> <span class="token number">109</span><span class="token operator">></span> ENCRYPT PASSWORD goldengate AES256 ENCRYPTKEY KYLE_KEYEncrypted password:  AADAAAAAAAAAAAKABIXBCASDGBHCGFNGMHJIFFMDXFGBRCLHTGJGVIECPCGEUAJEXDSEFBUCGATGKGUGBGCCVFKBBENDYBSAPDZBACQCQILIRHYH<span class="token keyword">Algorithm</span> used:  AES256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加KEY到相应文件</li></ul><pre class="line-numbers language-sql"><code class="language-sql">extract eitpux01DDL INCLUDE <span class="token keyword">ALL</span>DDLOPTIONS ADDTRANDATA<span class="token punctuation">,</span>REPORTuserid goldengate<span class="token punctuation">,</span>password AADAAAAAAAAAAAKACAHHWIRDTBQDNBUJYFUCXCGEVBCDHBCEGFOIQFSEGFKCBGLDPGUGAIIHZDJATJSJYBPBSJSJUFSBJCUBYCXBFBPJPDSBVGBJ<span class="token punctuation">,</span>AES256<span class="token punctuation">,</span>ENCRYPTKEY KYLE_KEYexttrail <span class="token punctuation">.</span><span class="token operator">/</span>dirdat<span class="token operator">/</span>eitpux01<span class="token operator">/</span>extranlogoptions excludeuser goldengatetranlogoptions convertucs2clobswarnlongtrans 12h<span class="token punctuation">,</span>checkinterval 30mdiscardfile <span class="token punctuation">.</span><span class="token operator">/</span>dirrpt<span class="token operator">/</span>eitpux01<span class="token operator">/</span>eitpux01<span class="token punctuation">.</span>dsc<span class="token punctuation">,</span>append<span class="token punctuation">,</span>megabytes <span class="token number">200</span><span class="token keyword">TABLE</span> itpux<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--TABLE itpux01.*;</span><span class="token comment" spellcheck="true">--TABLE itpux02.*;</span><span class="token comment" spellcheck="true">--TABLE itpux03.*;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> GoldenGate </tag>
            
            <tag> 备份容灾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Merge Patch</title>
      <link href="/sql/json-merge-patch/"/>
      <url>/sql/json-merge-patch/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON-Merge-Patch"><a href="#JSON-Merge-Patch" class="headerlink" title="JSON Merge Patch"></a>JSON Merge Patch</h1><p><a href="https://tools.ietf.org/html/rfc7396" target="_blank" rel="noopener">TOTAL REFERENCE</a></p><h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><ul><li>ORIGINAL </li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"SHFE.cu1612"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>RESULT</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:31.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PATCH</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:31.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>REFERENCE</li></ul><pre class="line-numbers language-json"><code class="language-json">// ORIGINAL<span class="token punctuation">{</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Goodbye!"</span><span class="token punctuation">,</span> <span class="token property">"author"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"givenName"</span> <span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>   <span class="token property">"familyName"</span> <span class="token operator">:</span> <span class="token string">"Doe"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"tags"</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">"sample"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"This will be unchanged"</span><span class="token punctuation">}</span>// PATCH <span class="token punctuation">{</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Hello!"</span><span class="token punctuation">,</span> <span class="token property">"phoneNumber"</span><span class="token operator">:</span> <span class="token string">"+01-123-456-7890"</span><span class="token punctuation">,</span> <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"familyName"</span><span class="token operator">:</span> <span class="token null">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"example"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>// RESULT<span class="token punctuation">{</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Hello!"</span><span class="token punctuation">,</span> <span class="token property">"author"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token property">"givenName"</span> <span class="token operator">:</span> <span class="token string">"John"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"example"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"This will be unchanged"</span><span class="token punctuation">,</span> <span class="token property">"phoneNumber"</span><span class="token operator">:</span> <span class="token string">"+01-123-456-7890"</span><span class="token punctuation">}</span> ORIGINAL        PATCH            RESULT------------------------------------------<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span>       <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>       <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">}</span>       <span class="token punctuation">{</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"c"</span><span class="token punctuation">}</span>       <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">,</span>                                    <span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"c"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><ul><li>ORIGINAL</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:31.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RESULT</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"SHFE.cu1612"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>PATCH</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"SHFE.cu1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>REFERENCE</li></ul><pre class="line-numbers language-json"><code class="language-json"> ORIGINAL        PATCH            RESULT   ------------------------------------------   <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span>       <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>       <span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>     <span class="token punctuation">{</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"c"</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>   <span class="token punctuation">}</span>   <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">}</span>       <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><ul><li>ORIGINAL</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:31.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RESULT</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.000000"</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">19</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PATCH</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.000000"</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">19</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>REFERENCE</li></ul><pre class="line-numbers language-json"><code class="language-json">ORIGINAL        PATCH            RESULT------------------------------------------<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">}</span>       <span class="token punctuation">{</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"c"</span><span class="token punctuation">}</span>       <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"c"</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>     <span class="token punctuation">{</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"c"</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><ul><li>ORIGINAL</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.000000"</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">19</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RESULT</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:31.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PATCH</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:31.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">12</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token null">null</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>REFERENCE</li></ul><pre class="line-numbers language-json"><code class="language-json"> ORIGINAL        PATCH            RESULT   ------------------------------------------   <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">}</span>       <span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h2><ul><li>ORIGINAL</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.000000"</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">19</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RESULT</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:34.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PATCH</li></ul><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>REFERENCE</li></ul><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Question-6"><a href="#Question-6" class="headerlink" title="Question 6"></a>Question 6</h2><ul><li>ORIGINAL</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:34.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span><span class="token punctuation">,</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>RESULT</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.000000"</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">19</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PATCH</li></ul><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ins_list"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SHFE.cu1612"</span><span class="token punctuation">,</span> <span class="token string">"CZCE.SR701"</span><span class="token punctuation">,</span> <span class="token string">"CFFEX.IF1612"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"quotes"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"CZCE.SR701"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">6580.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:32.500000"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SHFE.cu1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">36440.0</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.000000"</span><span class="token punctuation">,</span>      <span class="token property">"ask"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36450.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token number">19</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">36460.0</span><span class="token punctuation">,</span>          <span class="token property">"volume"</span><span class="token operator">:</span><span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CFFEX.IF1612"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"last_price"</span><span class="token operator">:</span> <span class="token number">3165.2</span><span class="token punctuation">,</span>      <span class="token property">"datetime"</span><span class="token operator">:</span> <span class="token string">"2016-12-30 13:21:33.500000"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>REFERENCE</li></ul><pre class="line-numbers language-json"><code class="language-json"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
