{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1556891842000},{"_id":"themes/hexo-theme-matery/README.md","hash":"7e1c881e66f218cda85e86761a4853ed6b68e33c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"8919b255c5a59f2c894134d2d51cf36c5b619196","modified":1556891842000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"9aa69e814ca4bbef723c2d88843f1289e2ba77a6","modified":1556891842000},{"_id":"source/_data/friends.json","hash":"27895f6c03445bdf145e6aa92e280065cf68736f","modified":1556893103641},{"_id":"source/about/index.md","hash":"a6af6b4554f3b1eb8bd952f734ba135fead32316","modified":1556893051666},{"_id":"source/categories/index.md","hash":"57974cb8107db54818077da09cd4851bfdac9716","modified":1556892969618},{"_id":"source/friends/index.md","hash":"2be114a59665f3f4e39e39e1db1173e98d7b84c4","modified":1556893079218},{"_id":"source/tags/index.md","hash":"6c223043ba32b7c76c33eafceeff9ed879520bfb","modified":1556892990485},{"_id":"themes/hexo-theme-matery/.git/HEAD","hash":"dd8e8826088c2a83b5ebe1e83fa0aa5f0ed56f98","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/config","hash":"1bdf661e9979805f9f935f20a1293814881800be","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/index","hash":"f0ff51f4da92f7168678187ba0b483f6474baaf2","modified":1556893701509},{"_id":"themes/hexo-theme-matery/.git/packed-refs","hash":"e464d6596f1dde198af571aaee7d76ff59c92b35","modified":1556891842000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"db4b71662d408255eebd633fa3ded8d039122df3","modified":1556891842000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2c4d4e72f0fb3431260643dcb85af11655fabe13","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"ee639d0310867976b3e5fb9f92c215a17a433703","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"3148f475a51aea398765b4114906d24f5c9316f2","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"1963cae03c384d75b04a02e23b4c4e9917b15adb","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"89c47cf1eb2cf1feb8a8d06f4eb7c76b713f79c0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"fe1208a55b41529cf6df2991211800a071b4c7fd","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"10f20cf017af6f46c035e5f7080fa4b70a9dd239","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"f29bc13f05f4aa3a3826c1fa7fe9f52b5a06583b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1556891842000},{"_id":"source/_posts/golang/怎么用Gin去构建一个RESTful API Golang Service.md","hash":"d6e263123ea1e14e72c6f12f4420e141457d8b56","modified":1556896042024},{"_id":"source/_posts/laravel/Laravel简单分组统计.md","hash":"594cbcbd947d9daf1e59e72432fc4a726f7db3e0","modified":1556895821463},{"_id":"themes/hexo-theme-matery/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1556891462000},{"_id":"themes/hexo-theme-matery/.git/logs/HEAD","hash":"9ab55ed652d5cdb680408a7b654b280194b180ae","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1556891462000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2d9a44f6fbed4d117bbc403095d9a810cb05303c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7cc83cfe629ce3049382a5e943aa860133efe58d","modified":1556893819427},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"e4c5bf28ddc29519eee8debe79cce45bf279adeb","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"1f337fe1343f87fc958eded799a9ac93fc194e87","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"e253c813b3ee5ed924700a95133741802e58adc5","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"6583c00323d891a03343b6a621a0484a68d74f8a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"b70a2d40677d64d6b56fc51ac1331ad3a50e777c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"20216e7ad6b48d4a4f8d11d6881e667e5186820f","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"5b423384b9c0fe77acc4247a8a85304022e5bd2a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d4114c22126704cc1754d6d28cb00aec020b428b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"4f326331ad93293bf11f7e80e9918b572bd92843","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1e3d523ff4c3234cf311c895767b0d7ce0d63a0d","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"3dff4f6a73973b0b32f40604244255f3c2a5bb78","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"942609b9240d5c8c09b24562fc8fb31eabe1cae4","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"62e10bf4577946190e9c31dcdc2799a4ad1d00dd","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"90527186fc8ed906eb1f20b59bc7f86caab9087b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"684450f0b42f89ab70370c5248b34e55b7adf6fc","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1556891842000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"1ce9cc774997abba3436f8dbed4380c6a1fb8226","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/objects/pack/pack-156347fcf8e7f1c1f4cfe704dabb405d7bdbffaf.idx","hash":"4ea7609287b5640f80ca334f345eca389d25a643","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/refs/heads/develop","hash":"7ac3b1f82e25cc10a182f8f90d679ee273556fb0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/logs/refs/heads/develop","hash":"9ab55ed652d5cdb680408a7b654b280194b180ae","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/refs/remotes/origin/HEAD","hash":"cb587ac979c5a12ea2fad8ca5af781961c1b0668","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/logs/refs/remotes/origin/HEAD","hash":"9ab55ed652d5cdb680408a7b654b280194b180ae","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1556891842000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1556891842000},{"_id":"themes/hexo-theme-matery/.git/objects/pack/pack-156347fcf8e7f1c1f4cfe704dabb405d7bdbffaf.pack","hash":"1dac9b5dbc388e94cb42c9617fc94cfb4e4d1d3c","modified":1556891842000}],"Category":[{"name":"Laravel","_id":"cjv87t09n0006m0cdu9z1wx6l"},{"name":"Golang","_id":"cjv87t09q0008m0cdc32oqs6t"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2019-05-03T14:17:31.666Z","path":"about/index.html","comments":1,"_id":"cjv87t05m0000m0cd6h748r00","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2019-05-03T14:16:09.618Z","path":"categories/index.html","comments":1,"_id":"cjv87t05s0001m0cdhqnfr5jd","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2019-05-03T14:17:59.218Z","path":"friends/index.html","comments":1,"_id":"cjv87t06w0002m0cde7d1px0p","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2019-05-03T14:16:30.485Z","path":"tags/index.html","comments":1,"_id":"cjv87t06x0003m0cdd1wwvvpm","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"Laravel简单的分组统计","date":"2018-09-07T01:25:00.000Z","author":"Kyle Liu","<!-- img":"/source/images/xxx.jpg -->","top":false,"<!-- cover":"false -->","<!-- coverImg":"/images/1.jpg -->","password":"8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92","toc":true,"mathjax":true,"summary":"这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要","_content":"\n\n## 问题描述\n\n> 最近在开发博客的时候需要对分类进行一个简单的数量统计，以此片文章来记录学习过程\n\n![博客分类](http://oss.anonycurse.cn/article/images/20180926/YdmZ31Y85Y9WKqz7mhe8SLIh8hVxrDecB4hRPVzj.png)\n\n## 解决方法\n> laravel 的DB 支持各种查询，最开始不怎么会，最后各种百度还是搞定了\n\n### 数据库表\n![文章表](http://oss.anonycurse.cn/article/images/20180926/l8LWYNe2oPrQb6HNUPDbuK971OM8jKApPDEDUfZm.png)\n![分类表](http://oss.anonycurse.cn/article/images/20180926/RxBuEJN65Yy63SijYlkgoez0wrZUjyf8gsbBobO1.png)\n\n### 查询语句\n```PHP\n$article_groups = DB::table('article_group')\n\t->select([\n\t\t'article_group.name as name',\n\t\tDB::raw('count(`blog_article`.`id`) as count'),\n\n\t])\n\t->leftJoin('article','article_group.id','=','article.g_id')\n\t->groupBy('article_group.id')\n\t->get();\ndump($article_groups);\n```\n### 查询结果\n![查询结果](http://oss.anonycurse.cn/article/images/20180926/qb06QCqFjjYOiBwOyjhWNDFSoroU71UyPVNcAOTi.png)\n\n### SQL\n```SQL\nSELECT \n\tblog_article_group.id as id,\n\tblog_article_group.name as name,\n\tcount(blog_article.id) AS count\nFROM blog_article_group\nLEFT JOIN blog_article ON blog_article_group.id = blog_article.g_id\nGROUP BY blog_article_group.id\n```\n\n## 总结讨论\n\n每种语言都会遇到类似的情况，在学习Golang的时候也会遇到类似的情况\n\n## 相关资源\n[Laravel 一条 SQL 如何 count 多个字段，Laravel 一条 sql 查询每个分类的数量](https://laravel-china.org/articles/4692/laravel-a-sql-how-to-count-multiple-fields-laravel-a-sql-query-the-number-of-each-category)","source":"_posts/laravel/Laravel简单分组统计.md","raw":"---\ntitle: Laravel简单的分组统计\ndate: 2018-09-07 09:25:00\nauthor: Kyle Liu\n<!-- img: /source/images/xxx.jpg -->\ntop: false\n<!-- cover: false -->\n<!-- coverImg: /images/1.jpg -->\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: true\nmathjax: true\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Laravel\ntags:\n  - PHP\n  - Laravel\n  - MySQL\n---\n\n\n## 问题描述\n\n> 最近在开发博客的时候需要对分类进行一个简单的数量统计，以此片文章来记录学习过程\n\n![博客分类](http://oss.anonycurse.cn/article/images/20180926/YdmZ31Y85Y9WKqz7mhe8SLIh8hVxrDecB4hRPVzj.png)\n\n## 解决方法\n> laravel 的DB 支持各种查询，最开始不怎么会，最后各种百度还是搞定了\n\n### 数据库表\n![文章表](http://oss.anonycurse.cn/article/images/20180926/l8LWYNe2oPrQb6HNUPDbuK971OM8jKApPDEDUfZm.png)\n![分类表](http://oss.anonycurse.cn/article/images/20180926/RxBuEJN65Yy63SijYlkgoez0wrZUjyf8gsbBobO1.png)\n\n### 查询语句\n```PHP\n$article_groups = DB::table('article_group')\n\t->select([\n\t\t'article_group.name as name',\n\t\tDB::raw('count(`blog_article`.`id`) as count'),\n\n\t])\n\t->leftJoin('article','article_group.id','=','article.g_id')\n\t->groupBy('article_group.id')\n\t->get();\ndump($article_groups);\n```\n### 查询结果\n![查询结果](http://oss.anonycurse.cn/article/images/20180926/qb06QCqFjjYOiBwOyjhWNDFSoroU71UyPVNcAOTi.png)\n\n### SQL\n```SQL\nSELECT \n\tblog_article_group.id as id,\n\tblog_article_group.name as name,\n\tcount(blog_article.id) AS count\nFROM blog_article_group\nLEFT JOIN blog_article ON blog_article_group.id = blog_article.g_id\nGROUP BY blog_article_group.id\n```\n\n## 总结讨论\n\n每种语言都会遇到类似的情况，在学习Golang的时候也会遇到类似的情况\n\n## 相关资源\n[Laravel 一条 SQL 如何 count 多个字段，Laravel 一条 sql 查询每个分类的数量](https://laravel-china.org/articles/4692/laravel-a-sql-how-to-count-multiple-fields-laravel-a-sql-query-the-number-of-each-category)","slug":"laravel/Laravel简单分组统计","published":1,"updated":"2019-05-03T15:03:41.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv87t0990004m0cd1kp2rfd0","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><blockquote>\n<p>最近在开发博客的时候需要对分类进行一个简单的数量统计，以此片文章来记录学习过程</p>\n</blockquote>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20180926/YdmZ31Y85Y9WKqz7mhe8SLIh8hVxrDecB4hRPVzj.png\" alt=\"博客分类\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><blockquote>\n<p>laravel 的DB 支持各种查询，最开始不怎么会，最后各种百度还是搞定了</p>\n</blockquote>\n<h3 id=\"数据库表\"><a href=\"#数据库表\" class=\"headerlink\" title=\"数据库表\"></a>数据库表</h3><p><img src=\"http://oss.anonycurse.cn/article/images/20180926/l8LWYNe2oPrQb6HNUPDbuK971OM8jKApPDEDUfZm.png\" alt=\"文章表\"><br><img src=\"http://oss.anonycurse.cn/article/images/20180926/RxBuEJN65Yy63SijYlkgoez0wrZUjyf8gsbBobO1.png\" alt=\"分类表\"></p>\n<h3 id=\"查询语句\"><a href=\"#查询语句\" class=\"headerlink\" title=\"查询语句\"></a>查询语句</h3><pre class=\" language-PHP\"><code class=\"language-PHP\">$article_groups = DB::table('article_group')\n    ->select([\n        'article_group.name as name',\n        DB::raw('count(`blog_article`.`id`) as count'),\n\n    ])\n    ->leftJoin('article','article_group.id','=','article.g_id')\n    ->groupBy('article_group.id')\n    ->get();\ndump($article_groups);\n</code></pre>\n<h3 id=\"查询结果\"><a href=\"#查询结果\" class=\"headerlink\" title=\"查询结果\"></a>查询结果</h3><p><img src=\"http://oss.anonycurse.cn/article/images/20180926/qb06QCqFjjYOiBwOyjhWNDFSoroU71UyPVNcAOTi.png\" alt=\"查询结果\"></p>\n<h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><pre class=\" language-SQL\"><code class=\"language-SQL\">SELECT \n    blog_article_group.id as id,\n    blog_article_group.name as name,\n    count(blog_article.id) AS count\nFROM blog_article_group\nLEFT JOIN blog_article ON blog_article_group.id = blog_article.g_id\nGROUP BY blog_article_group.id\n</code></pre>\n<h2 id=\"总结讨论\"><a href=\"#总结讨论\" class=\"headerlink\" title=\"总结讨论\"></a>总结讨论</h2><p>每种语言都会遇到类似的情况，在学习Golang的时候也会遇到类似的情况</p>\n<h2 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h2><p><a href=\"https://laravel-china.org/articles/4692/laravel-a-sql-how-to-count-multiple-fields-laravel-a-sql-query-the-number-of-each-category\" target=\"_blank\" rel=\"noopener\">Laravel 一条 SQL 如何 count 多个字段，Laravel 一条 sql 查询每个分类的数量</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><blockquote>\n<p>最近在开发博客的时候需要对分类进行一个简单的数量统计，以此片文章来记录学习过程</p>\n</blockquote>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20180926/YdmZ31Y85Y9WKqz7mhe8SLIh8hVxrDecB4hRPVzj.png\" alt=\"博客分类\"></p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><blockquote>\n<p>laravel 的DB 支持各种查询，最开始不怎么会，最后各种百度还是搞定了</p>\n</blockquote>\n<h3 id=\"数据库表\"><a href=\"#数据库表\" class=\"headerlink\" title=\"数据库表\"></a>数据库表</h3><p><img src=\"http://oss.anonycurse.cn/article/images/20180926/l8LWYNe2oPrQb6HNUPDbuK971OM8jKApPDEDUfZm.png\" alt=\"文章表\"><br><img src=\"http://oss.anonycurse.cn/article/images/20180926/RxBuEJN65Yy63SijYlkgoez0wrZUjyf8gsbBobO1.png\" alt=\"分类表\"></p>\n<h3 id=\"查询语句\"><a href=\"#查询语句\" class=\"headerlink\" title=\"查询语句\"></a>查询语句</h3><pre><code class=\"PHP\">$article_groups = DB::table(&#39;article_group&#39;)\n    -&gt;select([\n        &#39;article_group.name as name&#39;,\n        DB::raw(&#39;count(`blog_article`.`id`) as count&#39;),\n\n    ])\n    -&gt;leftJoin(&#39;article&#39;,&#39;article_group.id&#39;,&#39;=&#39;,&#39;article.g_id&#39;)\n    -&gt;groupBy(&#39;article_group.id&#39;)\n    -&gt;get();\ndump($article_groups);\n</code></pre>\n<h3 id=\"查询结果\"><a href=\"#查询结果\" class=\"headerlink\" title=\"查询结果\"></a>查询结果</h3><p><img src=\"http://oss.anonycurse.cn/article/images/20180926/qb06QCqFjjYOiBwOyjhWNDFSoroU71UyPVNcAOTi.png\" alt=\"查询结果\"></p>\n<h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><pre><code class=\"SQL\">SELECT \n    blog_article_group.id as id,\n    blog_article_group.name as name,\n    count(blog_article.id) AS count\nFROM blog_article_group\nLEFT JOIN blog_article ON blog_article_group.id = blog_article.g_id\nGROUP BY blog_article_group.id\n</code></pre>\n<h2 id=\"总结讨论\"><a href=\"#总结讨论\" class=\"headerlink\" title=\"总结讨论\"></a>总结讨论</h2><p>每种语言都会遇到类似的情况，在学习Golang的时候也会遇到类似的情况</p>\n<h2 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h2><p><a href=\"https://laravel-china.org/articles/4692/laravel-a-sql-how-to-count-multiple-fields-laravel-a-sql-query-the-number-of-each-category\" target=\"_blank\" rel=\"noopener\">Laravel 一条 SQL 如何 count 多个字段，Laravel 一条 sql 查询每个分类的数量</a></p>\n"},{"title":"怎么用Gin去构建一个RESTful API Golang Service【翻译】","date":"2018-09-07T01:25:00.000Z","author":"Kyle Liu","<!-- img":"/source/images/xxx.jpg -->","top":false,"cover":false,"<!-- coverImg":"/images/1.jpg -->","password":"8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92","toc":true,"mathjax":true,"summary":"这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要","_content":"\n\n# 怎么用Gin去构建一个RESTful API Golang Service【翻译】\n\n##前言\n\n[![Cover](http://oss.anonycurse.cn/article/images/20181105/531wGkj4qxe98UALsFO6vy9kRhdLLqVQZY0jnNhE.png \"Cover\")](\"Cover\")\n\nToday I’m going to build a simple API for todo application with the golang programming language. I’m going to use golang simplest/fastest framework gin-gonic and a beautiful ORM gorm for our database work. To install these packages go to your workspace $GOPATH/src and run these command below:\n\n\n```go\n$ go get gopkg.in/gin-gonic/gin.v1\n$ go get -u github.com/jinzhu/gorm\n$ go get github.com/go-sql-driver/mysql\n```\n## In generic crud application we need the API’s as follows:\n- POST todos/\n- GET todos/\n- GET todos/{id}\n- PUT todos/{id}\n- DELETE todos/{id}\n\nLet’s start coding, go to your $GOPATH/src and make a directory todo. Inside the todo directory create a file main.go. Import the “gin framework” to our project and create the routes like below inside main function. I like to add a prefix of the apis like “api/v1/”, that’s why we’ll use the router Group method\n\n```go\npackage main\n\nimport (\n       \"github.com/gin-gonic/gin\"\n)\nfunc main() {\nrouter := gin.Default()\nv1 := router.Group(\"/api/v1/todos\")\n {\n  v1.POST(\"/\", createTodo)\n  v1.GET(\"/\", fetchAllTodo)\n  v1.GET(\"/:id\", fetchSingleTodo)\n  v1.PUT(\"/:id\", updateTodo)\n  v1.DELETE(\"/:id\", deleteTodo)\n }\n router.Run()\n}\n```\n\nWe have created five routes and they handle some functions like `createTodo`, `fetchAllTodo` etc. We’ll discuss about them soon.\n\nNow we need to setup a database connection. To use database pull the gorm package and mysql dialects in our code. Follow the code below:\n\n```go\npackage main\n\nimport (\n       \"github.com/gin-gonic/gin\"\n       \"github.com/jinzhu/gorm\"\n       _ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nvar db *gorm.DB\nfunc init() {\n //open a db connection\n var err error\n db, err = gorm.Open(\"mysql\", \"root:12345@/demo?charset=utf8&parseTime=True&loc=Local\")\n if err != nil {\n  panic(\"failed to connect database\")\n }\n//Migrate the schema\n db.AutoMigrate(&todoModel{})\n}\n```\n\nIn the above code “mysql” is our database driver, “root” is database username, “12345” password and “demo” is database name. Please change these information as your needs.\n\nWe’ll use the Database function to get the database connection. Lets make a todoModel and transformedTodo struct. The first struct will represent the original Todo and the second one will hold the transformed todo for response to the api. Here we transformed the todo response because we don’t expose some database fields (updated_at, created_at) to the consumer.\n\n```go\ntype (\n // todoModel describes a todoModel type\n todoModel struct {\n  gorm.Model\n  Title     string `json:\"title\"`\n  Completed int    `json:\"completed\"`\n }\n// transformedTodo represents a formatted todo\n transformedTodo struct {\n  ID        uint   `json:\"id\"`\n  Title     string `json:\"title\"`\n  Completed bool   `json:\"completed\"`\n }\n)\n```\n\nTodo struct has one field extra gorm.Model what does it mean? well, this field will embed a Model struct for us which contains four fields “ID, CreatedAt, UpdatedAt, DeletedAt”\n\nGorm has migration facilities, we already used it in init function. When we run the application first it’ll create a connection and then the migration.\n```go\n//Migrate the schema\n db.AutoMigrate(&todoModel{})\n```\n\n\n![Migrate ](http://oss.anonycurse.cn/article/images/20181105/bhwTdjLFSN57B6kkl8CE8NVaZ7zeXGsYHhh7D0c0.png \"Migrate \")\n\n\nCan you remember the five routes we wrote a minute earlier? Lets implement the five methods one by one.\n\nWhen a user send a POST request to the path ‘api/v1/todos/’ with ‘title and completed’ field it’ll be handled by this route v1.POST(“/”, createTodo)\n\nLets Implement the createTodo function\n\n```go\n// createTodo add a new todo\nfunc createTodo(c *gin.Context) {\n completed, _ := strconv.Atoi(c.PostForm(\"completed\"))\n todo := todoModel{Title: c.PostForm(\"title\"), Completed: completed}\n db.Save(&todo)\n c.JSON(http.StatusCreated, gin.H{\"status\": http.StatusCreated, \"message\": \"Todo item created successfully!\", \"resourceId\": todo.ID})\n}\n```\nIn the above code we use gin Context to receive the posted data and gorm database connection to save the todo. After saving the resource we send the resource id with a good & meaningful response to the user.\n\nLets implement the rest of the functions\n\n```go\n// fetchAllTodo fetch all todos\nfunc fetchAllTodo(c *gin.Context) {\n var todos []todoModel\n var _todos []transformedTodo\ndb.Find(&todos)\nif len(todos) <= 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\n//transforms the todos for building a good response\n for _, item := range todos {\n  completed := false\n  if item.Completed == 1 {\n   completed = true\n  } else {\n   completed = false\n  }\n  _todos = append(_todos, transformedTodo{ID: item.ID, Title: item.Title, Completed: completed})\n }\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todos})\n}\n// fetchSingleTodo fetch a single todo\nfunc fetchSingleTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(\"id\")\ndb.First(&todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\ncompleted := false\n if todo.Completed == 1 {\n  completed = true\n } else {\n  completed = false\n }\n_todo := transformedTodo{ID: todo.ID, Title: todo.Title, Completed: completed}\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todo})\n}\n// updateTodo update a todo\nfunc updateTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(\"id\")\ndb.First(&todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\ndb.Model(&todo).Update(\"title\", c.PostForm(\"title\"))\n completed, _ := strconv.Atoi(c.PostForm(\"completed\"))\n db.Model(&todo).Update(\"completed\", completed)\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo updated successfully!\"})\n}\n// deleteTodo remove a todo\nfunc deleteTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(\"id\")\ndb.First(&todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\ndb.Delete(&todo)\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo deleted successfully!\"})\n}\n```\nIn the fetchAllTodo function we fetched all the todos and and build a transformed response with id, title, completed . We removed the CreatedAt, UpdatedAt, DeletedAt fields and cast the integer value to bool.\n\nWell, we write enough code, let try to build the app and test it, I’m going test it using chrome extension Postman (you can use any REST client like curl to test).\n\nTo build the app open your terminal and go the the project directory\n\n```go\n$ go build main.go\n```\n\nThe command will build a binary file main and to run the file us this command $ ./main . Wow, our simple todo app is running on port: 8080. It’ll display the debug log, because by default gin run’s in debug mode and port 8080.\n\nTo test the api run postman and test the api sequentially\n\n![Create a todo](http://oss.anonycurse.cn/article/images/20181105/wVld5PMtLBFEsVXjcE6pY9FhQSM5MuQB6hAJCtWe.png \"Create a todo\")\n\n![Fetch all todos](http://oss.anonycurse.cn/article/images/20181105/KVYw3KtSm1CqkS1R9jaTdxBXwue69Rv68F0eD4gL.png \"Fetch all todos\")\n\n\n![Fetch a single todo](http://oss.anonycurse.cn/article/images/20181105/Iye2ekzbzEPkO8ScOwqnV0tLSun07itdPsXannpm.png \"Fetch a single todo\")\n\n![Update a todo](http://oss.anonycurse.cn/article/images/20181105/Y5VFuzWRyiocmO6JERjrZw5hvn9B7OBiQbAi4U0S.png \"Update a todo\")\n\n![Delete a todo](http://oss.anonycurse.cn/article/images/20181105/8b3CN4i3tfZbtsOvFglwi3DLtpHCPlmwfHuuBsWb.png \"Delete a todo\")\n\n## Need full source code?\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nvar db *gorm.DB\n\nfunc init() {\n\t//open a db connection\n\tvar err error\n\tdb, err = gorm.Open(\"mysql\", \"root:12345@/demo?charset=utf8&parseTime=True&loc=Local\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\n\t//Migrate the schema\n\tdb.AutoMigrate(&todoModel{})\n}\n\nfunc main() {\n\n\trouter := gin.Default()\n\n\tv1 := router.Group(\"/api/v1/todos\")\n\t{\n\t\tv1.POST(\"/\", createTodo)\n\t\tv1.GET(\"/\", fetchAllTodo)\n\t\tv1.GET(\"/:id\", fetchSingleTodo)\n\t\tv1.PUT(\"/:id\", updateTodo)\n\t\tv1.DELETE(\"/:id\", deleteTodo)\n\t}\n\trouter.Run()\n\n}\n\ntype (\n\t// todoModel describes a todoModel type\n\ttodoModel struct {\n\t\tgorm.Model\n\t\tTitle     string `json:\"title\"`\n\t\tCompleted int    `json:\"completed\"`\n\t}\n\n\t// transformedTodo represents a formatted todo\n\ttransformedTodo struct {\n\t\tID        uint   `json:\"id\"`\n\t\tTitle     string `json:\"title\"`\n\t\tCompleted bool   `json:\"completed\"`\n\t}\n)\n\n// createTodo add a new todo\nfunc createTodo(c *gin.Context) {\n\tcompleted, _ := strconv.Atoi(c.PostForm(\"completed\"))\n\ttodo := todoModel{Title: c.PostForm(\"title\"), Completed: completed}\n\tdb.Save(&todo)\n\tc.JSON(http.StatusCreated, gin.H{\"status\": http.StatusCreated, \"message\": \"Todo item created successfully!\", \"resourceId\": todo.ID})\n}\n\n// fetchAllTodo fetch all todos\nfunc fetchAllTodo(c *gin.Context) {\n\tvar todos []todoModel\n\tvar _todos []transformedTodo\n\n\tdb.Find(&todos)\n\n\tif len(todos) <= 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\t//transforms the todos for building a good response\n\tfor _, item := range todos {\n\t\tcompleted := false\n\t\tif item.Completed == 1 {\n\t\t\tcompleted = true\n\t\t} else {\n\t\t\tcompleted = false\n\t\t}\n\t\t_todos = append(_todos, transformedTodo{ID: item.ID, Title: item.Title, Completed: completed})\n\t}\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todos})\n}\n\n// fetchSingleTodo fetch a single todo\nfunc fetchSingleTodo(c *gin.Context) {\n\tvar todo todoModel\n\ttodoID := c.Param(\"id\")\n\n\tdb.First(&todo, todoID)\n\n\tif todo.ID == 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\tcompleted := false\n\tif todo.Completed == 1 {\n\t\tcompleted = true\n\t} else {\n\t\tcompleted = false\n\t}\n\n\t_todo := transformedTodo{ID: todo.ID, Title: todo.Title, Completed: completed}\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todo})\n}\n\n// updateTodo update a todo\nfunc updateTodo(c *gin.Context) {\n\tvar todo todoModel\n\ttodoID := c.Param(\"id\")\n\n\tdb.First(&todo, todoID)\n\n\tif todo.ID == 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\tdb.Model(&todo).Update(\"title\", c.PostForm(\"title\"))\n\tcompleted, _ := strconv.Atoi(c.PostForm(\"completed\"))\n\tdb.Model(&todo).Update(\"completed\", completed)\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo updated successfully!\"})\n}\n\n// deleteTodo remove a todo\nfunc deleteTodo(c *gin.Context) {\n\tvar todo todoModel\n\ttodoID := c.Param(\"id\")\n\n\tdb.First(&todo, todoID)\n\n\tif todo.ID == 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\tdb.Delete(&todo)\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo deleted successfully!\"})\n}\n```\n\n> Note: When you are using code production you must take care of the steps below:\n\n- Do not fetch all the data select * from todos , use pagination\n- Do not trust user input. You must validate the inputs, there are severals tools to validate input. Read the article for validation process\n- Check every possible error\n- You should use logging and authentication as your need\n- I am really sorry for my BAD English and Writing flow. If you notice any mistake in the article please feel free to write a comment.","source":"_posts/golang/怎么用Gin去构建一个RESTful API Golang Service.md","raw":"---\ntitle: 怎么用Gin去构建一个RESTful API Golang Service【翻译】\ndate: 2018-09-07 09:25:00\nauthor: Kyle Liu\n<!-- img: /source/images/xxx.jpg -->\ntop: false\ncover: false\n<!-- coverImg: /images/1.jpg -->\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: true\nmathjax: true\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Golang\ntags:\n  - Golang\n  - Gin\n---\n\n\n# 怎么用Gin去构建一个RESTful API Golang Service【翻译】\n\n##前言\n\n[![Cover](http://oss.anonycurse.cn/article/images/20181105/531wGkj4qxe98UALsFO6vy9kRhdLLqVQZY0jnNhE.png \"Cover\")](\"Cover\")\n\nToday I’m going to build a simple API for todo application with the golang programming language. I’m going to use golang simplest/fastest framework gin-gonic and a beautiful ORM gorm for our database work. To install these packages go to your workspace $GOPATH/src and run these command below:\n\n\n```go\n$ go get gopkg.in/gin-gonic/gin.v1\n$ go get -u github.com/jinzhu/gorm\n$ go get github.com/go-sql-driver/mysql\n```\n## In generic crud application we need the API’s as follows:\n- POST todos/\n- GET todos/\n- GET todos/{id}\n- PUT todos/{id}\n- DELETE todos/{id}\n\nLet’s start coding, go to your $GOPATH/src and make a directory todo. Inside the todo directory create a file main.go. Import the “gin framework” to our project and create the routes like below inside main function. I like to add a prefix of the apis like “api/v1/”, that’s why we’ll use the router Group method\n\n```go\npackage main\n\nimport (\n       \"github.com/gin-gonic/gin\"\n)\nfunc main() {\nrouter := gin.Default()\nv1 := router.Group(\"/api/v1/todos\")\n {\n  v1.POST(\"/\", createTodo)\n  v1.GET(\"/\", fetchAllTodo)\n  v1.GET(\"/:id\", fetchSingleTodo)\n  v1.PUT(\"/:id\", updateTodo)\n  v1.DELETE(\"/:id\", deleteTodo)\n }\n router.Run()\n}\n```\n\nWe have created five routes and they handle some functions like `createTodo`, `fetchAllTodo` etc. We’ll discuss about them soon.\n\nNow we need to setup a database connection. To use database pull the gorm package and mysql dialects in our code. Follow the code below:\n\n```go\npackage main\n\nimport (\n       \"github.com/gin-gonic/gin\"\n       \"github.com/jinzhu/gorm\"\n       _ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nvar db *gorm.DB\nfunc init() {\n //open a db connection\n var err error\n db, err = gorm.Open(\"mysql\", \"root:12345@/demo?charset=utf8&parseTime=True&loc=Local\")\n if err != nil {\n  panic(\"failed to connect database\")\n }\n//Migrate the schema\n db.AutoMigrate(&todoModel{})\n}\n```\n\nIn the above code “mysql” is our database driver, “root” is database username, “12345” password and “demo” is database name. Please change these information as your needs.\n\nWe’ll use the Database function to get the database connection. Lets make a todoModel and transformedTodo struct. The first struct will represent the original Todo and the second one will hold the transformed todo for response to the api. Here we transformed the todo response because we don’t expose some database fields (updated_at, created_at) to the consumer.\n\n```go\ntype (\n // todoModel describes a todoModel type\n todoModel struct {\n  gorm.Model\n  Title     string `json:\"title\"`\n  Completed int    `json:\"completed\"`\n }\n// transformedTodo represents a formatted todo\n transformedTodo struct {\n  ID        uint   `json:\"id\"`\n  Title     string `json:\"title\"`\n  Completed bool   `json:\"completed\"`\n }\n)\n```\n\nTodo struct has one field extra gorm.Model what does it mean? well, this field will embed a Model struct for us which contains four fields “ID, CreatedAt, UpdatedAt, DeletedAt”\n\nGorm has migration facilities, we already used it in init function. When we run the application first it’ll create a connection and then the migration.\n```go\n//Migrate the schema\n db.AutoMigrate(&todoModel{})\n```\n\n\n![Migrate ](http://oss.anonycurse.cn/article/images/20181105/bhwTdjLFSN57B6kkl8CE8NVaZ7zeXGsYHhh7D0c0.png \"Migrate \")\n\n\nCan you remember the five routes we wrote a minute earlier? Lets implement the five methods one by one.\n\nWhen a user send a POST request to the path ‘api/v1/todos/’ with ‘title and completed’ field it’ll be handled by this route v1.POST(“/”, createTodo)\n\nLets Implement the createTodo function\n\n```go\n// createTodo add a new todo\nfunc createTodo(c *gin.Context) {\n completed, _ := strconv.Atoi(c.PostForm(\"completed\"))\n todo := todoModel{Title: c.PostForm(\"title\"), Completed: completed}\n db.Save(&todo)\n c.JSON(http.StatusCreated, gin.H{\"status\": http.StatusCreated, \"message\": \"Todo item created successfully!\", \"resourceId\": todo.ID})\n}\n```\nIn the above code we use gin Context to receive the posted data and gorm database connection to save the todo. After saving the resource we send the resource id with a good & meaningful response to the user.\n\nLets implement the rest of the functions\n\n```go\n// fetchAllTodo fetch all todos\nfunc fetchAllTodo(c *gin.Context) {\n var todos []todoModel\n var _todos []transformedTodo\ndb.Find(&todos)\nif len(todos) <= 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\n//transforms the todos for building a good response\n for _, item := range todos {\n  completed := false\n  if item.Completed == 1 {\n   completed = true\n  } else {\n   completed = false\n  }\n  _todos = append(_todos, transformedTodo{ID: item.ID, Title: item.Title, Completed: completed})\n }\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todos})\n}\n// fetchSingleTodo fetch a single todo\nfunc fetchSingleTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(\"id\")\ndb.First(&todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\ncompleted := false\n if todo.Completed == 1 {\n  completed = true\n } else {\n  completed = false\n }\n_todo := transformedTodo{ID: todo.ID, Title: todo.Title, Completed: completed}\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todo})\n}\n// updateTodo update a todo\nfunc updateTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(\"id\")\ndb.First(&todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\ndb.Model(&todo).Update(\"title\", c.PostForm(\"title\"))\n completed, _ := strconv.Atoi(c.PostForm(\"completed\"))\n db.Model(&todo).Update(\"completed\", completed)\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo updated successfully!\"})\n}\n// deleteTodo remove a todo\nfunc deleteTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(\"id\")\ndb.First(&todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n  return\n }\ndb.Delete(&todo)\n c.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo deleted successfully!\"})\n}\n```\nIn the fetchAllTodo function we fetched all the todos and and build a transformed response with id, title, completed . We removed the CreatedAt, UpdatedAt, DeletedAt fields and cast the integer value to bool.\n\nWell, we write enough code, let try to build the app and test it, I’m going test it using chrome extension Postman (you can use any REST client like curl to test).\n\nTo build the app open your terminal and go the the project directory\n\n```go\n$ go build main.go\n```\n\nThe command will build a binary file main and to run the file us this command $ ./main . Wow, our simple todo app is running on port: 8080. It’ll display the debug log, because by default gin run’s in debug mode and port 8080.\n\nTo test the api run postman and test the api sequentially\n\n![Create a todo](http://oss.anonycurse.cn/article/images/20181105/wVld5PMtLBFEsVXjcE6pY9FhQSM5MuQB6hAJCtWe.png \"Create a todo\")\n\n![Fetch all todos](http://oss.anonycurse.cn/article/images/20181105/KVYw3KtSm1CqkS1R9jaTdxBXwue69Rv68F0eD4gL.png \"Fetch all todos\")\n\n\n![Fetch a single todo](http://oss.anonycurse.cn/article/images/20181105/Iye2ekzbzEPkO8ScOwqnV0tLSun07itdPsXannpm.png \"Fetch a single todo\")\n\n![Update a todo](http://oss.anonycurse.cn/article/images/20181105/Y5VFuzWRyiocmO6JERjrZw5hvn9B7OBiQbAi4U0S.png \"Update a todo\")\n\n![Delete a todo](http://oss.anonycurse.cn/article/images/20181105/8b3CN4i3tfZbtsOvFglwi3DLtpHCPlmwfHuuBsWb.png \"Delete a todo\")\n\n## Need full source code?\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/mysql\"\n)\n\nvar db *gorm.DB\n\nfunc init() {\n\t//open a db connection\n\tvar err error\n\tdb, err = gorm.Open(\"mysql\", \"root:12345@/demo?charset=utf8&parseTime=True&loc=Local\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\n\t//Migrate the schema\n\tdb.AutoMigrate(&todoModel{})\n}\n\nfunc main() {\n\n\trouter := gin.Default()\n\n\tv1 := router.Group(\"/api/v1/todos\")\n\t{\n\t\tv1.POST(\"/\", createTodo)\n\t\tv1.GET(\"/\", fetchAllTodo)\n\t\tv1.GET(\"/:id\", fetchSingleTodo)\n\t\tv1.PUT(\"/:id\", updateTodo)\n\t\tv1.DELETE(\"/:id\", deleteTodo)\n\t}\n\trouter.Run()\n\n}\n\ntype (\n\t// todoModel describes a todoModel type\n\ttodoModel struct {\n\t\tgorm.Model\n\t\tTitle     string `json:\"title\"`\n\t\tCompleted int    `json:\"completed\"`\n\t}\n\n\t// transformedTodo represents a formatted todo\n\ttransformedTodo struct {\n\t\tID        uint   `json:\"id\"`\n\t\tTitle     string `json:\"title\"`\n\t\tCompleted bool   `json:\"completed\"`\n\t}\n)\n\n// createTodo add a new todo\nfunc createTodo(c *gin.Context) {\n\tcompleted, _ := strconv.Atoi(c.PostForm(\"completed\"))\n\ttodo := todoModel{Title: c.PostForm(\"title\"), Completed: completed}\n\tdb.Save(&todo)\n\tc.JSON(http.StatusCreated, gin.H{\"status\": http.StatusCreated, \"message\": \"Todo item created successfully!\", \"resourceId\": todo.ID})\n}\n\n// fetchAllTodo fetch all todos\nfunc fetchAllTodo(c *gin.Context) {\n\tvar todos []todoModel\n\tvar _todos []transformedTodo\n\n\tdb.Find(&todos)\n\n\tif len(todos) <= 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\t//transforms the todos for building a good response\n\tfor _, item := range todos {\n\t\tcompleted := false\n\t\tif item.Completed == 1 {\n\t\t\tcompleted = true\n\t\t} else {\n\t\t\tcompleted = false\n\t\t}\n\t\t_todos = append(_todos, transformedTodo{ID: item.ID, Title: item.Title, Completed: completed})\n\t}\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todos})\n}\n\n// fetchSingleTodo fetch a single todo\nfunc fetchSingleTodo(c *gin.Context) {\n\tvar todo todoModel\n\ttodoID := c.Param(\"id\")\n\n\tdb.First(&todo, todoID)\n\n\tif todo.ID == 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\tcompleted := false\n\tif todo.Completed == 1 {\n\t\tcompleted = true\n\t} else {\n\t\tcompleted = false\n\t}\n\n\t_todo := transformedTodo{ID: todo.ID, Title: todo.Title, Completed: completed}\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"data\": _todo})\n}\n\n// updateTodo update a todo\nfunc updateTodo(c *gin.Context) {\n\tvar todo todoModel\n\ttodoID := c.Param(\"id\")\n\n\tdb.First(&todo, todoID)\n\n\tif todo.ID == 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\tdb.Model(&todo).Update(\"title\", c.PostForm(\"title\"))\n\tcompleted, _ := strconv.Atoi(c.PostForm(\"completed\"))\n\tdb.Model(&todo).Update(\"completed\", completed)\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo updated successfully!\"})\n}\n\n// deleteTodo remove a todo\nfunc deleteTodo(c *gin.Context) {\n\tvar todo todoModel\n\ttodoID := c.Param(\"id\")\n\n\tdb.First(&todo, todoID)\n\n\tif todo.ID == 0 {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"status\": http.StatusNotFound, \"message\": \"No todo found!\"})\n\t\treturn\n\t}\n\n\tdb.Delete(&todo)\n\tc.JSON(http.StatusOK, gin.H{\"status\": http.StatusOK, \"message\": \"Todo deleted successfully!\"})\n}\n```\n\n> Note: When you are using code production you must take care of the steps below:\n\n- Do not fetch all the data select * from todos , use pagination\n- Do not trust user input. You must validate the inputs, there are severals tools to validate input. Read the article for validation process\n- Check every possible error\n- You should use logging and authentication as your need\n- I am really sorry for my BAD English and Writing flow. If you notice any mistake in the article please feel free to write a comment.","slug":"golang/怎么用Gin去构建一个RESTful API Golang Service","published":1,"updated":"2019-05-03T15:07:22.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv87t09k0005m0cd9ifq5flx","content":"<h1 id=\"怎么用Gin去构建一个RESTful-API-Golang-Service【翻译】\"><a href=\"#怎么用Gin去构建一个RESTful-API-Golang-Service【翻译】\" class=\"headerlink\" title=\"怎么用Gin去构建一个RESTful API Golang Service【翻译】\"></a>怎么用Gin去构建一个RESTful API Golang Service【翻译】</h1><p>##前言</p>\n<p><a href=\"&quot;Cover&quot;\"><img src=\"http://oss.anonycurse.cn/article/images/20181105/531wGkj4qxe98UALsFO6vy9kRhdLLqVQZY0jnNhE.png\" alt=\"Cover\" title=\"Cover\"></a></p>\n<p>Today I’m going to build a simple API for todo application with the golang programming language. I’m going to use golang simplest/fastest framework gin-gonic and a beautiful ORM gorm for our database work. To install these packages go to your workspace $GOPATH/src and run these command below:</p>\n<pre class=\" language-go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> get gopkg<span class=\"token punctuation\">.</span>in<span class=\"token operator\">/</span>gin<span class=\"token operator\">-</span>gonic<span class=\"token operator\">/</span>gin<span class=\"token punctuation\">.</span>v1\n$ <span class=\"token keyword\">go</span> get <span class=\"token operator\">-</span>u github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jinzhu<span class=\"token operator\">/</span>gorm\n$ <span class=\"token keyword\">go</span> get github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">go</span><span class=\"token operator\">-</span>sql<span class=\"token operator\">-</span>driver<span class=\"token operator\">/</span>mysql\n</code></pre>\n<h2 id=\"In-generic-crud-application-we-need-the-API’s-as-follows\"><a href=\"#In-generic-crud-application-we-need-the-API’s-as-follows\" class=\"headerlink\" title=\"In generic crud application we need the API’s as follows:\"></a>In generic crud application we need the API’s as follows:</h2><ul>\n<li>POST todos/</li>\n<li>GET todos/</li>\n<li>GET todos/{id}</li>\n<li>PUT todos/{id}</li>\n<li>DELETE todos/{id}</li>\n</ul>\n<p>Let’s start coding, go to your $GOPATH/src and make a directory todo. Inside the todo directory create a file main.go. Import the “gin framework” to our project and create the routes like below inside main function. I like to add a prefix of the apis like “api/v1/”, that’s why we’ll use the router Group method</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n       <span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nrouter <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nv1 <span class=\"token operator\">:=</span> router<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1/todos\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">{</span>\n  v1<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> createTodo<span class=\"token punctuation\">)</span>\n  v1<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> fetchAllTodo<span class=\"token punctuation\">)</span>\n  v1<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> fetchSingleTodo<span class=\"token punctuation\">)</span>\n  v1<span class=\"token punctuation\">.</span><span class=\"token function\">PUT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> updateTodo<span class=\"token punctuation\">)</span>\n  v1<span class=\"token punctuation\">.</span><span class=\"token function\">DELETE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> deleteTodo<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>We have created five routes and they handle some functions like <code>createTodo</code>, <code>fetchAllTodo</code> etc. We’ll discuss about them soon.</p>\n<p>Now we need to setup a database connection. To use database pull the gorm package and mysql dialects in our code. Follow the code below:</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n       <span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n       <span class=\"token string\">\"github.com/jinzhu/gorm\"</span>\n       <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/jinzhu/gorm/dialects/mysql\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\" spellcheck=\"true\">//open a db connection</span>\n <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root:12345@/demo?charset=utf8&amp;parseTime=True&amp;loc=Local\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to connect database\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//Migrate the schema</span>\n db<span class=\"token punctuation\">.</span><span class=\"token function\">AutoMigrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todoModel<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In the above code “mysql” is our database driver, “root” is database username, “12345” password and “demo” is database name. Please change these information as your needs.</p>\n<p>We’ll use the Database function to get the database connection. Lets make a todoModel and transformedTodo struct. The first struct will represent the original Todo and the second one will hold the transformed todo for response to the api. Here we transformed the todo response because we don’t expose some database fields (updated_at, created_at) to the consumer.</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span>\n <span class=\"token comment\" spellcheck=\"true\">// todoModel describes a todoModel type</span>\n todoModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  gorm<span class=\"token punctuation\">.</span>Model\n  Title     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title\"`</span>\n  Completed <span class=\"token builtin\">int</span>    <span class=\"token string\">`json:\"completed\"`</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// transformedTodo represents a formatted todo</span>\n transformedTodo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  ID        <span class=\"token builtin\">uint</span>   <span class=\"token string\">`json:\"id\"`</span>\n  Title     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title\"`</span>\n  Completed <span class=\"token builtin\">bool</span>   <span class=\"token string\">`json:\"completed\"`</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Todo struct has one field extra gorm.Model what does it mean? well, this field will embed a Model struct for us which contains four fields “ID, CreatedAt, UpdatedAt, DeletedAt”</p>\n<p>Gorm has migration facilities, we already used it in init function. When we run the application first it’ll create a connection and then the migration.</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">//Migrate the schema</span>\n db<span class=\"token punctuation\">.</span><span class=\"token function\">AutoMigrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todoModel<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/bhwTdjLFSN57B6kkl8CE8NVaZ7zeXGsYHhh7D0c0.png\" alt=\"Migrate \" title=\"Migrate \"></p>\n<p>Can you remember the five routes we wrote a minute earlier? Lets implement the five methods one by one.</p>\n<p>When a user send a POST request to the path ‘api/v1/todos/’ with ‘title and completed’ field it’ll be handled by this route v1.POST(“/”, createTodo)</p>\n<p>Lets Implement the createTodo function</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// createTodo add a new todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n todo <span class=\"token operator\">:=</span> todoModel<span class=\"token punctuation\">{</span>Title<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Completed<span class=\"token punctuation\">:</span> completed<span class=\"token punctuation\">}</span>\n db<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span>\n c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusCreated<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusCreated<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo item created successfully!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resourceId\"</span><span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In the above code we use gin Context to receive the posted data and gorm database connection to save the todo. After saving the resource we send the resource id with a good &amp; meaningful response to the user.</p>\n<p>Lets implement the rest of the functions</p>\n<pre class=\" language-go\"><code class=\"language-go\"><span class=\"token comment\" spellcheck=\"true\">// fetchAllTodo fetch all todos</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetchAllTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> todos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>todoModel\n <span class=\"token keyword\">var</span> _todos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>transformedTodo\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todos<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//transforms the todos for building a good response</span>\n <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> todos <span class=\"token punctuation\">{</span>\n  completed <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span>Completed <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n   completed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   completed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  _todos <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>_todos<span class=\"token punctuation\">,</span> transformedTodo<span class=\"token punctuation\">{</span>ID<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> Title<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span> Completed<span class=\"token punctuation\">:</span> completed<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> _todos<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// fetchSingleTodo fetch a single todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetchSingleTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> todo todoModel\n todoID <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">,</span> todoID<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span>\n <span class=\"token punctuation\">}</span>\ncompleted <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n <span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>Completed <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n  completed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  completed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n <span class=\"token punctuation\">}</span>\n_todo <span class=\"token operator\">:=</span> transformedTodo<span class=\"token punctuation\">{</span>ID<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> Title<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span> Completed<span class=\"token punctuation\">:</span> completed<span class=\"token punctuation\">}</span>\n c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> _todo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// updateTodo update a todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> todo todoModel\n todoID <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">,</span> todoID<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span>\n <span class=\"token punctuation\">}</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n db<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">)</span>\n c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo updated successfully!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">// deleteTodo remove a todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">var</span> todo todoModel\n todoID <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">,</span> todoID<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span>\n <span class=\"token punctuation\">}</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span>\n c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo deleted successfully!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In the fetchAllTodo function we fetched all the todos and and build a transformed response with id, title, completed . We removed the CreatedAt, UpdatedAt, DeletedAt fields and cast the integer value to bool.</p>\n<p>Well, we write enough code, let try to build the app and test it, I’m going test it using chrome extension Postman (you can use any REST client like curl to test).</p>\n<p>To build the app open your terminal and go the the project directory</p>\n<pre class=\" language-go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> build main<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\n</code></pre>\n<p>The command will build a binary file main and to run the file us this command $ ./main . Wow, our simple todo app is running on port: 8080. It’ll display the debug log, because by default gin run’s in debug mode and port 8080.</p>\n<p>To test the api run postman and test the api sequentially</p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/wVld5PMtLBFEsVXjcE6pY9FhQSM5MuQB6hAJCtWe.png\" alt=\"Create a todo\" title=\"Create a todo\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/KVYw3KtSm1CqkS1R9jaTdxBXwue69Rv68F0eD4gL.png\" alt=\"Fetch all todos\" title=\"Fetch all todos\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/Iye2ekzbzEPkO8ScOwqnV0tLSun07itdPsXannpm.png\" alt=\"Fetch a single todo\" title=\"Fetch a single todo\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/Y5VFuzWRyiocmO6JERjrZw5hvn9B7OBiQbAi4U0S.png\" alt=\"Update a todo\" title=\"Update a todo\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/8b3CN4i3tfZbtsOvFglwi3DLtpHCPlmwfHuuBsWb.png\" alt=\"Delete a todo\" title=\"Delete a todo\"></p>\n<h2 id=\"Need-full-source-code\"><a href=\"#Need-full-source-code\" class=\"headerlink\" title=\"Need full source code?\"></a>Need full source code?</h2><pre class=\" language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"net/http\"</span>\n    <span class=\"token string\">\"strconv\"</span>\n\n    <span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n    <span class=\"token string\">\"github.com/jinzhu/gorm\"</span>\n    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/jinzhu/gorm/dialects/mysql\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//open a db connection</span>\n    <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span>\n    db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root:12345@/demo?charset=utf8&amp;parseTime=True&amp;loc=Local\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to connect database\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//Migrate the schema</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">AutoMigrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todoModel<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    router <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    v1 <span class=\"token operator\">:=</span> router<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1/todos\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        v1<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> createTodo<span class=\"token punctuation\">)</span>\n        v1<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> fetchAllTodo<span class=\"token punctuation\">)</span>\n        v1<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> fetchSingleTodo<span class=\"token punctuation\">)</span>\n        v1<span class=\"token punctuation\">.</span><span class=\"token function\">PUT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> updateTodo<span class=\"token punctuation\">)</span>\n        v1<span class=\"token punctuation\">.</span><span class=\"token function\">DELETE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id\"</span><span class=\"token punctuation\">,</span> deleteTodo<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\" spellcheck=\"true\">// todoModel describes a todoModel type</span>\n    todoModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n        gorm<span class=\"token punctuation\">.</span>Model\n        Title     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title\"`</span>\n        Completed <span class=\"token builtin\">int</span>    <span class=\"token string\">`json:\"completed\"`</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// transformedTodo represents a formatted todo</span>\n    transformedTodo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n        ID        <span class=\"token builtin\">uint</span>   <span class=\"token string\">`json:\"id\"`</span>\n        Title     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title\"`</span>\n        Completed <span class=\"token builtin\">bool</span>   <span class=\"token string\">`json:\"completed\"`</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// createTodo add a new todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    todo <span class=\"token operator\">:=</span> todoModel<span class=\"token punctuation\">{</span>Title<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Completed<span class=\"token punctuation\">:</span> completed<span class=\"token punctuation\">}</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusCreated<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusCreated<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo item created successfully!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resourceId\"</span><span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// fetchAllTodo fetch all todos</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetchAllTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>todoModel\n    <span class=\"token keyword\">var</span> _todos <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>transformedTodo\n\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todos<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//transforms the todos for building a good response</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> item <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> todos <span class=\"token punctuation\">{</span>\n        completed <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span>Completed <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            completed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            completed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n        _todos <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>_todos<span class=\"token punctuation\">,</span> transformedTodo<span class=\"token punctuation\">{</span>ID<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> Title<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span> Completed<span class=\"token punctuation\">:</span> completed<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> _todos<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// fetchSingleTodo fetch a single todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetchSingleTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todo todoModel\n    todoID <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">,</span> todoID<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    completed <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>Completed <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        completed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        completed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    _todo <span class=\"token operator\">:=</span> transformedTodo<span class=\"token punctuation\">{</span>ID<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> Title<span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span> Completed<span class=\"token punctuation\">:</span> completed<span class=\"token punctuation\">}</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> _todo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// updateTodo update a todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todo todoModel\n    todoID <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">,</span> todoID<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">PostForm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo updated successfully!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// deleteTodo remove a todo</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> todo todoModel\n    todoID <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">,</span> todoID<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusNotFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"No todo found!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>todo<span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Todo deleted successfully!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>Note: When you are using code production you must take care of the steps below:</p>\n</blockquote>\n<ul>\n<li>Do not fetch all the data select * from todos , use pagination</li>\n<li>Do not trust user input. You must validate the inputs, there are severals tools to validate input. Read the article for validation process</li>\n<li>Check every possible error</li>\n<li>You should use logging and authentication as your need</li>\n<li>I am really sorry for my BAD English and Writing flow. If you notice any mistake in the article please feel free to write a comment.</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"怎么用Gin去构建一个RESTful-API-Golang-Service【翻译】\"><a href=\"#怎么用Gin去构建一个RESTful-API-Golang-Service【翻译】\" class=\"headerlink\" title=\"怎么用Gin去构建一个RESTful API Golang Service【翻译】\"></a>怎么用Gin去构建一个RESTful API Golang Service【翻译】</h1><p>##前言</p>\n<p><a href=\"&quot;Cover&quot;\"><img src=\"http://oss.anonycurse.cn/article/images/20181105/531wGkj4qxe98UALsFO6vy9kRhdLLqVQZY0jnNhE.png\" alt=\"Cover\" title=\"Cover\"></a></p>\n<p>Today I’m going to build a simple API for todo application with the golang programming language. I’m going to use golang simplest/fastest framework gin-gonic and a beautiful ORM gorm for our database work. To install these packages go to your workspace $GOPATH/src and run these command below:</p>\n<pre><code class=\"go\">$ go get gopkg.in/gin-gonic/gin.v1\n$ go get -u github.com/jinzhu/gorm\n$ go get github.com/go-sql-driver/mysql\n</code></pre>\n<h2 id=\"In-generic-crud-application-we-need-the-API’s-as-follows\"><a href=\"#In-generic-crud-application-we-need-the-API’s-as-follows\" class=\"headerlink\" title=\"In generic crud application we need the API’s as follows:\"></a>In generic crud application we need the API’s as follows:</h2><ul>\n<li>POST todos/</li>\n<li>GET todos/</li>\n<li>GET todos/{id}</li>\n<li>PUT todos/{id}</li>\n<li>DELETE todos/{id}</li>\n</ul>\n<p>Let’s start coding, go to your $GOPATH/src and make a directory todo. Inside the todo directory create a file main.go. Import the “gin framework” to our project and create the routes like below inside main function. I like to add a prefix of the apis like “api/v1/”, that’s why we’ll use the router Group method</p>\n<pre><code class=\"go\">package main\n\nimport (\n       &quot;github.com/gin-gonic/gin&quot;\n)\nfunc main() {\nrouter := gin.Default()\nv1 := router.Group(&quot;/api/v1/todos&quot;)\n {\n  v1.POST(&quot;/&quot;, createTodo)\n  v1.GET(&quot;/&quot;, fetchAllTodo)\n  v1.GET(&quot;/:id&quot;, fetchSingleTodo)\n  v1.PUT(&quot;/:id&quot;, updateTodo)\n  v1.DELETE(&quot;/:id&quot;, deleteTodo)\n }\n router.Run()\n}\n</code></pre>\n<p>We have created five routes and they handle some functions like <code>createTodo</code>, <code>fetchAllTodo</code> etc. We’ll discuss about them soon.</p>\n<p>Now we need to setup a database connection. To use database pull the gorm package and mysql dialects in our code. Follow the code below:</p>\n<pre><code class=\"go\">package main\n\nimport (\n       &quot;github.com/gin-gonic/gin&quot;\n       &quot;github.com/jinzhu/gorm&quot;\n       _ &quot;github.com/jinzhu/gorm/dialects/mysql&quot;\n)\n\nvar db *gorm.DB\nfunc init() {\n //open a db connection\n var err error\n db, err = gorm.Open(&quot;mysql&quot;, &quot;root:12345@/demo?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)\n if err != nil {\n  panic(&quot;failed to connect database&quot;)\n }\n//Migrate the schema\n db.AutoMigrate(&amp;todoModel{})\n}\n</code></pre>\n<p>In the above code “mysql” is our database driver, “root” is database username, “12345” password and “demo” is database name. Please change these information as your needs.</p>\n<p>We’ll use the Database function to get the database connection. Lets make a todoModel and transformedTodo struct. The first struct will represent the original Todo and the second one will hold the transformed todo for response to the api. Here we transformed the todo response because we don’t expose some database fields (updated_at, created_at) to the consumer.</p>\n<pre><code class=\"go\">type (\n // todoModel describes a todoModel type\n todoModel struct {\n  gorm.Model\n  Title     string `json:&quot;title&quot;`\n  Completed int    `json:&quot;completed&quot;`\n }\n// transformedTodo represents a formatted todo\n transformedTodo struct {\n  ID        uint   `json:&quot;id&quot;`\n  Title     string `json:&quot;title&quot;`\n  Completed bool   `json:&quot;completed&quot;`\n }\n)\n</code></pre>\n<p>Todo struct has one field extra gorm.Model what does it mean? well, this field will embed a Model struct for us which contains four fields “ID, CreatedAt, UpdatedAt, DeletedAt”</p>\n<p>Gorm has migration facilities, we already used it in init function. When we run the application first it’ll create a connection and then the migration.</p>\n<pre><code class=\"go\">//Migrate the schema\n db.AutoMigrate(&amp;todoModel{})\n</code></pre>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/bhwTdjLFSN57B6kkl8CE8NVaZ7zeXGsYHhh7D0c0.png\" alt=\"Migrate \" title=\"Migrate \"></p>\n<p>Can you remember the five routes we wrote a minute earlier? Lets implement the five methods one by one.</p>\n<p>When a user send a POST request to the path ‘api/v1/todos/’ with ‘title and completed’ field it’ll be handled by this route v1.POST(“/”, createTodo)</p>\n<p>Lets Implement the createTodo function</p>\n<pre><code class=\"go\">// createTodo add a new todo\nfunc createTodo(c *gin.Context) {\n completed, _ := strconv.Atoi(c.PostForm(&quot;completed&quot;))\n todo := todoModel{Title: c.PostForm(&quot;title&quot;), Completed: completed}\n db.Save(&amp;todo)\n c.JSON(http.StatusCreated, gin.H{&quot;status&quot;: http.StatusCreated, &quot;message&quot;: &quot;Todo item created successfully!&quot;, &quot;resourceId&quot;: todo.ID})\n}\n</code></pre>\n<p>In the above code we use gin Context to receive the posted data and gorm database connection to save the todo. After saving the resource we send the resource id with a good &amp; meaningful response to the user.</p>\n<p>Lets implement the rest of the functions</p>\n<pre><code class=\"go\">// fetchAllTodo fetch all todos\nfunc fetchAllTodo(c *gin.Context) {\n var todos []todoModel\n var _todos []transformedTodo\ndb.Find(&amp;todos)\nif len(todos) &lt;= 0 {\n  c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n  return\n }\n//transforms the todos for building a good response\n for _, item := range todos {\n  completed := false\n  if item.Completed == 1 {\n   completed = true\n  } else {\n   completed = false\n  }\n  _todos = append(_todos, transformedTodo{ID: item.ID, Title: item.Title, Completed: completed})\n }\n c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;data&quot;: _todos})\n}\n// fetchSingleTodo fetch a single todo\nfunc fetchSingleTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(&quot;id&quot;)\ndb.First(&amp;todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n  return\n }\ncompleted := false\n if todo.Completed == 1 {\n  completed = true\n } else {\n  completed = false\n }\n_todo := transformedTodo{ID: todo.ID, Title: todo.Title, Completed: completed}\n c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;data&quot;: _todo})\n}\n// updateTodo update a todo\nfunc updateTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(&quot;id&quot;)\ndb.First(&amp;todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n  return\n }\ndb.Model(&amp;todo).Update(&quot;title&quot;, c.PostForm(&quot;title&quot;))\n completed, _ := strconv.Atoi(c.PostForm(&quot;completed&quot;))\n db.Model(&amp;todo).Update(&quot;completed&quot;, completed)\n c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;message&quot;: &quot;Todo updated successfully!&quot;})\n}\n// deleteTodo remove a todo\nfunc deleteTodo(c *gin.Context) {\n var todo todoModel\n todoID := c.Param(&quot;id&quot;)\ndb.First(&amp;todo, todoID)\nif todo.ID == 0 {\n  c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n  return\n }\ndb.Delete(&amp;todo)\n c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;message&quot;: &quot;Todo deleted successfully!&quot;})\n}\n</code></pre>\n<p>In the fetchAllTodo function we fetched all the todos and and build a transformed response with id, title, completed . We removed the CreatedAt, UpdatedAt, DeletedAt fields and cast the integer value to bool.</p>\n<p>Well, we write enough code, let try to build the app and test it, I’m going test it using chrome extension Postman (you can use any REST client like curl to test).</p>\n<p>To build the app open your terminal and go the the project directory</p>\n<pre><code class=\"go\">$ go build main.go\n</code></pre>\n<p>The command will build a binary file main and to run the file us this command $ ./main . Wow, our simple todo app is running on port: 8080. It’ll display the debug log, because by default gin run’s in debug mode and port 8080.</p>\n<p>To test the api run postman and test the api sequentially</p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/wVld5PMtLBFEsVXjcE6pY9FhQSM5MuQB6hAJCtWe.png\" alt=\"Create a todo\" title=\"Create a todo\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/KVYw3KtSm1CqkS1R9jaTdxBXwue69Rv68F0eD4gL.png\" alt=\"Fetch all todos\" title=\"Fetch all todos\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/Iye2ekzbzEPkO8ScOwqnV0tLSun07itdPsXannpm.png\" alt=\"Fetch a single todo\" title=\"Fetch a single todo\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/Y5VFuzWRyiocmO6JERjrZw5hvn9B7OBiQbAi4U0S.png\" alt=\"Update a todo\" title=\"Update a todo\"></p>\n<p><img src=\"http://oss.anonycurse.cn/article/images/20181105/8b3CN4i3tfZbtsOvFglwi3DLtpHCPlmwfHuuBsWb.png\" alt=\"Delete a todo\" title=\"Delete a todo\"></p>\n<h2 id=\"Need-full-source-code\"><a href=\"#Need-full-source-code\" class=\"headerlink\" title=\"Need full source code?\"></a>Need full source code?</h2><pre><code class=\"go\">package main\n\nimport (\n    &quot;net/http&quot;\n    &quot;strconv&quot;\n\n    &quot;github.com/gin-gonic/gin&quot;\n    &quot;github.com/jinzhu/gorm&quot;\n    _ &quot;github.com/jinzhu/gorm/dialects/mysql&quot;\n)\n\nvar db *gorm.DB\n\nfunc init() {\n    //open a db connection\n    var err error\n    db, err = gorm.Open(&quot;mysql&quot;, &quot;root:12345@/demo?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)\n    if err != nil {\n        panic(&quot;failed to connect database&quot;)\n    }\n\n    //Migrate the schema\n    db.AutoMigrate(&amp;todoModel{})\n}\n\nfunc main() {\n\n    router := gin.Default()\n\n    v1 := router.Group(&quot;/api/v1/todos&quot;)\n    {\n        v1.POST(&quot;/&quot;, createTodo)\n        v1.GET(&quot;/&quot;, fetchAllTodo)\n        v1.GET(&quot;/:id&quot;, fetchSingleTodo)\n        v1.PUT(&quot;/:id&quot;, updateTodo)\n        v1.DELETE(&quot;/:id&quot;, deleteTodo)\n    }\n    router.Run()\n\n}\n\ntype (\n    // todoModel describes a todoModel type\n    todoModel struct {\n        gorm.Model\n        Title     string `json:&quot;title&quot;`\n        Completed int    `json:&quot;completed&quot;`\n    }\n\n    // transformedTodo represents a formatted todo\n    transformedTodo struct {\n        ID        uint   `json:&quot;id&quot;`\n        Title     string `json:&quot;title&quot;`\n        Completed bool   `json:&quot;completed&quot;`\n    }\n)\n\n// createTodo add a new todo\nfunc createTodo(c *gin.Context) {\n    completed, _ := strconv.Atoi(c.PostForm(&quot;completed&quot;))\n    todo := todoModel{Title: c.PostForm(&quot;title&quot;), Completed: completed}\n    db.Save(&amp;todo)\n    c.JSON(http.StatusCreated, gin.H{&quot;status&quot;: http.StatusCreated, &quot;message&quot;: &quot;Todo item created successfully!&quot;, &quot;resourceId&quot;: todo.ID})\n}\n\n// fetchAllTodo fetch all todos\nfunc fetchAllTodo(c *gin.Context) {\n    var todos []todoModel\n    var _todos []transformedTodo\n\n    db.Find(&amp;todos)\n\n    if len(todos) &lt;= 0 {\n        c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n        return\n    }\n\n    //transforms the todos for building a good response\n    for _, item := range todos {\n        completed := false\n        if item.Completed == 1 {\n            completed = true\n        } else {\n            completed = false\n        }\n        _todos = append(_todos, transformedTodo{ID: item.ID, Title: item.Title, Completed: completed})\n    }\n    c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;data&quot;: _todos})\n}\n\n// fetchSingleTodo fetch a single todo\nfunc fetchSingleTodo(c *gin.Context) {\n    var todo todoModel\n    todoID := c.Param(&quot;id&quot;)\n\n    db.First(&amp;todo, todoID)\n\n    if todo.ID == 0 {\n        c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n        return\n    }\n\n    completed := false\n    if todo.Completed == 1 {\n        completed = true\n    } else {\n        completed = false\n    }\n\n    _todo := transformedTodo{ID: todo.ID, Title: todo.Title, Completed: completed}\n    c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;data&quot;: _todo})\n}\n\n// updateTodo update a todo\nfunc updateTodo(c *gin.Context) {\n    var todo todoModel\n    todoID := c.Param(&quot;id&quot;)\n\n    db.First(&amp;todo, todoID)\n\n    if todo.ID == 0 {\n        c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n        return\n    }\n\n    db.Model(&amp;todo).Update(&quot;title&quot;, c.PostForm(&quot;title&quot;))\n    completed, _ := strconv.Atoi(c.PostForm(&quot;completed&quot;))\n    db.Model(&amp;todo).Update(&quot;completed&quot;, completed)\n    c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;message&quot;: &quot;Todo updated successfully!&quot;})\n}\n\n// deleteTodo remove a todo\nfunc deleteTodo(c *gin.Context) {\n    var todo todoModel\n    todoID := c.Param(&quot;id&quot;)\n\n    db.First(&amp;todo, todoID)\n\n    if todo.ID == 0 {\n        c.JSON(http.StatusNotFound, gin.H{&quot;status&quot;: http.StatusNotFound, &quot;message&quot;: &quot;No todo found!&quot;})\n        return\n    }\n\n    db.Delete(&amp;todo)\n    c.JSON(http.StatusOK, gin.H{&quot;status&quot;: http.StatusOK, &quot;message&quot;: &quot;Todo deleted successfully!&quot;})\n}\n</code></pre>\n<blockquote>\n<p>Note: When you are using code production you must take care of the steps below:</p>\n</blockquote>\n<ul>\n<li>Do not fetch all the data select * from todos , use pagination</li>\n<li>Do not trust user input. You must validate the inputs, there are severals tools to validate input. Read the article for validation process</li>\n<li>Check every possible error</li>\n<li>You should use logging and authentication as your need</li>\n<li>I am really sorry for my BAD English and Writing flow. If you notice any mistake in the article please feel free to write a comment.</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjv87t0990004m0cd1kp2rfd0","category_id":"cjv87t09n0006m0cdu9z1wx6l","_id":"cjv87t09t000am0cdrdi2m6ms"},{"post_id":"cjv87t09k0005m0cd9ifq5flx","category_id":"cjv87t09q0008m0cdc32oqs6t","_id":"cjv87t09v000cm0cdfbs0xb7o"}],"PostTag":[{"post_id":"cjv87t0990004m0cd1kp2rfd0","tag_id":"cjv87t09p0007m0cdpuycjjab","_id":"cjv87t09w000em0cddkdxyunf"},{"post_id":"cjv87t0990004m0cd1kp2rfd0","tag_id":"cjv87t09r0009m0cdhthhas1e","_id":"cjv87t09w000fm0cdnt1qky48"},{"post_id":"cjv87t0990004m0cd1kp2rfd0","tag_id":"cjv87t09t000bm0cdy2nc61eo","_id":"cjv87t09y000hm0cda9fiu8wh"},{"post_id":"cjv87t09k0005m0cd9ifq5flx","tag_id":"cjv87t09v000dm0cdiw0nfv5q","_id":"cjv87t09z000im0cdtrc7fuzp"},{"post_id":"cjv87t09k0005m0cd9ifq5flx","tag_id":"cjv87t09x000gm0cdhgz2ipg4","_id":"cjv87t09z000jm0cdot110uu8"}],"Tag":[{"name":"PHP","_id":"cjv87t09p0007m0cdpuycjjab"},{"name":"Laravel","_id":"cjv87t09r0009m0cdhthhas1e"},{"name":"MySQL","_id":"cjv87t09t000bm0cdy2nc61eo"},{"name":"Golang","_id":"cjv87t09v000dm0cdiw0nfv5q"},{"name":"Gin","_id":"cjv87t09x000gm0cdhgz2ipg4"}]}}